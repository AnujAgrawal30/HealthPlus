{
  "privadoCoreVersion" : "1.1.2",
  "privadoCLIVersion" : "v2.1.1",
  "privadoMainVersion" : "1.1.1\n",
  "createdAt" : 1668559488843,
  "repoName" : "HealthPlus",
  "gitMetadata" : {
    "branchName" : "master",
    "commitId" : "486853bb61c50a07ad02e6ae31709d218ebcaf0f",
    "remoteUrl" : "https://github.com/AnujAgrawal30/HealthPlus"
  },
  "localScanPath" : "/home/runner/work/HealthPlus/HealthPlus",
  "sources" : [
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.AccountData.AccountID",
      "name" : "Account ID",
      "category" : "Account Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.OnlineIdentifiers.IPAddress",
      "name" : "IP Address",
      "category" : "Online Identifiers",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.AccountData.AccountPassword",
      "name" : "Account Password",
      "category" : "Account Data",
      "sensitivity" : "high",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.ContactData.Address",
      "name" : "Address",
      "category" : "Contact Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.DateofBirth",
      "name" : "Date of Birth",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.LastName",
      "name" : "Last Name",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.ContactData.EmailAddress",
      "name" : "Email Address",
      "category" : "Contact Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.FinancialData.PaymentMode",
      "name" : "Payment Mode",
      "category" : "Financial Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.Age",
      "name" : "Age",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.HealthData.MedicalCertificates",
      "name" : "Medical Certificates",
      "category" : "Health Data",
      "sensitivity" : "high",
      "isSensitive" : true,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.Photograph",
      "name" : "Photograph",
      "category" : "Personal Identification",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalCharacteristics.Nationality",
      "name" : "Nationality",
      "category" : "Personal Characteristics",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.FirstName",
      "name" : "First Name",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalIdentification.Gender",
      "name" : "Gender",
      "category" : "Personal Identification",
      "sensitivity" : "low",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.ContactData.PhoneNumber",
      "name" : "Phone Number",
      "category" : "Contact Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.AccountData.AccountName",
      "name" : "Account Name",
      "category" : "Account Data",
      "sensitivity" : "medium",
      "isSensitive" : false,
      "tags" : {
        "law" : "GDPR"
      }
    },
    {
      "sourceType" : "Data Element",
      "id" : "Data.Sensitive.PersonalCharacteristics.Religion/ReligiousBeliefs",
      "name" : "Religion / Religious Beliefs",
      "category" : "Personal Characteristics",
      "sensitivity" : "high",
      "isSensitive" : true,
      "tags" : {
        "law" : "GDPR"
      }
    }
  ],
  "processing" : [
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.Age",
      "occurrences" : [
        {
          "sample" : "age",
          "lineNumber" : 828,
          "columnNumber" : 37,
          "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
          "excerpt" : "                Calendar calendarToday = Calendar.getInstance();\n                age = Integer.toString(calendarToday.get(Calendar.YEAR) - calendarBirth.get(Calendar.YEAR));\n\n            }catch(Exception e){e.printStackTrace();}\n\n            possibleSuggestions.add(age + \" \" + firstName + \" \" + lastName); /* <=== */ \n            patientLog.put(age + \" \" + firstName + \" \" + lastName,id);\n        } \n        TextFields.bindAutoCompletion(patientSearchValue,possibleSuggestions);\n    }        \n    "
        },
        {
          "sample" : "\"Age\"",
          "lineNumber" : 144,
          "columnNumber" : 41,
          "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
          "excerpt" : "                Calendar calendarBirth = Calendar.getInstance();\n                calendarBirth.setTime(birth);\n                Calendar calendarToday = Calendar.getInstance();\n                String tmpage = Integer.toString(calendarToday.get(Calendar.YEAR) - calendarBirth.get(Calendar.YEAR));\n                \n                data2.add(new LabReport(\"Age\", tmpage)); /* <=== */ \n                \n        }catch(Exception e){e.printStackTrace();}\n        \n        data2.add(new LabReport(\"\", \"\"));\n        "
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.ContactData.Address",
      "occurrences" : [
        {
          "sample" : "receptionist",
          "lineNumber" : 168,
          "columnNumber" : 34,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
          "excerpt" : "        receptionist.makeSummaryTable();\n        receptionist.fillLineChart();\n        receptionist.fillCurrentDoctors();\n        //receptionist.fillConsultationAreas();\n        receptionist.setPaceholders();\n        stage.setScene(new Scene(receptionist)); /* <=== */ \n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen\n        stage.setX(primaryScreenBounds.getMinX());\n        stage.setY(primaryScreenBounds.getMinY());"
        },
        {
          "sample" : "this",
          "lineNumber" : 1172,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
          "excerpt" : "            popOver = new PopOver();\n        }\n        AllMessagesController popup = new AllMessagesController(lab);\n        popup.loadMessages();\n        \n        popOver.setArrowLocation(PopOver.ArrowLocation.TOP_RIGHT); /* <=== */ \n        popOver.setContentNode(popup);\n        popOver.setAutoFix(true);\n        popOver.setAutoHide(true);\n        popOver.setHideOnEscape(true);\n        popOver.setDetachable(false);"
        },
        {
          "sample" : "this.pharmacistAddress",
          "lineNumber" : 898,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
          "excerpt" : "        pharmacistNIC.setText(docPersonalInfo.get(\"nic\"));\n        pharmacistNationality.setText(docPersonalInfo.get(\"nationality\"));\n        pharmacistReligion.setText(docPersonalInfo.get(\"religion\"));\n        pharmacistMobile.setText(docPersonalInfo.get(\"mobile\"));\n        pharmacistEmail.setText(docPersonalInfo.get(\"email\"));\n        pharmacistAddress.setText(docPersonalInfo.get(\"address\")); /* <=== */ \n\n        try{\n                SimpleDateFormat tmpdataformat = new SimpleDateFormat(\"yyyy-MM-dd\");\n                Date birth = tmpdataformat.parse(docPersonalInfo.get(\"date_of_birth\"));\n                Calendar calendarBirth = Calendar.getInstance();"
        },
        {
          "sample" : "user",
          "lineNumber" : 1050,
          "columnNumber" : 37,
          "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
          "excerpt" : "        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid);\n            user.load();\n            Scene scene = new Scene(user); /* <=== */ \n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            //set Stage boundaries to visible bounds of the main screen\n            stage.setX(primaryScreenBounds.getMinX());"
        },
        {
          "sample" : "tmpAddress",
          "lineNumber" : 557,
          "columnNumber" : 22,
          "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
          "excerpt" : "\n            String mobile = patientMobile.getText().replaceAll(\"\\\\s+$\", \"\");\n            String email = patientEmail.getText().replaceAll(\"\\\\s+$\", \"\");\n\n            String address = patientAddress.getText().replaceAll(\"\\\\s+$\", \"\");\n            String[] tmpAddress = address.split(\" \"); /* <=== */ \n            int size = tmpAddress.length;\n            address = \"\";\n            for (int i = 0; i < size; i++)\n            {\n                address += tmpAddress[i];"
        },
        {
          "sample" : "refundTable",
          "lineNumber" : 216,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
          "excerpt" : "    public void showRefundTable()\n    {\n        Stage stage= new Stage();\n        RefundController refundTable = new RefundController(this);\n  \n        refundTable.fillRefundTable(); /* <=== */ \n        \n        Scene scene = new Scene(refundTable);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
        },
        {
          "sample" : "addslot",
          "lineNumber" : 1397,
          "columnNumber" : 37,
          "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
          "excerpt" : "    }        \n    \n    @FXML private void addTimeSlot()\n    {\n        Stage stage= new Stage();\n        NewDoctorTimeSlotController addslot = new NewDoctorTimeSlotController(doc,this); /* <=== */ \n        Scene scene = new Scene(addslot);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen"
        },
        {
          "sample" : "pharmacistC",
          "lineNumber" : 36,
          "columnNumber" : 28,
          "fileName" : "/app/code/src/main/java/Pharmacist/AddNewDrugController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/AddNewDrug.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.pharmacist = pharmacist;\n        this.pharmacistC = pharmacistC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "lab",
          "lineNumber" : 52,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/LabAssistant/PrescriptionListController.java",
          "excerpt" : "            String prescTests = data.get(i).get(2);\n            \n            data2.add(new Prescription(prescID,prescDate,prescconsultant,prescTests));\n        } \n        prescList.setItems(data2);\n        this.lab = lab; /* <=== */ \n    }        \n\n    @FXML private void LoadPrescriptionInfo()\n    {\n        Prescription prescription = (Prescription)prescList.getSelectionModel().getSelectedItem();"
        },
        {
          "sample" : "popup",
          "lineNumber" : 88,
          "columnNumber" : 32,
          "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
          "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
        },
        {
          "sample" : "refundC",
          "lineNumber" : 43,
          "columnNumber" : 24,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/PopupAskController.java",
          "excerpt" : "        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.label = label;\n        this.cashier = cashier;\n        this.refundC = refundC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "adminC",
          "lineNumber" : 45,
          "columnNumber" : 23,
          "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/Settings.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n        \n        this.admin = admin;\n        this.adminC = adminC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "this.address",
          "lineNumber" : 95,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
          "excerpt" : "                \n        userType.setText(type);\n        \n        firstName.setText(data.get(1).get(7));\n        lastName.setText(data.get(1).get(8));\n        address.setText(data.get(1).get(5)); /* <=== */ \n        NIC.setText(data.get(1).get(2));\n        \n        String date = data.get(1).get(4);\n        DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n        LocalDate birth = LocalDate.parse(date, fomatter1);"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
      "occurrences" : [
        {
          "sample" : "receptionist",
          "lineNumber" : 168,
          "columnNumber" : 34,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
          "excerpt" : "        receptionist.makeSummaryTable();\n        receptionist.fillLineChart();\n        receptionist.fillCurrentDoctors();\n        //receptionist.fillConsultationAreas();\n        receptionist.setPaceholders();\n        stage.setScene(new Scene(receptionist)); /* <=== */ \n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen\n        stage.setX(primaryScreenBounds.getMinX());\n        stage.setY(primaryScreenBounds.getMinY());"
        },
        {
          "sample" : "this",
          "lineNumber" : 1172,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
          "excerpt" : "            popOver = new PopOver();\n        }\n        AllMessagesController popup = new AllMessagesController(lab);\n        popup.loadMessages();\n        \n        popOver.setArrowLocation(PopOver.ArrowLocation.TOP_RIGHT); /* <=== */ \n        popOver.setContentNode(popup);\n        popOver.setAutoFix(true);\n        popOver.setAutoHide(true);\n        popOver.setHideOnEscape(true);\n        popOver.setDetachable(false);"
        },
        {
          "sample" : "this.pharmacistEmail",
          "lineNumber" : 897,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
          "excerpt" : "        pharmacistName.setText(docPersonalInfo.get(\"first_name\") + \" \" + docPersonalInfo.get(\"last_name\"));\n        pharmacistNIC.setText(docPersonalInfo.get(\"nic\"));\n        pharmacistNationality.setText(docPersonalInfo.get(\"nationality\"));\n        pharmacistReligion.setText(docPersonalInfo.get(\"religion\"));\n        pharmacistMobile.setText(docPersonalInfo.get(\"mobile\"));\n        pharmacistEmail.setText(docPersonalInfo.get(\"email\")); /* <=== */ \n        pharmacistAddress.setText(docPersonalInfo.get(\"address\"));\n\n        try{\n                SimpleDateFormat tmpdataformat = new SimpleDateFormat(\"yyyy-MM-dd\");\n                Date birth = tmpdataformat.parse(docPersonalInfo.get(\"date_of_birth\"));"
        },
        {
          "sample" : "user",
          "lineNumber" : 1050,
          "columnNumber" : 37,
          "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
          "excerpt" : "        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid);\n            user.load();\n            Scene scene = new Scene(user); /* <=== */ \n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            //set Stage boundaries to visible bounds of the main screen\n            stage.setX(primaryScreenBounds.getMinX());"
        },
        {
          "sample" : "tmpemail",
          "lineNumber" : 1779,
          "columnNumber" : 44,
          "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
          "excerpt" : "    @FXML\n    private void validateEmail()\n    {        \n        try{\n            String tmpemail = doctorEmail.getText();\n            String result = Validate.email(tmpemail); /* <=== */ \n            if (result.equals(\"1\"))\n            {\n                popOver.hide(Duration.millis(500));\n\n            } else {"
        },
        {
          "sample" : "refundTable",
          "lineNumber" : 216,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
          "excerpt" : "    public void showRefundTable()\n    {\n        Stage stage= new Stage();\n        RefundController refundTable = new RefundController(this);\n  \n        refundTable.fillRefundTable(); /* <=== */ \n        \n        Scene scene = new Scene(refundTable);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
        },
        {
          "sample" : "pharmacistC",
          "lineNumber" : 36,
          "columnNumber" : 28,
          "fileName" : "/app/code/src/main/java/Pharmacist/AddNewDrugController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/AddNewDrug.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.pharmacist = pharmacist;\n        this.pharmacistC = pharmacistC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "this.receptionistEmail",
          "lineNumber" : 1740,
          "columnNumber" : 34,
          "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
          "excerpt" : "            if (result.equals(\"1\"))\n            {\n                popOver.hide(Duration.millis(500));\n\n            } else {\n                showPopup(result,receptionistEmail); /* <=== */ \n            }\n        }catch(Exception e){}    \n    }           \n            \n    "
        },
        {
          "sample" : "lab",
          "lineNumber" : 52,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/LabAssistant/PrescriptionListController.java",
          "excerpt" : "            String prescTests = data.get(i).get(2);\n            \n            data2.add(new Prescription(prescID,prescDate,prescconsultant,prescTests));\n        } \n        prescList.setItems(data2);\n        this.lab = lab; /* <=== */ \n    }        \n\n    @FXML private void LoadPrescriptionInfo()\n    {\n        Prescription prescription = (Prescription)prescList.getSelectionModel().getSelectedItem();"
        },
        {
          "sample" : "popup",
          "lineNumber" : 88,
          "columnNumber" : 32,
          "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
          "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
        },
        {
          "sample" : "refundC",
          "lineNumber" : 43,
          "columnNumber" : 24,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/PopupAskController.java",
          "excerpt" : "        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.label = label;\n        this.cashier = cashier;\n        this.refundC = refundC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "adminC",
          "lineNumber" : 45,
          "columnNumber" : 23,
          "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/Settings.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n        \n        this.admin = admin;\n        this.adminC = adminC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "this.email",
          "lineNumber" : 105,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
          "excerpt" : "        LocalDate birth = LocalDate.parse(date, fomatter1);\n\n        DOB.setValue(birth);\n        \n        mobile.setText(data.get(1).get(6));\n        email.setText(data.get(1).get(9)); /* <=== */ \n        \n        type = data.get(1).get(13);\n        \n        switch(type)\n        {"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalCharacteristics.Nationality",
      "occurrences" : [
        {
          "sample" : "receptionist",
          "lineNumber" : 168,
          "columnNumber" : 34,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
          "excerpt" : "        receptionist.makeSummaryTable();\n        receptionist.fillLineChart();\n        receptionist.fillCurrentDoctors();\n        //receptionist.fillConsultationAreas();\n        receptionist.setPaceholders();\n        stage.setScene(new Scene(receptionist)); /* <=== */ \n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen\n        stage.setX(primaryScreenBounds.getMinX());\n        stage.setY(primaryScreenBounds.getMinY());"
        },
        {
          "sample" : "this",
          "lineNumber" : 1172,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
          "excerpt" : "            popOver = new PopOver();\n        }\n        AllMessagesController popup = new AllMessagesController(lab);\n        popup.loadMessages();\n        \n        popOver.setArrowLocation(PopOver.ArrowLocation.TOP_RIGHT); /* <=== */ \n        popOver.setContentNode(popup);\n        popOver.setAutoFix(true);\n        popOver.setAutoHide(true);\n        popOver.setHideOnEscape(true);\n        popOver.setDetachable(false);"
        },
        {
          "sample" : "this.adminNationality",
          "lineNumber" : 1471,
          "columnNumber" : 13,
          "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
          "excerpt" : "        if ( currentState.equals(\"Edit\"))\n        {\n            adminName.setDisable(false);\n            adminNIC.setDisable(false);\n            adminGender.setDisable(false);\n            adminNationality.setDisable(false); /* <=== */ \n            adminReligion.setDisable(false);\n            adminMobile.setDisable(false);\n            adminEmail.setDisable(false);\n            adminAddress.setDisable(false);\n            "
        },
        {
          "sample" : "\"nationality\"",
          "lineNumber" : 1215,
          "columnNumber" : 55,
          "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
          "excerpt" : "\n        HashMap<String,String> docPersonalInfo =  doc.getProfileInfo();\n\t\t\n        doctorName.setText(docPersonalInfo.get(\"first_name\") + \" \" + docPersonalInfo.get(\"last_name\"));\n        doctorNIC.setText(docPersonalInfo.get(\"nic\"));\n        doctorNationality.setText(docPersonalInfo.get(\"nationality\")); /* <=== */ \n        doctorReligion.setText(docPersonalInfo.get(\"religion\"));\n        doctorMobile.setText(docPersonalInfo.get(\"mobile\"));\n        doctorEmail.setText(docPersonalInfo.get(\"email\"));\n        doctorAddress.setText(docPersonalInfo.get(\"address\"));\n"
        },
        {
          "sample" : "addDrug",
          "lineNumber" : 177,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
          "excerpt" : "    @FXML private void addNewDrug()\n    {\n        \n        Stage stage= new Stage();\n        AddNewDrugController addDrug = new AddNewDrugController(pharmacist,this);\n        addDrug.loadGenericNames(); /* <=== */ \n        Scene scene = new Scene(addDrug);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen"
        },
        {
          "sample" : "refundTable",
          "lineNumber" : 216,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
          "excerpt" : "    public void showRefundTable()\n    {\n        Stage stage= new Stage();\n        RefundController refundTable = new RefundController(this);\n  \n        refundTable.fillRefundTable(); /* <=== */ \n        \n        Scene scene = new Scene(refundTable);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
        },
        {
          "sample" : "pharmacistC",
          "lineNumber" : 36,
          "columnNumber" : 28,
          "fileName" : "/app/code/src/main/java/Pharmacist/AddNewDrugController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/AddNewDrug.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.pharmacist = pharmacist;\n        this.pharmacistC = pharmacistC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "lab",
          "lineNumber" : 52,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/LabAssistant/PrescriptionListController.java",
          "excerpt" : "            String prescTests = data.get(i).get(2);\n            \n            data2.add(new Prescription(prescID,prescDate,prescconsultant,prescTests));\n        } \n        prescList.setItems(data2);\n        this.lab = lab; /* <=== */ \n    }        \n\n    @FXML private void LoadPrescriptionInfo()\n    {\n        Prescription prescription = (Prescription)prescList.getSelectionModel().getSelectedItem();"
        },
        {
          "sample" : "popup",
          "lineNumber" : 88,
          "columnNumber" : 32,
          "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
          "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
        },
        {
          "sample" : "refundC",
          "lineNumber" : 43,
          "columnNumber" : 24,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/PopupAskController.java",
          "excerpt" : "        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.label = label;\n        this.cashier = cashier;\n        this.refundC = refundC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "this.receptionistNationality",
          "lineNumber" : 1232,
          "columnNumber" : 13,
          "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
          "excerpt" : "        else if ( currentState.equals(\"Save\"))\n        {\n            receptionistName.setDisable(true);\n            receptionistNIC.setDisable(true);\n            receptionistGender.setDisable(true);\n            receptionistNationality.setDisable(true); /* <=== */ \n            receptionistReligion.setDisable(true);\n            receptionistMobile.setDisable(true);\n            receptionistEmail.setDisable(true);\n            receptionistAddress.setDisable(true);\n            receptionistDOB.setDisable(true);"
        },
        {
          "sample" : "adminC",
          "lineNumber" : 45,
          "columnNumber" : 23,
          "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/Settings.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n        \n        this.admin = admin;\n        this.adminC = adminC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.OnlineIdentifiers.IPAddress",
      "occurrences" : [
        {
          "sample" : "ip",
          "lineNumber" : 157,
          "columnNumber" : 48,
          "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
          "excerpt" : "                Stage stage = new Stage();\n                chooser.setTitle(\"Select Export Directory\");\n                File selectedDirectory = chooser.showDialog(stage);\n                path = selectedDirectory.getAbsolutePath()+\"/\";\n\n                boolean result = admin.export( ip, databaseSchema, user, pass, path ); /* <=== */ \n                if (result == true) \n                {    \n                    showSuccessIndicator();\n                    dbPasswordlbl.setText(\"\");\n                } else {"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.HealthData.MedicalCertificates",
      "occurrences" : [
        {
          "sample" : "\"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\"",
          "lineNumber" : 470,
          "columnNumber" : 27,
          "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
          "excerpt" : "        String id = \"\";\n        \n        try{\t\t\t\n\t\t\t\n            /////////////////// Generating the Result ID //////////////////////////////////////////////////////////////\n            String sql2 = \"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\"; /* <=== */ \n            String repID = super.dbOperator.customSelection(sql2).get(1).get(0);\n\n            char[] tmpID = repID.toCharArray();\n            int i = 0;\n            for (i = 2; i < repID.length(); i++)"
        },
        {
          "sample" : "\"BloodGroupingRh\"",
          "lineNumber" : 441,
          "columnNumber" : 25,
          "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
          "excerpt" : "            }    \n            \n            \n            HashMap<String,String> tableId = new HashMap<String,String>();\n            tableId.put(\"LiverFunctionTest\",\"tst_liver_id\");\n            tableId.put(\"BloodGroupingRh\",\"tst_bloodG_id\"); /* <=== */ \n            tableId.put(\"LipidTest\",\"tst_li_id\");\n            tableId.put(\"RenalFunctionTest\",\"tst_renal_id\");\n            tableId.put(\"SeriumCreatinePhosphokinase\",\"tst_SCP_id\");\n            tableId.put(\"SeriumCreatinePhosphokinaseTotal\",\"tst_SCPT_id\");\n            tableId.put(\"UrineFullReport\",\"tst_ur_id\");"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.Gender",
      "occurrences" : [
        {
          "sample" : "receptionist",
          "lineNumber" : 168,
          "columnNumber" : 34,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
          "excerpt" : "        receptionist.makeSummaryTable();\n        receptionist.fillLineChart();\n        receptionist.fillCurrentDoctors();\n        //receptionist.fillConsultationAreas();\n        receptionist.setPaceholders();\n        stage.setScene(new Scene(receptionist)); /* <=== */ \n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen\n        stage.setX(primaryScreenBounds.getMinX());\n        stage.setY(primaryScreenBounds.getMinY());"
        },
        {
          "sample" : "this",
          "lineNumber" : 1172,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
          "excerpt" : "            popOver = new PopOver();\n        }\n        AllMessagesController popup = new AllMessagesController(lab);\n        popup.loadMessages();\n        \n        popOver.setArrowLocation(PopOver.ArrowLocation.TOP_RIGHT); /* <=== */ \n        popOver.setContentNode(popup);\n        popOver.setAutoFix(true);\n        popOver.setAutoHide(true);\n        popOver.setHideOnEscape(true);\n        popOver.setDetachable(false);"
        },
        {
          "sample" : "this.receptionistGender",
          "lineNumber" : 1242,
          "columnNumber" : 37,
          "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
          "excerpt" : "            receptionistDOB.setDisable(true);\n            \n            String info = \"\";\n\t\t\t\t\n            String[] name = receptionistName.getText().split(\" \");\n            String gender = (String)receptionistGender.getSelectionModel().getSelectedItem(); /* <=== */ \n            if (gender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}\n            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)receptionistNationality.getText();\n            String religion = (String)receptionistReligion.getText();"
        },
        {
          "sample" : "gender",
          "lineNumber" : 1344,
          "columnNumber" : 23,
          "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
          "excerpt" : "                String info = \"\";\n\n                String[] name = doctorName.getText().split(\" \");\n                String gender = (String)doctorGender.getSelectionModel().getSelectedItem();\n                if (gender.equals(\"Male\")){gender = \"m\";}\n                else {gender = \"f\";} /* <=== */ \n                //String marital = receptionMaritalComboDoc.getText();\n                String nationality = (String)doctorNationality.getText();\n                String religion = (String)doctorReligion.getText();\n                String mobile = doctorMobile.getText();\n                String email = doctorEmail.getText();"
        },
        {
          "sample" : "addDrug",
          "lineNumber" : 177,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
          "excerpt" : "    @FXML private void addNewDrug()\n    {\n        \n        Stage stage= new Stage();\n        AddNewDrugController addDrug = new AddNewDrugController(pharmacist,this);\n        addDrug.loadGenericNames(); /* <=== */ \n        Scene scene = new Scene(addDrug);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen"
        },
        {
          "sample" : "user",
          "lineNumber" : 1050,
          "columnNumber" : 37,
          "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
          "excerpt" : "        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid);\n            user.load();\n            Scene scene = new Scene(user); /* <=== */ \n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            //set Stage boundaries to visible bounds of the main screen\n            stage.setX(primaryScreenBounds.getMinX());"
        },
        {
          "sample" : "refundTable",
          "lineNumber" : 216,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
          "excerpt" : "    public void showRefundTable()\n    {\n        Stage stage= new Stage();\n        RefundController refundTable = new RefundController(this);\n  \n        refundTable.fillRefundTable(); /* <=== */ \n        \n        Scene scene = new Scene(refundTable);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
        },
        {
          "sample" : "pharmacistC",
          "lineNumber" : 36,
          "columnNumber" : 28,
          "fileName" : "/app/code/src/main/java/Pharmacist/AddNewDrugController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/AddNewDrug.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.pharmacist = pharmacist;\n        this.pharmacistC = pharmacistC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "lab",
          "lineNumber" : 52,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/LabAssistant/PrescriptionListController.java",
          "excerpt" : "            String prescTests = data.get(i).get(2);\n            \n            data2.add(new Prescription(prescID,prescDate,prescconsultant,prescTests));\n        } \n        prescList.setItems(data2);\n        this.lab = lab; /* <=== */ \n    }        \n\n    @FXML private void LoadPrescriptionInfo()\n    {\n        Prescription prescription = (Prescription)prescList.getSelectionModel().getSelectedItem();"
        },
        {
          "sample" : "popup",
          "lineNumber" : 88,
          "columnNumber" : 32,
          "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
          "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
        },
        {
          "sample" : "refundC",
          "lineNumber" : 43,
          "columnNumber" : 24,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/PopupAskController.java",
          "excerpt" : "        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.label = label;\n        this.cashier = cashier;\n        this.refundC = refundC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "this.gender",
          "lineNumber" : 119,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
          "excerpt" : "            case \"f\":\n                    type = \"Female\";\n                    break;\n        }\n        \n        gender.getSelectionModel().select(type); /* <=== */ \n\n        username.setText(data.get(1).get(12));\n        userid.setText(userID);\n        \n        String suspend = data.get(1).get(15);"
        },
        {
          "sample" : "adminC",
          "lineNumber" : 45,
          "columnNumber" : 23,
          "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/Settings.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n        \n        this.admin = admin;\n        this.adminC = adminC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "\"Gender\"",
          "lineNumber" : 134,
          "columnNumber" : 33,
          "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
          "excerpt" : "        data2.add(new LabReport(\"Name\", data4.get(1).get(0) + \" \" + data4.get(1).get(1)));\n        \n        String tmpGen = data4.get(1).get(2);\n        if (tmpGen.equals(\"m\")){tmpGen=\"Male\";}\n        else {tmpGen=\"Female\";}\n        data2.add(new LabReport(\"Gender\", tmpGen)); /* <=== */ \n        \n        try{\n                SimpleDateFormat tmpdataformat = new SimpleDateFormat(\"yyyy-MM-dd\");\n                Date birth = tmpdataformat.parse(data4.get(1).get(3));\n                Calendar calendarBirth = Calendar.getInstance();"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.FinancialData.PaymentMode",
      "occurrences" : [
        {
          "sample" : "this",
          "lineNumber" : 438,
          "columnNumber" : 28,
          "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
          "excerpt" : "        String searchID = patientID.getText();\n        String appFee = appointmentTot.getText();\n        String pharFee = pharmacyTot.getText();\n        String labFee = laboratoryTot.getText();\n        \n        String doctorFee = docFee.getText(); /* <=== */ \n        String hosFee = hospitalFee.getText();\n        String tot = patientTotal.getText();\n        String vatVal = vat.getText();\n        String doctorID = docID.getText();\n        "
        },
        {
          "sample" : "cashier",
          "lineNumber" : 186,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
          "excerpt" : "    {\n        Stage stage = new Stage();\n        CashierController cashier = new CashierController(username);\n        \n        cashier.loadProfileData(); \n        cashier.makeHistoryTable(); /* <=== */ \n        cashier.fillLineChart();\n        cashier.setPaceholders();\n        cashier.loadNameList();\n        cashier.addFocusListener();\n        cashier.loadRefunds();"
        },
        {
          "sample" : "popup",
          "lineNumber" : 89,
          "columnNumber" : 13,
          "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
          "excerpt" : "        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this);\n            popup.message(\"  Make the Refund?\");     /* <=== */ \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
        },
        {
          "sample" : "refundC",
          "lineNumber" : 43,
          "columnNumber" : 24,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/PopupAskController.java",
          "excerpt" : "        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.label = label;\n        this.cashier = cashier;\n        this.refundC = refundC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.Photograph",
      "occurrences" : [
        {
          "sample" : "receptionist",
          "lineNumber" : 168,
          "columnNumber" : 34,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
          "excerpt" : "        receptionist.makeSummaryTable();\n        receptionist.fillLineChart();\n        receptionist.fillCurrentDoctors();\n        //receptionist.fillConsultationAreas();\n        receptionist.setPaceholders();\n        stage.setScene(new Scene(receptionist)); /* <=== */ \n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen\n        stage.setX(primaryScreenBounds.getMinX());\n        stage.setY(primaryScreenBounds.getMinY());"
        },
        {
          "sample" : "this",
          "lineNumber" : 1172,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
          "excerpt" : "            popOver = new PopOver();\n        }\n        AllMessagesController popup = new AllMessagesController(lab);\n        popup.loadMessages();\n        \n        popOver.setArrowLocation(PopOver.ArrowLocation.TOP_RIGHT); /* <=== */ \n        popOver.setContentNode(popup);\n        popOver.setAutoFix(true);\n        popOver.setAutoHide(true);\n        popOver.setHideOnEscape(true);\n        popOver.setDetachable(false);"
        },
        {
          "sample" : "addDrug",
          "lineNumber" : 177,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
          "excerpt" : "    @FXML private void addNewDrug()\n    {\n        \n        Stage stage= new Stage();\n        AddNewDrugController addDrug = new AddNewDrugController(pharmacist,this);\n        addDrug.loadGenericNames(); /* <=== */ \n        Scene scene = new Scene(addDrug);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen"
        },
        {
          "sample" : "user",
          "lineNumber" : 1050,
          "columnNumber" : 37,
          "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
          "excerpt" : "        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid);\n            user.load();\n            Scene scene = new Scene(user); /* <=== */ \n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            //set Stage boundaries to visible bounds of the main screen\n            stage.setX(primaryScreenBounds.getMinX());"
        },
        {
          "sample" : "refundTable",
          "lineNumber" : 216,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
          "excerpt" : "    public void showRefundTable()\n    {\n        Stage stage= new Stage();\n        RefundController refundTable = new RefundController(this);\n  \n        refundTable.fillRefundTable(); /* <=== */ \n        \n        Scene scene = new Scene(refundTable);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
        },
        {
          "sample" : "addslot",
          "lineNumber" : 1397,
          "columnNumber" : 37,
          "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
          "excerpt" : "    }        \n    \n    @FXML private void addTimeSlot()\n    {\n        Stage stage= new Stage();\n        NewDoctorTimeSlotController addslot = new NewDoctorTimeSlotController(doc,this); /* <=== */ \n        Scene scene = new Scene(addslot);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen"
        },
        {
          "sample" : "pharmacistC",
          "lineNumber" : 36,
          "columnNumber" : 28,
          "fileName" : "/app/code/src/main/java/Pharmacist/AddNewDrugController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/AddNewDrug.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.pharmacist = pharmacist;\n        this.pharmacistC = pharmacistC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "lab",
          "lineNumber" : 52,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/LabAssistant/PrescriptionListController.java",
          "excerpt" : "            String prescTests = data.get(i).get(2);\n            \n            data2.add(new Prescription(prescID,prescDate,prescconsultant,prescTests));\n        } \n        prescList.setItems(data2);\n        this.lab = lab; /* <=== */ \n    }        \n\n    @FXML private void LoadPrescriptionInfo()\n    {\n        Prescription prescription = (Prescription)prescList.getSelectionModel().getSelectedItem();"
        },
        {
          "sample" : "popup",
          "lineNumber" : 88,
          "columnNumber" : 32,
          "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
          "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
        },
        {
          "sample" : "refundC",
          "lineNumber" : 43,
          "columnNumber" : 24,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/PopupAskController.java",
          "excerpt" : "        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.label = label;\n        this.cashier = cashier;\n        this.refundC = refundC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "adminC",
          "lineNumber" : 45,
          "columnNumber" : 23,
          "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/Settings.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n        \n        this.admin = admin;\n        this.adminC = adminC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
      "occurrences" : [
        {
          "sample" : "receptionist",
          "lineNumber" : 168,
          "columnNumber" : 34,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
          "excerpt" : "        receptionist.makeSummaryTable();\n        receptionist.fillLineChart();\n        receptionist.fillCurrentDoctors();\n        //receptionist.fillConsultationAreas();\n        receptionist.setPaceholders();\n        stage.setScene(new Scene(receptionist)); /* <=== */ \n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen\n        stage.setX(primaryScreenBounds.getMinX());\n        stage.setY(primaryScreenBounds.getMinY());"
        },
        {
          "sample" : "this",
          "lineNumber" : 1172,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
          "excerpt" : "            popOver = new PopOver();\n        }\n        AllMessagesController popup = new AllMessagesController(lab);\n        popup.loadMessages();\n        \n        popOver.setArrowLocation(PopOver.ArrowLocation.TOP_RIGHT); /* <=== */ \n        popOver.setContentNode(popup);\n        popOver.setAutoFix(true);\n        popOver.setAutoHide(true);\n        popOver.setHideOnEscape(true);\n        popOver.setDetachable(false);"
        },
        {
          "sample" : "userAccounts",
          "lineNumber" : 877,
          "columnNumber" : 37,
          "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
          "excerpt" : "                        \n            Stage stage = new Stage();\n            NewUserController userAccounts = new NewUserController();\n            userAccounts.loadData(result.get(0),result.get(1),result.get(2));\n\n            Scene scene = new Scene(userAccounts); /* <=== */ \n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            //set Stage boundaries to visible bounds of the main screen\n            stage.setX(primaryScreenBounds.getMinX());"
        },
        {
          "sample" : "login",
          "lineNumber" : 271,
          "columnNumber" : 29,
          "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
          "excerpt" : "            Stage stage3; \n            stage3 = (Stage) closeAccounts.getScene().getWindow();\n            stage3.close();\n\n            Stage stage = new Stage();\n            LoginController login = new LoginController(); /* <=== */ \n            stage.setScene(new Scene(login));\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            //set Stage boundaries to visible bounds of the main screen\n            stage.setX(primaryScreenBounds.getMinX());\n            stage.setY(primaryScreenBounds.getMinY());"
        },
        {
          "sample" : "addDrug",
          "lineNumber" : 177,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
          "excerpt" : "    @FXML private void addNewDrug()\n    {\n        \n        Stage stage= new Stage();\n        AddNewDrugController addDrug = new AddNewDrugController(pharmacist,this);\n        addDrug.loadGenericNames(); /* <=== */ \n        Scene scene = new Scene(addDrug);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen"
        },
        {
          "sample" : "refundTable",
          "lineNumber" : 216,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
          "excerpt" : "    public void showRefundTable()\n    {\n        Stage stage= new Stage();\n        RefundController refundTable = new RefundController(this);\n  \n        refundTable.fillRefundTable(); /* <=== */ \n        \n        Scene scene = new Scene(refundTable);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
        },
        {
          "sample" : "this.receptionistNewPassword",
          "lineNumber" : 1324,
          "columnNumber" : 22,
          "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
          "excerpt" : "            boolean result = false;\n            //result = checkCurrentPassword(String userId, String password)\n            \n            if (result == true)\n            {\n                if ( receptionistNewPassword.getText().equals( receptionistConfirmPassword.getText() ) ) /* <=== */ \n                {\n                    String info = \"password \" + receptionistConfirmPassword.getText();\n                    boolean success =  receptionist.updateAccountInfo(info);\n                    \n                    receptionistPassword.setDisable(true);"
        },
        {
          "sample" : "addslot",
          "lineNumber" : 1397,
          "columnNumber" : 37,
          "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
          "excerpt" : "    }        \n    \n    @FXML private void addTimeSlot()\n    {\n        Stage stage= new Stage();\n        NewDoctorTimeSlotController addslot = new NewDoctorTimeSlotController(doc,this); /* <=== */ \n        Scene scene = new Scene(addslot);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen"
        },
        {
          "sample" : "pharmacistC",
          "lineNumber" : 36,
          "columnNumber" : 28,
          "fileName" : "/app/code/src/main/java/Pharmacist/AddNewDrugController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/AddNewDrug.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.pharmacist = pharmacist;\n        this.pharmacistC = pharmacistC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "password",
          "lineNumber" : 119,
          "columnNumber" : 27,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
          "excerpt" : "\t{\n\t\tClass.forName(dbClassName);\n\t\t\n        Properties p = new Properties();\n        p.put(\"user\", userName);\n        p.put(\"password\", password); /* <=== */ \n        // Try to connect\n        this.c = DriverManager.getConnection(CONNECTION,p);\n\t}\n\t\n\tpublic void close() throws ClassNotFoundException,SQLException"
        },
        {
          "sample" : "lab",
          "lineNumber" : 52,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/LabAssistant/PrescriptionListController.java",
          "excerpt" : "            String prescTests = data.get(i).get(2);\n            \n            data2.add(new Prescription(prescID,prescDate,prescconsultant,prescTests));\n        } \n        prescList.setItems(data2);\n        this.lab = lab; /* <=== */ \n    }        \n\n    @FXML private void LoadPrescriptionInfo()\n    {\n        Prescription prescription = (Prescription)prescList.getSelectionModel().getSelectedItem();"
        },
        {
          "sample" : "popup",
          "lineNumber" : 88,
          "columnNumber" : 32,
          "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
          "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
        },
        {
          "sample" : "refundC",
          "lineNumber" : 43,
          "columnNumber" : 24,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/PopupAskController.java",
          "excerpt" : "        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.label = label;\n        this.cashier = cashier;\n        this.refundC = refundC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "userPassword",
          "lineNumber" : 137,
          "columnNumber" : 26,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
          "excerpt" : "                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\"));\n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1);\n\n                    if ( userPassword.equals(password) ) access = userType; /* <=== */ \n\n            }catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n            return access;        \n        }\n"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.AccountData.AccountName",
      "occurrences" : [
        {
          "sample" : "receptionist",
          "lineNumber" : 168,
          "columnNumber" : 34,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
          "excerpt" : "        receptionist.makeSummaryTable();\n        receptionist.fillLineChart();\n        receptionist.fillCurrentDoctors();\n        //receptionist.fillConsultationAreas();\n        receptionist.setPaceholders();\n        stage.setScene(new Scene(receptionist)); /* <=== */ \n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen\n        stage.setX(primaryScreenBounds.getMinX());\n        stage.setY(primaryScreenBounds.getMinY());"
        },
        {
          "sample" : "this",
          "lineNumber" : 1585,
          "columnNumber" : 42,
          "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
          "excerpt" : "                    adminPassword.setDisable(true);\n                    adminNewPassword.setDisable(true);\n                    adminConfirmPassword.setDisable(true);\n                    \n                    \n                    if (success == true) showSuccessIndicator(); /* <=== */ \n                    editPasswordInfoButton.setText(\"Edit\");\n                }    \n            }\n            \n        }"
        },
        {
          "sample" : "login",
          "lineNumber" : 271,
          "columnNumber" : 29,
          "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
          "excerpt" : "            Stage stage3; \n            stage3 = (Stage) closeAccounts.getScene().getWindow();\n            stage3.close();\n\n            Stage stage = new Stage();\n            LoginController login = new LoginController(); /* <=== */ \n            stage.setScene(new Scene(login));\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            //set Stage boundaries to visible bounds of the main screen\n            stage.setX(primaryScreenBounds.getMinX());\n            stage.setY(primaryScreenBounds.getMinY());"
        },
        {
          "sample" : "this",
          "lineNumber" : 319,
          "columnNumber" : 11,
          "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
          "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
        },
        {
          "sample" : "this.labUserName",
          "lineNumber" : 1275,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
          "excerpt" : "            labTraining.setText(docPersonalInfo.get(\"training\"));\n            labAchivements.setText(docPersonalInfo.get(\"achievements\"));\n            labOther.setText(docPersonalInfo.get(\"experienced_areas\"));\n        }catch(Exception e){}\n            \n        labUserName.setText(docPersonalInfo.get(\"user_name\")); /* <=== */ \n        labUserType.setText(docPersonalInfo.get(\"user_type\"));\n        labUserID.setText(docPersonalInfo.get(\"user_id\"));\n        \n    }  \n    "
        },
        {
          "sample" : "doctorName",
          "lineNumber" : 25,
          "columnNumber" : 23,
          "fileName" : "/app/code/src/main/java/Receptionist/DoctorDetail.java",
          "excerpt" : "    }\n \n    public DoctorDetail(String doctorID, String doctorName, String area, String availability, String days) \n    {\n        setDoctorID(doctorID);\n        setDoctorName(doctorName); /* <=== */ \n        setArea(area);\n        setAvailability(availability);\n        setDays(days);\n    }\n"
        },
        {
          "sample" : "newMessage",
          "lineNumber" : 157,
          "columnNumber" : 31,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessagesController.java",
          "excerpt" : "    {\n        AllMessages message = (AllMessages)messagesTable.getSelectionModel().getSelectedItem();\n        //System.out.println(message.getMessage());\n        \n        Stage stage= new Stage();\n        ReadMessageController newMessage = new ReadMessageController(message,newSysUser); /* <=== */ \n        newMessage.fillMessage();\n        Scene scene = new Scene(newMessage);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
        },
        {
          "sample" : "refundTable",
          "lineNumber" : 216,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
          "excerpt" : "    public void showRefundTable()\n    {\n        Stage stage= new Stage();\n        RefundController refundTable = new RefundController(this);\n  \n        refundTable.fillRefundTable(); /* <=== */ \n        \n        Scene scene = new Scene(refundTable);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
        },
        {
          "sample" : "this.pharmacistUserName",
          "lineNumber" : 1072,
          "columnNumber" : 42,
          "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
          "excerpt" : "        } \n        else if ( currentState.equals(\"Save\"))\n        {\n            pharmacistUserName.setDisable(true);\n            \n            String info = \"user_name \" + pharmacistUserName.getText(); /* <=== */ \n            boolean success = pharmacist.updateAccountInfo(info);\n            if (success == true) showSuccessIndicator();\n            editUserInfoButton.setText(\"Edit\");\n        }\n    }    "
        },
        {
          "sample" : "addslot",
          "lineNumber" : 1397,
          "columnNumber" : 37,
          "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
          "excerpt" : "    }        \n    \n    @FXML private void addTimeSlot()\n    {\n        Stage stage= new Stage();\n        NewDoctorTimeSlotController addslot = new NewDoctorTimeSlotController(doc,this); /* <=== */ \n        Scene scene = new Scene(addslot);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen"
        },
        {
          "sample" : "this.patientName",
          "lineNumber" : 978,
          "columnNumber" : 25,
          "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
          "excerpt" : "                if ( appID.substring(0,3).equals(\"app\") )\n                {\n                    try{\n                        ArrayList<ArrayList<String>> data = receptionist.getAppointmentDetails(appID);\n\n                        patientName.setText(data.get(1).get(2)+\" \"+data.get(1).get(3)); /* <=== */ \n                        appDate.setText(data.get(1).get(1));\n                        docName.setText(data.get(1).get(0) + \"  \" + data.get(2).get(0) + \" \" + data.get(2).get(1));        \n                    } catch (Exception e) {}   \n\n                } else {"
        },
        {
          "sample" : "sysUser",
          "lineNumber" : 34,
          "columnNumber" : 24,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
          "excerpt" : "    public CurrentUserSummaryController(User sysUser) {\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/CurrentUserSummary.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.sysUser = sysUser; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "userName",
          "lineNumber" : 247,
          "columnNumber" : 57,
          "fileName" : "/app/code/src/main/java/Admin/Admin.java",
          "excerpt" : "\t\t\n\t\tString sql1 = \t\"INSERT INTO person(person_id,first_name,last_name,nic,mobile) \" +\n\t\t\t\t\t\t\"VALUES ('\" + personId + \"','\" + firstName + \"','\" + lastName + \"','\" + nic + \"','\" + mobile +\"');\";\n\t\t\t\t\t\t\n\t\tString sql2 = \t\"INSERT INTO sys_user(person_id,user_id,user_name,user_type,password) \" +\n\t\t\t\t\t\t\"VALUES ('\" + personId + \"','\" + userId + \"','\" + userName + \"','\" + userType + \"', '1234' );\"; /* <=== */ \n\t\t\t\t\t\t\n\t\tString sql3 = \t\"UPDATE person SET user_id = '\" +userId+ \"' WHERE person_id = '\" + personId + \"';\";\t\t\n\t\t\n\t\t\n\t\tString sql4=\"\";"
        },
        {
          "sample" : "super.username",
          "lineNumber" : 46,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
          "excerpt" : "\t\n\tpublic String slmcRegNo;\n        \n        public String getUsername()\n        {\n            return super.username; /* <=== */ \n        }\n\t\n\tpublic Doctor(String username)\n\t{\n\t\tsuper(username);"
        },
        {
          "sample" : "refundC",
          "lineNumber" : 43,
          "columnNumber" : 24,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/PopupAskController.java",
          "excerpt" : "        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.label = label;\n        this.cashier = cashier;\n        this.refundC = refundC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "this.userName",
          "lineNumber" : 42,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Admin/NewUserController.java",
          "excerpt" : "    @FXML private TextField userid;     \n    @FXML private TextField password;\n    \n    public void loadData(String username, String id, String pass)\n    {\n        userName.setText(username); /* <=== */ \n        userid.setText(id);\n        password.setText(pass);\n    }        \n    \n    @FXML"
        },
        {
          "sample" : "doc",
          "lineNumber" : 35,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/Doctor/NewDoctorTimeSlotController.java",
          "excerpt" : "    public NewDoctorTimeSlotController(Doctor doc,DoctorController docC) {\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/NewDoctorTimeSlot.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.doc = doc; /* <=== */ \n        this.docC = docC;\n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {"
        },
        {
          "sample" : "user.username",
          "lineNumber" : 56,
          "columnNumber" : 25,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LogoutController.java",
          "excerpt" : "    \n    @FXML\n    private void logout()\n    {\n        \n        user.saveLogout(user.username); /* <=== */ \n        \n        Stage stage = (Stage) mainLogoutButton.getScene().getWindow();\n        stage.close();\n        \n        stage = (Stage) cancelButton.getScene().getWindow();"
        },
        {
          "sample" : "patientName",
          "lineNumber" : 51,
          "columnNumber" : 26,
          "fileName" : "/app/code/src/main/java/Cashier/BillPreviewController.java",
          "excerpt" : "    @FXML private Label billID;\n    \n    \n    public void fillBillPreview(String patientName,String serviceFee, String VAT ,String billVal, String currDate, String billId)\n    {\n        name.setText(\" \"+patientName); /* <=== */ \n        service.setText(\" \" +serviceFee);\n        vat.setText(\" \" +VAT);\n        bill.setText(\" \" +billVal);\n        date.setText(\" \" +currDate);\n        billID.setText(\" \" +billId);"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
      "occurrences" : [
        {
          "sample" : "receptionist",
          "lineNumber" : 168,
          "columnNumber" : 34,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
          "excerpt" : "        receptionist.makeSummaryTable();\n        receptionist.fillLineChart();\n        receptionist.fillCurrentDoctors();\n        //receptionist.fillConsultationAreas();\n        receptionist.setPaceholders();\n        stage.setScene(new Scene(receptionist)); /* <=== */ \n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen\n        stage.setX(primaryScreenBounds.getMinX());\n        stage.setY(primaryScreenBounds.getMinY());"
        },
        {
          "sample" : "this",
          "lineNumber" : 716,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
          "excerpt" : "            \n        }\n        WarningController popup = new WarningController();\n        popup.addMessage(message);\n\n        popOver.setContentNode(popup); /* <=== */ \n        popOver.setAutoFix(true);\n        popOver.setAutoHide(true);\n        popOver.setHideOnEscape(true);\n        popOver.setDetachable(false);\n        popOver.show(text);"
        },
        {
          "sample" : "firstName",
          "lineNumber" : 371,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
          "excerpt" : "        ArrayList<ArrayList<String>> data = pharmacist.getAllNames();\n        System.out.println(data);\n        int size = data.size();\n        for(int i = 1; i < size; i++)\n        {\n            String firstName = data.get(i).get(1); /* <=== */ \n            String lastName = data.get(i).get(2);\n            String age = \"\";\n            String id = data.get(i).get(0);\n\n            try{"
        },
        {
          "sample" : "this.patientFirstName",
          "lineNumber" : 662,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
          "excerpt" : "        TextFields.bindAutoCompletion(patientSearchBox,possibleSuggestions);\n    }        \n    \n    @FXML private void patientClear()\n    {\n        patientFirstName.setText(\"\"); /* <=== */ \n        patientLastName.setText(\"\");\n        patientGender.setValue(\"\");\n        patientNIC.setText(\"\");\n        patientDOB.setValue(null);\n        patientMobile.setText(\"\");"
        },
        {
          "sample" : "fullName",
          "lineNumber" : 528,
          "columnNumber" : 16,
          "fileName" : "/app/code/src/main/java/Admin/Admin.java",
          "excerpt" : "        \n        String date_to_string = dateformatyyyyMMdd.format(dateNow);\n        System.out.println(\"date into yyyyMMdd format: \" + date_to_string);\n        \n        String ss=\"backup.sql\";\n        String fullName  = path + \" \" + date_to_string + \" \" + ss; /* <=== */ \n        \n        String dumpCommand = \"mysqldump \" + databaseSchema + \" -h \" + ip + \" -u \" + user +\" -p\" + pass;\n        \n        Runtime rt = Runtime.getRuntime();\n        "
        },
        {
          "sample" : "addslot",
          "lineNumber" : 1397,
          "columnNumber" : 37,
          "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
          "excerpt" : "    }        \n    \n    @FXML private void addTimeSlot()\n    {\n        Stage stage= new Stage();\n        NewDoctorTimeSlotController addslot = new NewDoctorTimeSlotController(doc,this); /* <=== */ \n        Scene scene = new Scene(addslot);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen"
        },
        {
          "sample" : "adminC",
          "lineNumber" : 45,
          "columnNumber" : 23,
          "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/Settings.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n        \n        this.admin = admin;\n        this.adminC = adminC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "this.firstName",
          "lineNumber" : 93,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
          "excerpt" : "        }    \n        \n                \n        userType.setText(type);\n        \n        firstName.setText(data.get(1).get(7)); /* <=== */ \n        lastName.setText(data.get(1).get(8));\n        address.setText(data.get(1).get(5));\n        NIC.setText(data.get(1).get(2));\n        \n        String date = data.get(1).get(4);"
        },
        {
          "sample" : "docC",
          "lineNumber" : 36,
          "columnNumber" : 21,
          "fileName" : "/app/code/src/main/java/Doctor/NewDoctorTimeSlotController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/NewDoctorTimeSlot.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.doc = doc;\n        this.docC = docC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
      "occurrences" : [
        {
          "sample" : "receptionist",
          "lineNumber" : 168,
          "columnNumber" : 34,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
          "excerpt" : "        receptionist.makeSummaryTable();\n        receptionist.fillLineChart();\n        receptionist.fillCurrentDoctors();\n        //receptionist.fillConsultationAreas();\n        receptionist.setPaceholders();\n        stage.setScene(new Scene(receptionist)); /* <=== */ \n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen\n        stage.setX(primaryScreenBounds.getMinX());\n        stage.setY(primaryScreenBounds.getMinY());"
        },
        {
          "sample" : "this",
          "lineNumber" : 716,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
          "excerpt" : "            \n        }\n        WarningController popup = new WarningController();\n        popup.addMessage(message);\n\n        popOver.setContentNode(popup); /* <=== */ \n        popOver.setAutoFix(true);\n        popOver.setAutoHide(true);\n        popOver.setHideOnEscape(true);\n        popOver.setDetachable(false);\n        popOver.show(text);"
        },
        {
          "sample" : "lastName",
          "lineNumber" : 638,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
          "excerpt" : "        //System.out.println(data);\n        int size = data.size();\n        for(int i = 1; i < size; i++)\n        {\n            String firstName = data.get(i).get(1);\n            String lastName = data.get(i).get(2); /* <=== */ \n            String age = \"\";\n            String id = data.get(i).get(0);\n\n            try{\n                SimpleDateFormat tmpdataformat = new SimpleDateFormat(\"yyyy-MM-dd\");"
        },
        {
          "sample" : "this.patientLastName",
          "lineNumber" : 998,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
          "excerpt" : "    \n    @FXML private void clearPatient()\n    {\n        patientSearchValue.setText(\"\");\n        patientFirstName.setText(\"\");\n        patientLastName.setText(\"\"); /* <=== */ \n        patientAge.setText(\"\");\n        patientGender.setText(\"\");\n        patientEmail.setText(\"\");\n        \n        diagnosisText.setText(\"\");"
        },
        {
          "sample" : "adminC",
          "lineNumber" : 45,
          "columnNumber" : 23,
          "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/Settings.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n        \n        this.admin = admin;\n        this.adminC = adminC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "this.lastName",
          "lineNumber" : 94,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
          "excerpt" : "        \n                \n        userType.setText(type);\n        \n        firstName.setText(data.get(1).get(7));\n        lastName.setText(data.get(1).get(8)); /* <=== */ \n        address.setText(data.get(1).get(5));\n        NIC.setText(data.get(1).get(2));\n        \n        String date = data.get(1).get(4);\n        DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
        },
        {
          "sample" : "docC",
          "lineNumber" : 36,
          "columnNumber" : 21,
          "fileName" : "/app/code/src/main/java/Doctor/NewDoctorTimeSlotController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/NewDoctorTimeSlot.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.doc = doc;\n        this.docC = docC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
      "occurrences" : [
        {
          "sample" : "this",
          "lineNumber" : 135,
          "columnNumber" : 29,
          "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
          "excerpt" : "    @FXML private void suspend()\n    {\n        String suspend = suspendButton.getText();\n        \n        if (suspend.equals(\"suspend\"))  {\n            String userId = userid.getText(); /* <=== */ \n            admin.admin.suspendUser(userId);\n        \n        } else {\n            String userId = userid.getText();\n            admin.admin.unsuspendUser(userId);"
        },
        {
          "sample" : "mobile",
          "lineNumber" : 1248,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
          "excerpt" : "            if (gender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}\n            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)receptionistNationality.getText();\n            String religion = (String)receptionistReligion.getText();\n            String mobile = receptionistMobile.getText(); /* <=== */ \n            String email = receptionistEmail.getText();\n            String address = receptionistAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;"
        },
        {
          "sample" : "user",
          "lineNumber" : 1048,
          "columnNumber" : 31,
          "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
          "excerpt" : "        String userid = userIDlbl.getText();\n        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid); /* <=== */ \n            user.load();\n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
        },
        {
          "sample" : "\"mobile\"",
          "lineNumber" : 1242,
          "columnNumber" : 47,
          "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
          "excerpt" : "\t\t\n        labName.setText(docPersonalInfo.get(\"first_name\") + \" \" + docPersonalInfo.get(\"last_name\"));\n        labNIC.setText(docPersonalInfo.get(\"nic\"));\n        labNationality.setText(docPersonalInfo.get(\"nationality\"));\n        labReligion.setText(docPersonalInfo.get(\"religion\"));\n        labMobile.setText(docPersonalInfo.get(\"mobile\")); /* <=== */ \n        labEmail.setText(docPersonalInfo.get(\"email\"));\n        labAddress.setText(docPersonalInfo.get(\"address\"));\n\n        try{\n                SimpleDateFormat tmpdataformat = new SimpleDateFormat(\"yyyy-MM-dd\");"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
      "occurrences" : [
        {
          "sample" : "this",
          "lineNumber" : 135,
          "columnNumber" : 29,
          "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
          "excerpt" : "    @FXML private void suspend()\n    {\n        String suspend = suspendButton.getText();\n        \n        if (suspend.equals(\"suspend\"))  {\n            String userId = userid.getText(); /* <=== */ \n            admin.admin.suspendUser(userId);\n        \n        } else {\n            String userId = userid.getText();\n            admin.admin.unsuspendUser(userId);"
        },
        {
          "sample" : "\"date_of_birth\"",
          "lineNumber" : 908,
          "columnNumber" : 53,
          "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
          "excerpt" : "                Calendar calendarBirth = Calendar.getInstance();\n                calendarBirth.setTime(birth);\n                Calendar calendarToday = Calendar.getInstance();\n                String tmpage = Integer.toString(calendarToday.get(Calendar.YEAR) - calendarBirth.get(Calendar.YEAR));\n                \n                String tmpDOB = docPersonalInfo.get(\"date_of_birth\"); /* <=== */ \n                \n                int year = Integer.parseInt(tmpDOB.substring(0,4));\n                int month = Integer.parseInt(tmpDOB.substring(5,7));        \n                int date = Integer.parseInt(tmpDOB.substring(8,10));        \n                pharmacistDOB.setValue(LocalDate.of(year, month, date));"
        },
        {
          "sample" : "birthYear",
          "lineNumber" : 32,
          "columnNumber" : 28,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/Validate.java",
          "excerpt" : "\n                    int yearPart = Integer.parseInt( nic.substring(0,2) );\n                    int dayPart = Integer.parseInt( nic.substring(2,5) );\n                    int lastPart = Integer.parseInt( nic.substring(5,9) );\n\n                    String birthYear = \"19\" + yearPart; /* <=== */ \n                    String gender = \"m\";\n                    if ( dayPart > 500 )\n                    {\n                            gender = \"f\";\n                            dayPart -= 500;\t"
        },
        {
          "sample" : "user",
          "lineNumber" : 1048,
          "columnNumber" : 31,
          "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
          "excerpt" : "        String userid = userIDlbl.getText();\n        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid); /* <=== */ \n            user.load();\n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
        },
        {
          "sample" : "dob",
          "lineNumber" : 543,
          "columnNumber" : 23,
          "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
          "excerpt" : "            if (tmpGender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}\n\n            String nic = patientNIC.getText().replaceAll(\"\\\\s+$\", \"\");\n\n            LocalDate dob = patientDOB.getValue(); /* <=== */ \n\n            String day = Integer.toString(dob.getDayOfMonth());\n            if ( day.length() < 2 ) day = \"0\"+day; \n\n            String month = Integer.toString(dob.getMonthValue());"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.PersonalCharacteristics.Religion/ReligiousBeliefs",
      "occurrences" : [
        {
          "sample" : "receptionist",
          "lineNumber" : 168,
          "columnNumber" : 34,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
          "excerpt" : "        receptionist.makeSummaryTable();\n        receptionist.fillLineChart();\n        receptionist.fillCurrentDoctors();\n        //receptionist.fillConsultationAreas();\n        receptionist.setPaceholders();\n        stage.setScene(new Scene(receptionist)); /* <=== */ \n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen\n        stage.setX(primaryScreenBounds.getMinX());\n        stage.setY(primaryScreenBounds.getMinY());"
        },
        {
          "sample" : "this",
          "lineNumber" : 1172,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
          "excerpt" : "            popOver = new PopOver();\n        }\n        AllMessagesController popup = new AllMessagesController(lab);\n        popup.loadMessages();\n        \n        popOver.setArrowLocation(PopOver.ArrowLocation.TOP_RIGHT); /* <=== */ \n        popOver.setContentNode(popup);\n        popOver.setAutoFix(true);\n        popOver.setAutoHide(true);\n        popOver.setHideOnEscape(true);\n        popOver.setDetachable(false);"
        },
        {
          "sample" : "addDrug",
          "lineNumber" : 177,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
          "excerpt" : "    @FXML private void addNewDrug()\n    {\n        \n        Stage stage= new Stage();\n        AddNewDrugController addDrug = new AddNewDrugController(pharmacist,this);\n        addDrug.loadGenericNames(); /* <=== */ \n        Scene scene = new Scene(addDrug);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen"
        },
        {
          "sample" : "user",
          "lineNumber" : 1050,
          "columnNumber" : 37,
          "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
          "excerpt" : "        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid);\n            user.load();\n            Scene scene = new Scene(user); /* <=== */ \n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            //set Stage boundaries to visible bounds of the main screen\n            stage.setX(primaryScreenBounds.getMinX());"
        },
        {
          "sample" : "religion",
          "lineNumber" : 1355,
          "columnNumber" : 40,
          "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
          "excerpt" : "                String address = doctorAddress.getText();\n\n                info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n                info += \"#gender \" + gender;\n                info += \"#nationality \" + nationality;\n                info += \"#religion \" + religion; /* <=== */ \n                info += \"#mobile \" + mobile;\n                info += \"#email \" + email;\n                info += \"#address \" + address;\n\n                //System.out.println(info);"
        },
        {
          "sample" : "\"religion\"",
          "lineNumber" : 1171,
          "columnNumber" : 67,
          "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
          "excerpt" : "        HashMap<String,String> receptionistPersonalInfo =  receptionist.getProfileInfo();\n\t\t\n        receptionistName.setText(receptionistPersonalInfo.get(\"first_name\") + \" \" + receptionistPersonalInfo.get(\"last_name\"));\n        receptionistNIC.setText(receptionistPersonalInfo.get(\"nic\"));\n        receptionistNationality.setText(receptionistPersonalInfo.get(\"nationality\"));\n        receptionistReligion.setText(receptionistPersonalInfo.get(\"religion\")); /* <=== */ \n        receptionistMobile.setText(receptionistPersonalInfo.get(\"mobile\"));\n        receptionistEmail.setText(receptionistPersonalInfo.get(\"email\"));\n        receptionistAddress.setText(receptionistPersonalInfo.get(\"address\"));\n\n        try{"
        },
        {
          "sample" : "refundTable",
          "lineNumber" : 216,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
          "excerpt" : "    public void showRefundTable()\n    {\n        Stage stage= new Stage();\n        RefundController refundTable = new RefundController(this);\n  \n        refundTable.fillRefundTable(); /* <=== */ \n        \n        Scene scene = new Scene(refundTable);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
        },
        {
          "sample" : "pharmacistC",
          "lineNumber" : 36,
          "columnNumber" : 28,
          "fileName" : "/app/code/src/main/java/Pharmacist/AddNewDrugController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/AddNewDrug.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.pharmacist = pharmacist;\n        this.pharmacistC = pharmacistC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "lab",
          "lineNumber" : 52,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/LabAssistant/PrescriptionListController.java",
          "excerpt" : "            String prescTests = data.get(i).get(2);\n            \n            data2.add(new Prescription(prescID,prescDate,prescconsultant,prescTests));\n        } \n        prescList.setItems(data2);\n        this.lab = lab; /* <=== */ \n    }        \n\n    @FXML private void LoadPrescriptionInfo()\n    {\n        Prescription prescription = (Prescription)prescList.getSelectionModel().getSelectedItem();"
        },
        {
          "sample" : "popup",
          "lineNumber" : 88,
          "columnNumber" : 32,
          "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
          "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
        },
        {
          "sample" : "refundC",
          "lineNumber" : 43,
          "columnNumber" : 24,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/PopupAskController.java",
          "excerpt" : "        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.label = label;\n        this.cashier = cashier;\n        this.refundC = refundC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "adminC",
          "lineNumber" : 45,
          "columnNumber" : 23,
          "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
          "excerpt" : "        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/Settings.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n        \n        this.admin = admin;\n        this.adminC = adminC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        }
      ]
    },
    {
      "sourceId" : "Data.Sensitive.AccountData.AccountID",
      "occurrences" : [
        {
          "sample" : "receptionist",
          "lineNumber" : 168,
          "columnNumber" : 34,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
          "excerpt" : "        receptionist.makeSummaryTable();\n        receptionist.fillLineChart();\n        receptionist.fillCurrentDoctors();\n        //receptionist.fillConsultationAreas();\n        receptionist.setPaceholders();\n        stage.setScene(new Scene(receptionist)); /* <=== */ \n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen\n        stage.setX(primaryScreenBounds.getMinX());\n        stage.setY(primaryScreenBounds.getMinY());"
        },
        {
          "sample" : "this",
          "lineNumber" : 1585,
          "columnNumber" : 42,
          "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
          "excerpt" : "                    adminPassword.setDisable(true);\n                    adminNewPassword.setDisable(true);\n                    adminConfirmPassword.setDisable(true);\n                    \n                    \n                    if (success == true) showSuccessIndicator(); /* <=== */ \n                    editPasswordInfoButton.setText(\"Edit\");\n                }    \n            }\n            \n        }"
        },
        {
          "sample" : "$obj4",
          "lineNumber" : -1,
          "columnNumber" : -1,
          "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
          "excerpt" : ""
        },
        {
          "sample" : "patientid",
          "lineNumber" : 328,
          "columnNumber" : 32,
          "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
          "excerpt" : "                {\n                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID);\n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID); /* <=== */ \n                        data = cashier.getPatientDetails(patientid);\n                        patientSearchType.setValue(\"Patient ID\");\n                        patientID.setText(patientid);\n                        break;\n                    case \"NIC\":"
        },
        {
          "sample" : "this.userID",
          "lineNumber" : 73,
          "columnNumber" : 127,
          "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
          "excerpt" : "\t\tHashMap<String,String> infoHash = new HashMap<String,String>();\t\n\t\t\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\tString sql = \"SELECT person.*,sys_user.*,doctor.* \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id INNER JOIN doctor ON person.user_id = doctor.user_id  \"+\n                            \"WHERE (sys_user.user_id = '\"+userID+\"' AND person.user_id = '\"+userID+\"' AND doctor.user_id = '\"+userID+\"');\"; /* <=== */ \n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.customSelection(sql);\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}"
        },
        {
          "sample" : "this",
          "lineNumber" : 319,
          "columnNumber" : 11,
          "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
          "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
        },
        {
          "sample" : "patientId",
          "lineNumber" : 34,
          "columnNumber" : 31,
          "fileName" : "/app/code/src/main/java/Receptionist/PatientAccountSuccessController.java",
          "excerpt" : "    @FXML private Label mobile;\n    @FXML private Label gender;\n    \n    public void fillPatientData(String patientId, String pName, String pAge, String pGender)\n    {\n        patientID.setText(\" \"+patientId); /* <=== */ \n        name.setText(\" \"+pName);\n        mobile.setText(\" \"+pAge);\n        gender.setText(\" \"+pGender);\n    \n    }"
        },
        {
          "sample" : "userId",
          "lineNumber" : 139,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
          "excerpt" : "        if (suspend.equals(\"suspend\"))  {\n            String userId = userid.getText();\n            admin.admin.suspendUser(userId);\n        \n        } else {\n            String userId = userid.getText(); /* <=== */ \n            admin.admin.unsuspendUser(userId);\n        }    \n        \n        admin.fillStorageInfo();\n        Stage stage; "
        },
        {
          "sample" : "newMessage",
          "lineNumber" : 157,
          "columnNumber" : 31,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessagesController.java",
          "excerpt" : "    {\n        AllMessages message = (AllMessages)messagesTable.getSelectionModel().getSelectedItem();\n        //System.out.println(message.getMessage());\n        \n        Stage stage= new Stage();\n        ReadMessageController newMessage = new ReadMessageController(message,newSysUser); /* <=== */ \n        newMessage.fillMessage();\n        Scene scene = new Scene(newMessage);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
        },
        {
          "sample" : "doctorID",
          "lineNumber" : 620,
          "columnNumber" : 94,
          "fileName" : "/app/code/src/main/java/Admin/Admin.java",
          "excerpt" : "            sql =   \"SELECT date FROM appointment WHERE date > (CURRENT_DATE - INTERVAL 12 MONTH) ORDER BY date ASC;\";\n\n        } else {\n\n            sql =   \"SELECT date FROM appointment \"+\n                    \"WHERE ( date > (CURRENT_DATE - INTERVAL 12 MONTH) ) & (slmc_reg_no = '\"+doctorID+\"') \"+ /* <=== */ \n                    \"ORDER BY date ASC;\";\n        }    \n\n\n        ArrayList<ArrayList<String>> data = null;"
        },
        {
          "sample" : "patientID",
          "lineNumber" : 84,
          "columnNumber" : 26,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/Validate.java",
          "excerpt" : "    {\n            String result = \"hmsxxxxpa\";\n\n            if ( patientID.length() == 9 )\n            {\n                    if ( patientID.substring(0,3).equals(\"hms\") ) /* <=== */ \n                    {\n                            if ( patientID.substring(7,9).equals(\"pa\") )\n                            {\n                                    result = \"1\";\n                            }"
        },
        {
          "sample" : "this.doctorUserID",
          "lineNumber" : 1253,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
          "excerpt" : "            doctorOther.setText(docPersonalInfo.get(\"experience\"));\n        }catch(Exception e){}\n        \n        doctorUserName.setText(docPersonalInfo.get(\"user_name\"));\n        doctorUserType.setText(docPersonalInfo.get(\"user_type\"));\n        doctorUserID.setText(docPersonalInfo.get(\"user_id\")); /* <=== */ \n        \n    } \n    \n    @FXML\n    private Node createPage(int pageIndex) {"
        },
        {
          "sample" : "admin",
          "lineNumber" : 44,
          "columnNumber" : 22,
          "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
          "excerpt" : "    public SettingsController(Admin admin,AdminController adminC) {\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/Settings.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n        \n        this.admin = admin; /* <=== */ \n        this.adminC = adminC;\n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {"
        },
        {
          "sample" : "\"user_id\"",
          "lineNumber" : 930,
          "columnNumber" : 58,
          "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
          "excerpt" : "            pharmacistAchivements.setText(docPersonalInfo.get(\"achievements\"));\n            pharmacistOther.setText(docPersonalInfo.get(\"experienced_areas\"));\n        }catch(Exception e){}    \n            pharmacistUserName.setText(docPersonalInfo.get(\"user_name\"));\n            pharmacistUserType.setText(docPersonalInfo.get(\"user_type\"));\n            pharmacistUserID.setText(docPersonalInfo.get(\"user_id\")); /* <=== */ \n        \n    }  \n    \n    @FXML\n    private Button editBasicInfoButton;"
        },
        {
          "sample" : "this.doctorID",
          "lineNumber" : 32,
          "columnNumber" : 16,
          "fileName" : "/app/code/src/main/java/Receptionist/DoctorDetail.java",
          "excerpt" : "        setAvailability(availability);\n        setDays(days);\n    }\n\n    public String getDoctorID() {\n        return doctorID.get(); /* <=== */ \n    }\n \n    public void setDoctorID(String value) {\n        doctorID.set(value);\n    }"
        },
        {
          "sample" : "success",
          "lineNumber" : 1461,
          "columnNumber" : 38,
          "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
          "excerpt" : "\n    @FXML\n    public void showAppointmentSuccessIndicator(String patientId, String consult, String appDate, String appId)\n    {\n        Stage stage= new Stage();\n        AppointmentSuccessController success = new AppointmentSuccessController(); /* <=== */ \n        \n        success.fillAppointmentData(patientId,consult,appDate,appId);\n        \n        Scene scene = new Scene(success);\n        stage.setScene(scene);"
        },
        {
          "sample" : "super.userID",
          "lineNumber" : 46,
          "columnNumber" : 96,
          "fileName" : "/app/code/src/main/java/Pharmacist/Pharmacist.java",
          "excerpt" : "\tpublic Pharmacist(String username)\n\t{\n\t\tsuper(username);\n\t\t\n\t\ttry{\n\t\t\tpharmacistID = super.dbOperator.showTableData(\"pharmacist\",\"pharmacist_id\",(\"user_id = '\" + super.userID + \"'\")).get(0).get(0); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){}\n\t\t\n\t}\n\t\n\tpublic HashMap<String,String> getProfileInfo()"
        },
        {
          "sample" : "Example.ACCOUNT_ID",
          "lineNumber" : 22,
          "columnNumber" : 41,
          "fileName" : "/app/code/src/main/java/Doctor/Example.java",
          "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
        },
        {
          "sample" : "\" INNER JOIN patient ON tmp_bill.patient_id = patient.patient_id\"",
          "lineNumber" : 425,
          "columnNumber" : 17,
          "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
          "excerpt" : "    {\n        String sql1=\"\";\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+\n                \" INNER JOIN patient ON tmp_bill.patient_id = patient.patient_id\"+ /* <=== */ \n                \" INNER JOIN person ON person.person_id = patient.person_id\"+\n                \" WHERE tmp_bill.patient_id = '\"+value+\"' ;\";\n\n        try{\t\t\t\n"
        },
        {
          "sample" : "refundC",
          "lineNumber" : 43,
          "columnNumber" : 24,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/PopupAskController.java",
          "excerpt" : "        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.label = label;\n        this.cashier = cashier;\n        this.refundC = refundC; /* <=== */ \n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {\n            throw new RuntimeException(exception);"
        },
        {
          "sample" : "doc",
          "lineNumber" : 35,
          "columnNumber" : 20,
          "fileName" : "/app/code/src/main/java/Doctor/NewDoctorTimeSlotController.java",
          "excerpt" : "    public NewDoctorTimeSlotController(Doctor doc,DoctorController docC) {\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/NewDoctorTimeSlot.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.doc = doc; /* <=== */ \n        this.docC = docC;\n        \n        try {\n            fxmlLoader.load();            \n        } catch (IOException exception) {"
        },
        {
          "sample" : "newSysUser.userID",
          "lineNumber" : 127,
          "columnNumber" : 27,
          "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/NewMessageController.java",
          "excerpt" : "    @FXML private Button sendButton;\n    \n    @FXML private void send()\n    {\n        \n        String senderID = newSysUser.userID; /* <=== */ \n        String subject = subjecttxt.getText();\n        String message = messagetxt.getText();\n        \n        String receiver = userid.getText();\n        //String receiver = \"hms0001u\";"
        },
        {
          "sample" : "this.labUserID",
          "lineNumber" : 1277,
          "columnNumber" : 9,
          "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
          "excerpt" : "            labOther.setText(docPersonalInfo.get(\"experienced_areas\"));\n        }catch(Exception e){}\n            \n        labUserName.setText(docPersonalInfo.get(\"user_name\"));\n        labUserType.setText(docPersonalInfo.get(\"user_type\"));\n        labUserID.setText(docPersonalInfo.get(\"user_id\")); /* <=== */ \n        \n    }  \n    \n    \n    @FXML"
        }
      ]
    }
  ],
  "dataFlow" : {
    "storages" : [
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "5420-5423-5426-12905-12904-13000-13011-2662-2685-2676-2675-2695-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "user",
                    "lineNumber" : 1048,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        String userid = userIDlbl.getText();\n        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid); /* <=== */ \n            user.load();\n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1048,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        String userid = userIDlbl.getText();\n        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid); /* <=== */ \n            user.load();\n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1049,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid);\n            user.load(); /* <=== */ \n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            //set Stage boundaries to visible bounds of the main screen"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 183,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "        Stage stage; \n        stage = (Stage) close.getScene().getWindow();\n        stage.close();\n    }       \n    \n    public void load() /* <=== */ \n    {\n        loadInfo();\n    }\n    \n    "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 185,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "        stage.close();\n    }       \n    \n    public void load()\n    {\n        loadInfo(); /* <=== */ \n    }\n    \n    \n    public void showSuccessIndicator()\n    {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 65,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "    @FXML private ComboBox gender;\n\n    @FXML private TextField username;\n    @FXML private TextField userid;\n    \n    public void loadInfo() /* <=== */ \n    {\n        ArrayList<ArrayList<String>> data = admin.admin.getSysUser(userID);\n        \n        String type = data.get(1).get(13);\n        "
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 67,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "    @FXML private TextField username;\n    @FXML private TextField userid;\n    \n    public void loadInfo()\n    {\n        ArrayList<ArrayList<String>> data = admin.admin.getSysUser(userID); /* <=== */ \n        \n        String type = data.get(1).get(13);\n        \n        switch(type)\n        {"
                  },
                  {
                    "sample" : "userid",
                    "lineNumber" : 1052,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            return data;\n    }\n    \n    \n    public ArrayList<ArrayList<String>> getSysUser(String userid) /* <=== */ \n    {\n            ArrayList<ArrayList<String>> data = null;\n            \n            String sql1=\"\";\n            "
                  },
                  {
                    "sample" : "userid",
                    "lineNumber" : 1063,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            try{\n                \n                \n                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+\n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\"; /* <=== */ \n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1);\n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}"
                  },
                  {
                    "sample" : "\"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \" + \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \" + \"WHERE (sys_user.user_id = '\" + userid + \"' AND person.user_id = '\" + userid + \"');\"",
                    "lineNumber" : 1061,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            String sql1=\"\";\n            \n            try{\n                \n                \n                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+ /* <=== */ \n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\";\n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1);"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 1061,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            String sql1=\"\";\n            \n            try{\n                \n                \n                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+ /* <=== */ \n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\";\n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1);"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 1066,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+\n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\";\n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            return data;\n    }"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "53584-53595-53594-53593-53610-53609-53608-53616-53620-53619-53626-53625-53824-53822-53821-53826-53831-53836-53841-53846-53851-53856-53871-48581-48586-48585-48609-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "dob",
                    "lineNumber" : 543,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            if (tmpGender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}\n\n            String nic = patientNIC.getText().replaceAll(\"\\\\s+$\", \"\");\n\n            LocalDate dob = patientDOB.getValue(); /* <=== */ \n\n            String day = Integer.toString(dob.getDayOfMonth());\n            if ( day.length() < 2 ) day = \"0\"+day; \n\n            String month = Integer.toString(dob.getMonthValue());"
                  },
                  {
                    "sample" : "dob",
                    "lineNumber" : 545,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "\n            String nic = patientNIC.getText().replaceAll(\"\\\\s+$\", \"\");\n\n            LocalDate dob = patientDOB.getValue();\n\n            String day = Integer.toString(dob.getDayOfMonth()); /* <=== */ \n            if ( day.length() < 2 ) day = \"0\"+day; \n\n            String month = Integer.toString(dob.getMonthValue());\n            if ( month.length() < 2 ) month = \"0\"+month;\n"
                  },
                  {
                    "sample" : "dob.getDayOfMonth()",
                    "lineNumber" : 545,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "\n            String nic = patientNIC.getText().replaceAll(\"\\\\s+$\", \"\");\n\n            LocalDate dob = patientDOB.getValue();\n\n            String day = Integer.toString(dob.getDayOfMonth()); /* <=== */ \n            if ( day.length() < 2 ) day = \"0\"+day; \n\n            String month = Integer.toString(dob.getMonthValue());\n            if ( month.length() < 2 ) month = \"0\"+month;\n"
                  },
                  {
                    "sample" : "Integer",
                    "lineNumber" : 545,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "\n            String nic = patientNIC.getText().replaceAll(\"\\\\s+$\", \"\");\n\n            LocalDate dob = patientDOB.getValue();\n\n            String day = Integer.toString(dob.getDayOfMonth()); /* <=== */ \n            if ( day.length() < 2 ) day = \"0\"+day; \n\n            String month = Integer.toString(dob.getMonthValue());\n            if ( month.length() < 2 ) month = \"0\"+month;\n"
                  },
                  {
                    "sample" : "Integer",
                    "lineNumber" : 548,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            LocalDate dob = patientDOB.getValue();\n\n            String day = Integer.toString(dob.getDayOfMonth());\n            if ( day.length() < 2 ) day = \"0\"+day; \n\n            String month = Integer.toString(dob.getMonthValue()); /* <=== */ \n            if ( month.length() < 2 ) month = \"0\"+month;\n\n            String dateOfBirth = Integer.toString(dob.getYear())+month+day;\n\n            String mobile = patientMobile.getText().replaceAll(\"\\\\s+$\", \"\");"
                  },
                  {
                    "sample" : "Integer.toString(dob.getMonthValue())",
                    "lineNumber" : 548,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            LocalDate dob = patientDOB.getValue();\n\n            String day = Integer.toString(dob.getDayOfMonth());\n            if ( day.length() < 2 ) day = \"0\"+day; \n\n            String month = Integer.toString(dob.getMonthValue()); /* <=== */ \n            if ( month.length() < 2 ) month = \"0\"+month;\n\n            String dateOfBirth = Integer.toString(dob.getYear())+month+day;\n\n            String mobile = patientMobile.getText().replaceAll(\"\\\\s+$\", \"\");"
                  },
                  {
                    "sample" : "month",
                    "lineNumber" : 548,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            LocalDate dob = patientDOB.getValue();\n\n            String day = Integer.toString(dob.getDayOfMonth());\n            if ( day.length() < 2 ) day = \"0\"+day; \n\n            String month = Integer.toString(dob.getMonthValue()); /* <=== */ \n            if ( month.length() < 2 ) month = \"0\"+month;\n\n            String dateOfBirth = Integer.toString(dob.getYear())+month+day;\n\n            String mobile = patientMobile.getText().replaceAll(\"\\\\s+$\", \"\");"
                  },
                  {
                    "sample" : "month",
                    "lineNumber" : 549,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "\n            String day = Integer.toString(dob.getDayOfMonth());\n            if ( day.length() < 2 ) day = \"0\"+day; \n\n            String month = Integer.toString(dob.getMonthValue());\n            if ( month.length() < 2 ) month = \"0\"+month; /* <=== */ \n\n            String dateOfBirth = Integer.toString(dob.getYear())+month+day;\n\n            String mobile = patientMobile.getText().replaceAll(\"\\\\s+$\", \"\");\n            String email = patientEmail.getText().replaceAll(\"\\\\s+$\", \"\");"
                  },
                  {
                    "sample" : "\"0\" + month",
                    "lineNumber" : 549,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "\n            String day = Integer.toString(dob.getDayOfMonth());\n            if ( day.length() < 2 ) day = \"0\"+day; \n\n            String month = Integer.toString(dob.getMonthValue());\n            if ( month.length() < 2 ) month = \"0\"+month; /* <=== */ \n\n            String dateOfBirth = Integer.toString(dob.getYear())+month+day;\n\n            String mobile = patientMobile.getText().replaceAll(\"\\\\s+$\", \"\");\n            String email = patientEmail.getText().replaceAll(\"\\\\s+$\", \"\");"
                  },
                  {
                    "sample" : "month",
                    "lineNumber" : 549,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "\n            String day = Integer.toString(dob.getDayOfMonth());\n            if ( day.length() < 2 ) day = \"0\"+day; \n\n            String month = Integer.toString(dob.getMonthValue());\n            if ( month.length() < 2 ) month = \"0\"+month; /* <=== */ \n\n            String dateOfBirth = Integer.toString(dob.getYear())+month+day;\n\n            String mobile = patientMobile.getText().replaceAll(\"\\\\s+$\", \"\");\n            String email = patientEmail.getText().replaceAll(\"\\\\s+$\", \"\");"
                  },
                  {
                    "sample" : "Integer.toString(dob.getYear()) + month + day",
                    "lineNumber" : 551,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            if ( day.length() < 2 ) day = \"0\"+day; \n\n            String month = Integer.toString(dob.getMonthValue());\n            if ( month.length() < 2 ) month = \"0\"+month;\n\n            String dateOfBirth = Integer.toString(dob.getYear())+month+day; /* <=== */ \n\n            String mobile = patientMobile.getText().replaceAll(\"\\\\s+$\", \"\");\n            String email = patientEmail.getText().replaceAll(\"\\\\s+$\", \"\");\n\n            String address = patientAddress.getText().replaceAll(\"\\\\s+$\", \"\");"
                  },
                  {
                    "sample" : "dateOfBirth",
                    "lineNumber" : 551,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            if ( day.length() < 2 ) day = \"0\"+day; \n\n            String month = Integer.toString(dob.getMonthValue());\n            if ( month.length() < 2 ) month = \"0\"+month;\n\n            String dateOfBirth = Integer.toString(dob.getYear())+month+day; /* <=== */ \n\n            String mobile = patientMobile.getText().replaceAll(\"\\\\s+$\", \"\");\n            String email = patientEmail.getText().replaceAll(\"\\\\s+$\", \"\");\n\n            String address = patientAddress.getText().replaceAll(\"\\\\s+$\", \"\");"
                  },
                  {
                    "sample" : "dateOfBirth",
                    "lineNumber" : 600,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    address = address.replaceAll(\"\\\\s+$\", \"\");\n                    \n                    String patientInfo = \"\";\n                    patientInfo += \"nic = '\" + nic;\n                    patientInfo += \"',gender = '\" + gender;\n                    patientInfo += \"',date_of_birth = '\" + dateOfBirth; /* <=== */ \n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;"
                  },
                  {
                    "sample" : "\"',date_of_birth = '\" + dateOfBirth",
                    "lineNumber" : 600,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    address = address.replaceAll(\"\\\\s+$\", \"\");\n                    \n                    String patientInfo = \"\";\n                    patientInfo += \"nic = '\" + nic;\n                    patientInfo += \"',gender = '\" + gender;\n                    patientInfo += \"',date_of_birth = '\" + dateOfBirth; /* <=== */ \n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 600,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    address = address.replaceAll(\"\\\\s+$\", \"\");\n                    \n                    String patientInfo = \"\";\n                    patientInfo += \"nic = '\" + nic;\n                    patientInfo += \"',gender = '\" + gender;\n                    patientInfo += \"',date_of_birth = '\" + dateOfBirth; /* <=== */ \n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 601,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    \n                    String patientInfo = \"\";\n                    patientInfo += \"nic = '\" + nic;\n                    patientInfo += \"',gender = '\" + gender;\n                    patientInfo += \"',date_of_birth = '\" + dateOfBirth;\n                    patientInfo += \"',address = '\" + address; /* <=== */ \n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 602,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    String patientInfo = \"\";\n                    patientInfo += \"nic = '\" + nic;\n                    patientInfo += \"',gender = '\" + gender;\n                    patientInfo += \"',date_of_birth = '\" + dateOfBirth;\n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile; /* <=== */ \n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 603,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"nic = '\" + nic;\n                    patientInfo += \"',gender = '\" + gender;\n                    patientInfo += \"',date_of_birth = '\" + dateOfBirth;\n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname; /* <=== */ \n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";\n"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 604,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',gender = '\" + gender;\n                    patientInfo += \"',date_of_birth = '\" + dateOfBirth;\n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname; /* <=== */ \n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";\n\n                    //System.out.println(patientInfo);"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 605,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',date_of_birth = '\" + dateOfBirth;\n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email; /* <=== */ \n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";\n\n                    //System.out.println(patientInfo);\n                    boolean result = receptionist.updatePatientInfo(patientSearchBox.getText(),patientInfo);"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 606,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\"; /* <=== */ \n                    patientInfo += \",religion = \" + \"NULL\";\n\n                    //System.out.println(patientInfo);\n                    boolean result = receptionist.updatePatientInfo(patientSearchBox.getText(),patientInfo);\n                    if (result == true) "
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 607,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\"; /* <=== */ \n\n                    //System.out.println(patientInfo);\n                    boolean result = receptionist.updatePatientInfo(patientSearchBox.getText(),patientInfo);\n                    if (result == true) \n                        showSuccessIndicator();"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 610,
                    "columnNumber" : 96,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";\n\n                    //System.out.println(patientInfo);\n                    boolean result = receptionist.updatePatientInfo(patientSearchBox.getText(),patientInfo); /* <=== */ \n                    if (result == true) \n                        showSuccessIndicator();\n                \n                }    \n                    "
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 263,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\treturn value;\n\t}\n        \n        \n        public boolean updatePatientInfo(String patientID,String info) /* <=== */ \n        {\n            String sql =    \"UPDATE person SET \"+info+\" \"+\n                            \"WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '\"+patientID+\"');\";\n\n"
                  },
                  {
                    "sample" : "\"UPDATE person SET \" + info + \" \" + \"WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '\" + patientID + \"');\"",
                    "lineNumber" : 265,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t}\n        \n        \n        public boolean updatePatientInfo(String patientID,String info)\n        {\n            String sql =    \"UPDATE person SET \"+info+\" \"+ /* <=== */ \n                            \"WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '\"+patientID+\"');\";\n\n\n            boolean result = true;\n            try{\t\t\t"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 265,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t}\n        \n        \n        public boolean updatePatientInfo(String patientID,String info)\n        {\n            String sql =    \"UPDATE person SET \"+info+\" \"+ /* <=== */ \n                            \"WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '\"+patientID+\"');\";\n\n\n            boolean result = true;\n            try{\t\t\t"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 272,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\n            boolean result = true;\n            try{\t\t\t\n                    //System.out.println(sql);\n                    result = super.dbOperator.customInsertion(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            //System.out.println(data);\n            return result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.Photograph",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "27086-66795-66798-27085-27183-21355-23418-23417-23424-23432-23423-23422-23451-23450-23477-59292-59361-59360-59359-59397-59394-59393-59403-59402",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1102,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 723,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n\tpublic boolean prescribe(String drugs, String tests, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "this.slmcRegNo",
                    "lineNumber" : 747,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 747,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 748,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 748,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 748,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests",
                    "lineNumber" : 753,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 753,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 754,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;\n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t /* <=== */ \n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 303,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tmetaData.add(TableColumnNull);\n\t\tmetaData.add(TableColumnKeys);\n\t\treturn metaData;\n\t}\n\t\n\tpublic boolean addTableRow(String table,String tableData) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\tString sql = \"SELECT * FROM \" + table + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableData.split(\",\")",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit",
                    "lineNumber" : 319,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit[i]",
                    "lineNumber" : 328,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "i + 1",
                    "lineNumber" : 328,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 328,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  },
                  {
                    "sample" : "stmt.executeUpdate()",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-60433-60435-23970-27853-21349-21872-21869-59788-59805-59804-59825-59822-59821-59820-59830-59829",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 112,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData();  /* <=== */ \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 113,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable(); /* <=== */ \n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();\n        doctor.loadNameList();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 1298,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        availabilityPagination.setPageCount((dataSize / 8 + 1));\n        availabilityPagination.setPageFactory(this::createPage);\n    }\n    \n    @FXML /* <=== */ \n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable();\n        createPagination(currentTimeTableData0.size()-1);\n    }"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1301,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    }\n    \n    @FXML\n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable(); /* <=== */ \n        createPagination(currentTimeTableData0.size()-1);\n    }\n    \n    @FXML\n    private Button editBasicInfoButton;"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 200,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "    \n            return messages;\n        }\n        */\n        \n\tpublic ArrayList<ArrayList<String>> doctorTimeTable() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 206,
                    "columnNumber" : 159,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 206,
                    "columnNumber" : 93,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  }
                ]
              },
              {
                "pathId" : "27086-66795-66798-27085-27183-21355-23418-69701-27183-27192-21353-22927-22926-22955-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1102,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 723,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n\tpublic boolean prescribe(String drugs, String tests, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "this.slmcRegNo",
                    "lineNumber" : 747,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 723,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n\tpublic boolean prescribe(String drugs, String tests, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1102,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1104,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID);\n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID); /* <=== */ \n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();\n                            \n                            txtAuto.setText(\"\");"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 562,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            return data;\n        }  \n        \n\t\n\tpublic boolean diagnose(String diagnostic, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "\"INSERT INTO medical_history VALUES (\" + \"'\" + tmpID2 + \"','\" + patientID + \"','\" + this.slmcRegNo + \"','\" + date + \"','\" + diagnostic + \"')\"",
                    "lineNumber" : 591,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t/*\n\t\t\tString tableData = ( tmpID2 + \",\" + patientID + \",\" + this.slmcRegNo + \",\" + date + \",\" + diagnostic);\n\t\t\tsuper.dbOperator.addTableRow(\"medical_history\",tableData);\n                        */\n                        String sql2 =   \"INSERT INTO medical_history VALUES (\"+ /* <=== */ \n                                        \"'\"+tmpID2 + \"','\" + patientID + \"','\" + this.slmcRegNo + \"','\" + date + \"','\" + diagnostic +\"')\";\n                        super.dbOperator.customInsertion(sql2);\n\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 591,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t/*\n\t\t\tString tableData = ( tmpID2 + \",\" + patientID + \",\" + this.slmcRegNo + \",\" + date + \",\" + diagnostic);\n\t\t\tsuper.dbOperator.addTableRow(\"medical_history\",tableData);\n                        */\n                        String sql2 =   \"INSERT INTO medical_history VALUES (\"+ /* <=== */ \n                                        \"'\"+tmpID2 + \"','\" + patientID + \"','\" + this.slmcRegNo + \"','\" + date + \"','\" + diagnostic +\"')\";\n                        super.dbOperator.customInsertion(sql2);\n\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 593,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString tableData = ( tmpID2 + \",\" + patientID + \",\" + this.slmcRegNo + \",\" + date + \",\" + diagnostic);\n\t\t\tsuper.dbOperator.addTableRow(\"medical_history\",tableData);\n                        */\n                        String sql2 =   \"INSERT INTO medical_history VALUES (\"+\n                                        \"'\"+tmpID2 + \"','\" + patientID + \"','\" + this.slmcRegNo + \"','\" + date + \"','\" + diagnostic +\"')\";\n                        super.dbOperator.customInsertion(sql2); /* <=== */ \n\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.Gender",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "27086-66795-66798-27085-27183-21355-23418-23417-23424-23432-23423-23422-23451-23450-23477-59292-59361-59360-59359-59397-59394-59393-59403-59402",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1102,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 723,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n\tpublic boolean prescribe(String drugs, String tests, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "this.slmcRegNo",
                    "lineNumber" : 747,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 747,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 748,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 748,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 748,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests",
                    "lineNumber" : 753,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 753,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 754,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;\n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t /* <=== */ \n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 303,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tmetaData.add(TableColumnNull);\n\t\tmetaData.add(TableColumnKeys);\n\t\treturn metaData;\n\t}\n\t\n\tpublic boolean addTableRow(String table,String tableData) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\tString sql = \"SELECT * FROM \" + table + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableData.split(\",\")",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit",
                    "lineNumber" : 319,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit[i]",
                    "lineNumber" : 328,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "i + 1",
                    "lineNumber" : 328,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 328,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  },
                  {
                    "sample" : "stmt.executeUpdate()",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-60433-60435-23970-27853-21349-21872-21869-59788-59805-59804-59825-59822-59821-59820-59830-59829",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 112,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData();  /* <=== */ \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 113,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable(); /* <=== */ \n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();\n        doctor.loadNameList();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 1298,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        availabilityPagination.setPageCount((dataSize / 8 + 1));\n        availabilityPagination.setPageFactory(this::createPage);\n    }\n    \n    @FXML /* <=== */ \n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable();\n        createPagination(currentTimeTableData0.size()-1);\n    }"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1301,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    }\n    \n    @FXML\n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable(); /* <=== */ \n        createPagination(currentTimeTableData0.size()-1);\n    }\n    \n    @FXML\n    private Button editBasicInfoButton;"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 200,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "    \n            return messages;\n        }\n        */\n        \n\tpublic ArrayList<ArrayList<String>> doctorTimeTable() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 206,
                    "columnNumber" : 159,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 206,
                    "columnNumber" : 93,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  }
                ]
              },
              {
                "pathId" : "6785-6843-6841-6840-6845-6850-6855-6860-6865-6876-183-197-196-195-215-214-222-221-220-229-227-226-244-243-235-234-255-254-253-251-250-249-260-259-278-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "gender",
                    "lineNumber" : 1495,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            String info = \"\";\n\t\t\t\t\n            String[] name = adminName.getText().split(\" \");\n            String gender = (String)adminGender.getSelectionModel().getSelectedItem();\n            if (gender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";} /* <=== */ \n            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)adminNationality.getText();\n            String religion = (String)adminReligion.getText();\n            String mobile = adminMobile.getText();\n            String email = adminEmail.getText();"
                  },
                  {
                    "sample" : "gender",
                    "lineNumber" : 1504,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            String mobile = adminMobile.getText();\n            String email = adminEmail.getText();\n            String address = adminAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender; /* <=== */ \n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address;"
                  },
                  {
                    "sample" : "\"#gender \" + gender",
                    "lineNumber" : 1504,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            String mobile = adminMobile.getText();\n            String email = adminEmail.getText();\n            String address = adminAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender; /* <=== */ \n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address;"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1504,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            String mobile = adminMobile.getText();\n            String email = adminEmail.getText();\n            String address = adminAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender; /* <=== */ \n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address;"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1505,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            String email = adminEmail.getText();\n            String address = adminAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality; /* <=== */ \n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address;\n"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1506,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            String address = adminAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion; /* <=== */ \n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1507,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile; /* <=== */ \n            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);\n"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1508,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email; /* <=== */ \n            info += \"#address \" + address;\n\n            //System.out.println(info);\n\n            boolean success = admin.updateProfileInfo(info);"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1509,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address; /* <=== */ \n\n            //System.out.println(info);\n\n            boolean success = admin.updateProfileInfo(info);\n            "
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1513,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);\n\n            boolean success = admin.updateProfileInfo(info); /* <=== */ \n            \n            editBasicInfoButton.setText(\"Edit\");\n            //saveProgress.setProgress(0.5);  \n            if (success == true) showSuccessIndicator();\n            //waitFor();"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 82,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    /**\n     * Update the basic info of the administrator account \n     * @param info updated profile information given as a space separated string\n     * @return boolean if the operation was successful or not\n     */\n    public boolean updateProfileInfo(String info) /* <=== */ \n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 87,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "info.split(\"#\")",
                    "lineNumber" : 87,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "tmpInfo",
                    "lineNumber" : 87,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 88,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo) /* <=== */ \n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 90,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "s.split(\" \")",
                    "lineNumber" : 90,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "tmpData",
                    "lineNumber" : 90,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "tmpData[0]",
                    "lineNumber" : 91,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmpData[0].length() + 1",
                    "lineNumber" : 91,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmplen",
                    "lineNumber" : 91,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmplen",
                    "lineNumber" : 92,
                    "columnNumber" : 64,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 92,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"",
                    "lineNumber" : 92,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 92,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 96,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.length()",
                    "lineNumber" : 96,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.length() - 1",
                    "lineNumber" : 96,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 96,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.substring(0, column_data.length() - 1)",
                    "lineNumber" : 96,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 96,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "\"UPDATE person SET \" + column_data + \" \" + \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 98,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  + /* <=== */ \n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 98,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  + /* <=== */ \n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 103,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql ); /* <=== */ \n\n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();result = false;}\n\n        return result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "27086-66795-66798-27085-27183-21355-23418-23417-23424-23432-23423-23422-23451-23450-23477-59292-59361-59360-59359-59397-59394-59393-59403-59402",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1102,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 723,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n\tpublic boolean prescribe(String drugs, String tests, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "this.slmcRegNo",
                    "lineNumber" : 747,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 747,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 748,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 748,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 748,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests",
                    "lineNumber" : 753,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 753,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 754,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;\n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t /* <=== */ \n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 303,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tmetaData.add(TableColumnNull);\n\t\tmetaData.add(TableColumnKeys);\n\t\treturn metaData;\n\t}\n\t\n\tpublic boolean addTableRow(String table,String tableData) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\tString sql = \"SELECT * FROM \" + table + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableData.split(\",\")",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit",
                    "lineNumber" : 319,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit[i]",
                    "lineNumber" : 328,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "i + 1",
                    "lineNumber" : 328,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 328,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  },
                  {
                    "sample" : "stmt.executeUpdate()",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-60433-60435-23970-27853-21349-21872-21869-59788-59805-59804-59825-59822-59821-59820-59830-59829",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 112,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData();  /* <=== */ \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 113,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable(); /* <=== */ \n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();\n        doctor.loadNameList();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 1298,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        availabilityPagination.setPageCount((dataSize / 8 + 1));\n        availabilityPagination.setPageFactory(this::createPage);\n    }\n    \n    @FXML /* <=== */ \n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable();\n        createPagination(currentTimeTableData0.size()-1);\n    }"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1301,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    }\n    \n    @FXML\n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable(); /* <=== */ \n        createPagination(currentTimeTableData0.size()-1);\n    }\n    \n    @FXML\n    private Button editBasicInfoButton;"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 200,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "    \n            return messages;\n        }\n        */\n        \n\tpublic ArrayList<ArrayList<String>> doctorTimeTable() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 206,
                    "columnNumber" : 159,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 206,
                    "columnNumber" : 93,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  }
                ]
              },
              {
                "pathId" : "53408-53530-53529-53528-53527-53837-53836-53841-53846-53851-53856-53871-48581-48586-48585-48609-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "this.patientFirstName",
                    "lineNumber" : 490,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "    \n    @FXML public void patientAdd()\n    {\n        boolean valid = true;\n        \n        if ( patientFirstName.getText().equals(\"\") ||  patientDOB.getValue() == null || patientGender.getValue() == null) /* <=== */ \n        {\n            valid = false;\n            \n            \n            "
                  },
                  {
                    "sample" : "this.patientFirstName",
                    "lineNumber" : 533,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        \n        } \n        \n        try{\n        \n            String fname = patientFirstName.getText().replaceAll(\"\\\\s+$\", \"\"); /* <=== */ \n            String lname = patientLastName.getText().replaceAll(\"\\\\s+$\", \"\");\n\n            String gender = \"\";\n            String tmpGender = (String)patientGender.getSelectionModel().getSelectedItem();\n            if (tmpGender.equals(\"Male\")){gender = \"m\";}"
                  },
                  {
                    "sample" : "getText()",
                    "lineNumber" : 533,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        \n        } \n        \n        try{\n        \n            String fname = patientFirstName.getText().replaceAll(\"\\\\s+$\", \"\"); /* <=== */ \n            String lname = patientLastName.getText().replaceAll(\"\\\\s+$\", \"\");\n\n            String gender = \"\";\n            String tmpGender = (String)patientGender.getSelectionModel().getSelectedItem();\n            if (tmpGender.equals(\"Male\")){gender = \"m\";}"
                  },
                  {
                    "sample" : "replaceAll(\"\\\\s+$\", \"\")",
                    "lineNumber" : 533,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        \n        } \n        \n        try{\n        \n            String fname = patientFirstName.getText().replaceAll(\"\\\\s+$\", \"\"); /* <=== */ \n            String lname = patientLastName.getText().replaceAll(\"\\\\s+$\", \"\");\n\n            String gender = \"\";\n            String tmpGender = (String)patientGender.getSelectionModel().getSelectedItem();\n            if (tmpGender.equals(\"Male\")){gender = \"m\";}"
                  },
                  {
                    "sample" : "fname",
                    "lineNumber" : 533,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        \n        } \n        \n        try{\n        \n            String fname = patientFirstName.getText().replaceAll(\"\\\\s+$\", \"\"); /* <=== */ \n            String lname = patientLastName.getText().replaceAll(\"\\\\s+$\", \"\");\n\n            String gender = \"\";\n            String tmpGender = (String)patientGender.getSelectionModel().getSelectedItem();\n            if (tmpGender.equals(\"Male\")){gender = \"m\";}"
                  },
                  {
                    "sample" : "\"',first_name = '\" + fname",
                    "lineNumber" : 603,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"nic = '\" + nic;\n                    patientInfo += \"',gender = '\" + gender;\n                    patientInfo += \"',date_of_birth = '\" + dateOfBirth;\n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname; /* <=== */ \n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";\n"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 603,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"nic = '\" + nic;\n                    patientInfo += \"',gender = '\" + gender;\n                    patientInfo += \"',date_of_birth = '\" + dateOfBirth;\n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname; /* <=== */ \n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";\n"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 604,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',gender = '\" + gender;\n                    patientInfo += \"',date_of_birth = '\" + dateOfBirth;\n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname; /* <=== */ \n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";\n\n                    //System.out.println(patientInfo);"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 605,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',date_of_birth = '\" + dateOfBirth;\n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email; /* <=== */ \n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";\n\n                    //System.out.println(patientInfo);\n                    boolean result = receptionist.updatePatientInfo(patientSearchBox.getText(),patientInfo);"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 606,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\"; /* <=== */ \n                    patientInfo += \",religion = \" + \"NULL\";\n\n                    //System.out.println(patientInfo);\n                    boolean result = receptionist.updatePatientInfo(patientSearchBox.getText(),patientInfo);\n                    if (result == true) "
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 607,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\"; /* <=== */ \n\n                    //System.out.println(patientInfo);\n                    boolean result = receptionist.updatePatientInfo(patientSearchBox.getText(),patientInfo);\n                    if (result == true) \n                        showSuccessIndicator();"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 610,
                    "columnNumber" : 96,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";\n\n                    //System.out.println(patientInfo);\n                    boolean result = receptionist.updatePatientInfo(patientSearchBox.getText(),patientInfo); /* <=== */ \n                    if (result == true) \n                        showSuccessIndicator();\n                \n                }    \n                    "
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 263,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\treturn value;\n\t}\n        \n        \n        public boolean updatePatientInfo(String patientID,String info) /* <=== */ \n        {\n            String sql =    \"UPDATE person SET \"+info+\" \"+\n                            \"WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '\"+patientID+\"');\";\n\n"
                  },
                  {
                    "sample" : "\"UPDATE person SET \" + info + \" \" + \"WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '\" + patientID + \"');\"",
                    "lineNumber" : 265,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t}\n        \n        \n        public boolean updatePatientInfo(String patientID,String info)\n        {\n            String sql =    \"UPDATE person SET \"+info+\" \"+ /* <=== */ \n                            \"WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '\"+patientID+\"');\";\n\n\n            boolean result = true;\n            try{\t\t\t"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 265,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t}\n        \n        \n        public boolean updatePatientInfo(String patientID,String info)\n        {\n            String sql =    \"UPDATE person SET \"+info+\" \"+ /* <=== */ \n                            \"WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '\"+patientID+\"');\";\n\n\n            boolean result = true;\n            try{\t\t\t"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 272,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\n            boolean result = true;\n            try{\t\t\t\n                    //System.out.println(sql);\n                    result = super.dbOperator.customInsertion(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            //System.out.println(data);\n            return result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "27086-66795-66798-27085-27183-21355-23418-23417-23424-23432-23423-23422-23451-23450-23477-59292-59361-59360-59359-59397-59394-59393-59403-59402",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1102,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 723,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n\tpublic boolean prescribe(String drugs, String tests, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "this.slmcRegNo",
                    "lineNumber" : 747,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 747,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 748,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 748,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 748,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests",
                    "lineNumber" : 753,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 753,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 754,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;\n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t /* <=== */ \n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 303,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tmetaData.add(TableColumnNull);\n\t\tmetaData.add(TableColumnKeys);\n\t\treturn metaData;\n\t}\n\t\n\tpublic boolean addTableRow(String table,String tableData) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\tString sql = \"SELECT * FROM \" + table + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableData.split(\",\")",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit",
                    "lineNumber" : 319,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit[i]",
                    "lineNumber" : 328,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "i + 1",
                    "lineNumber" : 328,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 328,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  },
                  {
                    "sample" : "stmt.executeUpdate()",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-60433-60435-23970-27853-21349-21872-21869-59788-59805-59804-59825-59822-59821-59820-59830-59829",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 112,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData();  /* <=== */ \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 113,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable(); /* <=== */ \n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();\n        doctor.loadNameList();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 1298,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        availabilityPagination.setPageCount((dataSize / 8 + 1));\n        availabilityPagination.setPageFactory(this::createPage);\n    }\n    \n    @FXML /* <=== */ \n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable();\n        createPagination(currentTimeTableData0.size()-1);\n    }"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1301,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    }\n    \n    @FXML\n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable(); /* <=== */ \n        createPagination(currentTimeTableData0.size()-1);\n    }\n    \n    @FXML\n    private Button editBasicInfoButton;"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 200,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "    \n            return messages;\n        }\n        */\n        \n\tpublic ArrayList<ArrayList<String>> doctorTimeTable() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 206,
                    "columnNumber" : 159,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 206,
                    "columnNumber" : 93,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  }
                ]
              },
              {
                "pathId" : "7019-7029-7026-7025-7039-292-306-305-304-324-323-331-330-329-346-344-343-335-334-360-359-358-356-355-354-365-364-383-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "this.adminConfirmPassword",
                    "lineNumber" : 1575,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            boolean result = false;\n            //result = checkCurrentPassword(String userId, String password)\n            \n            if (result == true)\n            {\n                if ( adminNewPassword.getText().equals( adminConfirmPassword.getText() ) ) /* <=== */ \n                {\n                    String info = \"password \" + adminConfirmPassword.getText();\n                    boolean success =  admin.updateAccountInfo(info);\n                    \n                    adminPassword.setDisable(true);"
                  },
                  {
                    "sample" : "this.adminConfirmPassword",
                    "lineNumber" : 1577,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            if (result == true)\n            {\n                if ( adminNewPassword.getText().equals( adminConfirmPassword.getText() ) )\n                {\n                    String info = \"password \" + adminConfirmPassword.getText(); /* <=== */ \n                    boolean success =  admin.updateAccountInfo(info);\n                    \n                    adminPassword.setDisable(true);\n                    adminNewPassword.setDisable(true);\n                    adminConfirmPassword.setDisable(true);"
                  },
                  {
                    "sample" : "\"password \" + adminConfirmPassword.getText()",
                    "lineNumber" : 1577,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            if (result == true)\n            {\n                if ( adminNewPassword.getText().equals( adminConfirmPassword.getText() ) )\n                {\n                    String info = \"password \" + adminConfirmPassword.getText(); /* <=== */ \n                    boolean success =  admin.updateAccountInfo(info);\n                    \n                    adminPassword.setDisable(true);\n                    adminNewPassword.setDisable(true);\n                    adminConfirmPassword.setDisable(true);"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1577,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            if (result == true)\n            {\n                if ( adminNewPassword.getText().equals( adminConfirmPassword.getText() ) )\n                {\n                    String info = \"password \" + adminConfirmPassword.getText(); /* <=== */ \n                    boolean success =  admin.updateAccountInfo(info);\n                    \n                    adminPassword.setDisable(true);\n                    adminNewPassword.setDisable(true);\n                    adminConfirmPassword.setDisable(true);"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1578,
                    "columnNumber" : 64,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            if (result == true)\n            {\n                if ( adminNewPassword.getText().equals( adminConfirmPassword.getText() ) )\n                {\n                    String info = \"password \" + adminConfirmPassword.getText();\n                    boolean success =  admin.updateAccountInfo(info); /* <=== */ \n                    \n                    adminPassword.setDisable(true);\n                    adminNewPassword.setDisable(true);\n                    adminConfirmPassword.setDisable(true);\n                    "
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 116,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    /**\n     * Update the account info of the administrator account \n     * @param info updated profile information given as a space separated string\n     * @return boolean if the operation was successful or not\n     */\n    public boolean updateAccountInfo(String info) /* <=== */ \n    {\n            boolean result = true;\n            String column_data = \"\";\n\n            String[] tmpInfo = info.split(\"#\");"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 121,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    public boolean updateAccountInfo(String info)\n    {\n            boolean result = true;\n            String column_data = \"\";\n\n            String[] tmpInfo = info.split(\"#\"); /* <=== */ \n            for(String s : tmpInfo)\n            {\n                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\";\n                    //System.out.println(column_data);"
                  },
                  {
                    "sample" : "info.split(\"#\")",
                    "lineNumber" : 121,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    public boolean updateAccountInfo(String info)\n    {\n            boolean result = true;\n            String column_data = \"\";\n\n            String[] tmpInfo = info.split(\"#\"); /* <=== */ \n            for(String s : tmpInfo)\n            {\n                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\";\n                    //System.out.println(column_data);"
                  },
                  {
                    "sample" : "tmpInfo",
                    "lineNumber" : 121,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    public boolean updateAccountInfo(String info)\n    {\n            boolean result = true;\n            String column_data = \"\";\n\n            String[] tmpInfo = info.split(\"#\"); /* <=== */ \n            for(String s : tmpInfo)\n            {\n                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\";\n                    //System.out.println(column_data);"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 122,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    {\n            boolean result = true;\n            String column_data = \"\";\n\n            String[] tmpInfo = info.split(\"#\");\n            for(String s : tmpInfo) /* <=== */ \n            {\n                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\";\n                    //System.out.println(column_data);\n            }"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 124,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            String column_data = \"\";\n\n            String[] tmpInfo = info.split(\"#\");\n            for(String s : tmpInfo)\n            {\n                    String[] tmpData = s.split(\" \"); /* <=== */ \n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\";\n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "s.split(\" \")",
                    "lineNumber" : 124,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            String column_data = \"\";\n\n            String[] tmpInfo = info.split(\"#\");\n            for(String s : tmpInfo)\n            {\n                    String[] tmpData = s.split(\" \"); /* <=== */ \n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\";\n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmpData",
                    "lineNumber" : 124,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            String column_data = \"\";\n\n            String[] tmpInfo = info.split(\"#\");\n            for(String s : tmpInfo)\n            {\n                    String[] tmpData = s.split(\" \"); /* <=== */ \n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\";\n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmpData[0]",
                    "lineNumber" : 125,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            String[] tmpInfo = info.split(\"#\");\n            for(String s : tmpInfo)\n            {\n                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\"; /* <=== */ \n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "tmpData[0].length() + 1",
                    "lineNumber" : 125,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            String[] tmpInfo = info.split(\"#\");\n            for(String s : tmpInfo)\n            {\n                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\"; /* <=== */ \n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 125,
                    "columnNumber" : 56,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            String[] tmpInfo = info.split(\"#\");\n            for(String s : tmpInfo)\n            {\n                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\"; /* <=== */ \n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "tmpData[0] + \"='\" + s.substring(tmpData[0].length() + 1, s.length()) + \"',\"",
                    "lineNumber" : 125,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            String[] tmpInfo = info.split(\"#\");\n            for(String s : tmpInfo)\n            {\n                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\"; /* <=== */ \n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 125,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            String[] tmpInfo = info.split(\"#\");\n            for(String s : tmpInfo)\n            {\n                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\"; /* <=== */ \n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 129,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\";\n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n            String sql =    \"UPDATE sys_user SET \" + column_data + \" \"  +\n                            \"WHERE user_id = '\" + this.userID + \"');\";\n\n            try{"
                  },
                  {
                    "sample" : "column_data.length()",
                    "lineNumber" : 129,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\";\n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n            String sql =    \"UPDATE sys_user SET \" + column_data + \" \"  +\n                            \"WHERE user_id = '\" + this.userID + \"');\";\n\n            try{"
                  },
                  {
                    "sample" : "column_data.length() - 1",
                    "lineNumber" : 129,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\";\n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n            String sql =    \"UPDATE sys_user SET \" + column_data + \" \"  +\n                            \"WHERE user_id = '\" + this.userID + \"');\";\n\n            try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 129,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\";\n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n            String sql =    \"UPDATE sys_user SET \" + column_data + \" \"  +\n                            \"WHERE user_id = '\" + this.userID + \"');\";\n\n            try{"
                  },
                  {
                    "sample" : "column_data.substring(0, column_data.length() - 1)",
                    "lineNumber" : 129,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\";\n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n            String sql =    \"UPDATE sys_user SET \" + column_data + \" \"  +\n                            \"WHERE user_id = '\" + this.userID + \"');\";\n\n            try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                    String[] tmpData = s.split(\" \");\n                    column_data += tmpData[0] + \"='\" + s.substring(tmpData[0].length()+1,s.length()) + \"',\";\n                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n            String sql =    \"UPDATE sys_user SET \" + column_data + \" \"  +\n                            \"WHERE user_id = '\" + this.userID + \"');\";\n\n            try{"
                  },
                  {
                    "sample" : "\"UPDATE sys_user SET \" + column_data + \" \" + \"WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 131,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1);\n\n            String sql =    \"UPDATE sys_user SET \" + column_data + \" \"  + /* <=== */ \n                            \"WHERE user_id = '\" + this.userID + \"');\";\n\n            try{\n\n                    super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 131,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                    //System.out.println(column_data);\n            }\n\n            column_data = column_data.substring(0,column_data.length()-1);\n\n            String sql =    \"UPDATE sys_user SET \" + column_data + \" \"  + /* <=== */ \n                            \"WHERE user_id = '\" + this.userID + \"');\";\n\n            try{\n\n                    super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 136,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            String sql =    \"UPDATE sys_user SET \" + column_data + \" \"  +\n                            \"WHERE user_id = '\" + this.userID + \"');\";\n\n            try{\n\n                    super.dbOperator.customInsertion( sql ); /* <=== */ \n\n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();result = false;}\n\n            return result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              },
              {
                "pathId" : "62566-62565-62571-62570-62568-62634-58914-58919-58918-58931-58928-58927-58926-58941-58940",
                "path" : [
                  {
                    "sample" : "\"password\"",
                    "lineNumber" : 58,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 58,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 59,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "prop.getProperty(\"database\")",
                    "lineNumber" : 59,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "this.database",
                    "lineNumber" : 59,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "this.database",
                    "lineNumber" : 74,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            }\n            \n\t\tthis.dbOperator = new DatabaseOperator();\n\t\ttry{\n\t\t\tdbOperator.connect(dbUsername,dbPassword);\n\t\t\tdbOperator.useDatabse(database); /* <=== */ \n                        \n\t\t}catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n\t}\n\t\n\tpublic User(String username)"
                  },
                  {
                    "sample" : "databaseName",
                    "lineNumber" : 175,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\trs.close();\n        stmt.close();\n        return dbNames;\n\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry"
                  },
                  {
                    "sample" : "\"USE \" + databaseName + \";\"",
                    "lineNumber" : 177,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        return dbNames;\n\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\"; /* <=== */ \n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 177,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        return dbNames;\n\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\"; /* <=== */ \n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 178,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 178,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 178,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 178,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 182,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");\n\t\t\tcurrentDatabaseName = databaseName;\n\t\t\trs.close();\n\t\t}\n\t\tcatch(Exception e)"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 182,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");\n\t\t\tcurrentDatabaseName = databaseName;\n\t\t\trs.close();\n\t\t}\n\t\tcatch(Exception e)"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalCharacteristics.Nationality",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "27086-66795-66798-27085-27183-21355-23418-23417-23424-23432-23423-23422-23451-23450-23477-59292-59361-59360-59359-59397-59394-59393-59403-59402",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1102,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 723,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n\tpublic boolean prescribe(String drugs, String tests, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "this.slmcRegNo",
                    "lineNumber" : 747,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 747,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 748,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 748,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 748,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests",
                    "lineNumber" : 753,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 753,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 754,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;\n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t /* <=== */ \n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 303,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tmetaData.add(TableColumnNull);\n\t\tmetaData.add(TableColumnKeys);\n\t\treturn metaData;\n\t}\n\t\n\tpublic boolean addTableRow(String table,String tableData) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\tString sql = \"SELECT * FROM \" + table + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableData.split(\",\")",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit",
                    "lineNumber" : 319,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit[i]",
                    "lineNumber" : 328,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "i + 1",
                    "lineNumber" : 328,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 328,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  },
                  {
                    "sample" : "stmt.executeUpdate()",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-60433-60435-23970-27853-21349-21872-21869-59788-59805-59804-59825-59822-59821-59820-59830-59829",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 112,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData();  /* <=== */ \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 113,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable(); /* <=== */ \n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();\n        doctor.loadNameList();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 1298,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        availabilityPagination.setPageCount((dataSize / 8 + 1));\n        availabilityPagination.setPageFactory(this::createPage);\n    }\n    \n    @FXML /* <=== */ \n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable();\n        createPagination(currentTimeTableData0.size()-1);\n    }"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1301,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    }\n    \n    @FXML\n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable(); /* <=== */ \n        createPagination(currentTimeTableData0.size()-1);\n    }\n    \n    @FXML\n    private Button editBasicInfoButton;"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 200,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "    \n            return messages;\n        }\n        */\n        \n\tpublic ArrayList<ArrayList<String>> doctorTimeTable() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 206,
                    "columnNumber" : 159,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 206,
                    "columnNumber" : 93,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  }
                ]
              },
              {
                "pathId" : "6727-6793-6790-6789-6848-6846-6845-6850-6855-6860-6865-6876-183-197-196-195-215-214-222-221-220-229-227-226-244-243-235-234-255-254-253-251-250-249-260-259-278-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "this.adminNationality",
                    "lineNumber" : 1484,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        else if ( currentState.equals(\"Save\"))\n        {\n            adminName.setDisable(true);\n            adminNIC.setDisable(true);\n            adminGender.setDisable(true);\n            adminNationality.setDisable(true); /* <=== */ \n            adminReligion.setDisable(true);\n            adminMobile.setDisable(true);\n            adminEmail.setDisable(true);\n            adminAddress.setDisable(true);\n            "
                  },
                  {
                    "sample" : "this.adminNationality",
                    "lineNumber" : 1497,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            String[] name = adminName.getText().split(\" \");\n            String gender = (String)adminGender.getSelectionModel().getSelectedItem();\n            if (gender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}\n            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)adminNationality.getText(); /* <=== */ \n            String religion = (String)adminReligion.getText();\n            String mobile = adminMobile.getText();\n            String email = adminEmail.getText();\n            String address = adminAddress.getText();\n"
                  },
                  {
                    "sample" : "(String) adminNationality.getText()",
                    "lineNumber" : 1497,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            String[] name = adminName.getText().split(\" \");\n            String gender = (String)adminGender.getSelectionModel().getSelectedItem();\n            if (gender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}\n            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)adminNationality.getText(); /* <=== */ \n            String religion = (String)adminReligion.getText();\n            String mobile = adminMobile.getText();\n            String email = adminEmail.getText();\n            String address = adminAddress.getText();\n"
                  },
                  {
                    "sample" : "nationality",
                    "lineNumber" : 1497,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            String[] name = adminName.getText().split(\" \");\n            String gender = (String)adminGender.getSelectionModel().getSelectedItem();\n            if (gender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}\n            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)adminNationality.getText(); /* <=== */ \n            String religion = (String)adminReligion.getText();\n            String mobile = adminMobile.getText();\n            String email = adminEmail.getText();\n            String address = adminAddress.getText();\n"
                  },
                  {
                    "sample" : "nationality",
                    "lineNumber" : 1505,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            String email = adminEmail.getText();\n            String address = adminAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality; /* <=== */ \n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address;\n"
                  },
                  {
                    "sample" : "\"#nationality \" + nationality",
                    "lineNumber" : 1505,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            String email = adminEmail.getText();\n            String address = adminAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality; /* <=== */ \n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address;\n"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1505,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            String email = adminEmail.getText();\n            String address = adminAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality; /* <=== */ \n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address;\n"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1506,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            String address = adminAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion; /* <=== */ \n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1507,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile; /* <=== */ \n            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);\n"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1508,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email; /* <=== */ \n            info += \"#address \" + address;\n\n            //System.out.println(info);\n\n            boolean success = admin.updateProfileInfo(info);"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1509,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address; /* <=== */ \n\n            //System.out.println(info);\n\n            boolean success = admin.updateProfileInfo(info);\n            "
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1513,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);\n\n            boolean success = admin.updateProfileInfo(info); /* <=== */ \n            \n            editBasicInfoButton.setText(\"Edit\");\n            //saveProgress.setProgress(0.5);  \n            if (success == true) showSuccessIndicator();\n            //waitFor();"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 82,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    /**\n     * Update the basic info of the administrator account \n     * @param info updated profile information given as a space separated string\n     * @return boolean if the operation was successful or not\n     */\n    public boolean updateProfileInfo(String info) /* <=== */ \n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 87,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "info.split(\"#\")",
                    "lineNumber" : 87,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "tmpInfo",
                    "lineNumber" : 87,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 88,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo) /* <=== */ \n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 90,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "s.split(\" \")",
                    "lineNumber" : 90,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "tmpData",
                    "lineNumber" : 90,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "tmpData[0]",
                    "lineNumber" : 91,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmpData[0].length() + 1",
                    "lineNumber" : 91,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmplen",
                    "lineNumber" : 91,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmplen",
                    "lineNumber" : 92,
                    "columnNumber" : 64,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 92,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"",
                    "lineNumber" : 92,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 92,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 96,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.length()",
                    "lineNumber" : 96,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.length() - 1",
                    "lineNumber" : 96,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 96,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.substring(0, column_data.length() - 1)",
                    "lineNumber" : 96,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 96,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "\"UPDATE person SET \" + column_data + \" \" + \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 98,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  + /* <=== */ \n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 98,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  + /* <=== */ \n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 103,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql ); /* <=== */ \n\n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();result = false;}\n\n        return result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.HealthData.MedicalCertificates",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "22288-22286-22290-22294-22298-22302-22306-22310-22336-22405-22430-22429-22428-22490-22494-22493-22523-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "\"BloodGroupingRh\"",
                    "lineNumber" : 371,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\n\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\"); /* <=== */ \n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 371,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\n\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\"); /* <=== */ \n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 372,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\");  /* <=== */ \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 373,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\"); /* <=== */ \n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 374,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\"); /* <=== */ \n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 375,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\"); /* <=== */ \n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";\n            "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 376,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\"); /* <=== */ \n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";\n            \n            String prefx = testID.substring(0,2);"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 377,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");         /* <=== */ \n                    \n            String tableName = \"\";\n            \n            String prefx = testID.substring(0,2);\n            boolean flg = false;"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 387,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            boolean flg = false;\n            \n            switch(prefx)        \n            {\n                case \"lv\":\n                    tableName = tables.get(prefx); /* <=== */ \n                    flg = true;\n                    break;\n                case \"bg\":\n                    tableName = tables.get(prefx);\n                    flg = true;"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 414,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,4);\n                switch(prefx)        \n                {\n                    case \"scpt\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                }    \n                    \n            }    "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 427,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tables.get(prefx)",
                    "lineNumber" : 427,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tableName",
                    "lineNumber" : 427,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tableName",
                    "lineNumber" : 449,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tableId.put(\"SeriumCreatinePhosphokinase\",\"tst_SCP_id\");\n            tableId.put(\"SeriumCreatinePhosphokinaseTotal\",\"tst_SCPT_id\");\n            tableId.put(\"UrineFullReport\",\"tst_ur_id\");\n            tableId.put(\"completeBloodCount\",\"tst_CBC_id\");\n\n            String testIdCol = tableId.get(tableName); /* <=== */ \n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" +\n                            \"FROM \"+tableName+\" \" +"
                  },
                  {
                    "sample" : "\"SELECT * \" + \"FROM \" + tableName + \" \" + \"WHERE \" + testIdCol + \" = '\" + testID + \"';\"",
                    "lineNumber" : 453,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            String testIdCol = tableId.get(tableName);\n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" + /* <=== */ \n                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 453,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            String testIdCol = tableId.get(tableName);\n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" + /* <=== */ \n                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 459,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "31506-31505-31516-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-31512-31511-31510-31509-31523-31535-31534-31533-31556-31555-31554-31553-31551-31550-31549-31548-31563-31573-31572-31578-31577-31587-31586-31614-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "\"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\"",
                    "lineNumber" : 470,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "        String id = \"\";\n        \n        try{\t\t\t\n\t\t\t\n            /////////////////// Generating the Result ID //////////////////////////////////////////////////////////////\n            String sql2 = \"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\"; /* <=== */ \n            String repID = super.dbOperator.customSelection(sql2).get(1).get(0);\n\n            char[] tmpID = repID.toCharArray();\n            int i = 0;\n            for (i = 2; i < repID.length(); i++)"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 470,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "        String id = \"\";\n        \n        try{\t\t\t\n\t\t\t\n            /////////////////// Generating the Result ID //////////////////////////////////////////////////////////////\n            String sql2 = \"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\"; /* <=== */ \n            String repID = super.dbOperator.customSelection(sql2).get(1).get(0);\n\n            char[] tmpID = repID.toCharArray();\n            int i = 0;\n            for (i = 2; i < repID.length(); i++)"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 471,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "        \n        try{\t\t\t\n\t\t\t\n            /////////////////// Generating the Result ID //////////////////////////////////////////////////////////////\n            String sql2 = \"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\";\n            String repID = super.dbOperator.customSelection(sql2).get(1).get(0); /* <=== */ \n\n            char[] tmpID = repID.toCharArray();\n            int i = 0;\n            for (i = 2; i < repID.length(); i++)\n            {"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 471,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "        \n        try{\t\t\t\n\t\t\t\n            /////////////////// Generating the Result ID //////////////////////////////////////////////////////////////\n            String sql2 = \"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\";\n            String repID = super.dbOperator.customSelection(sql2).get(1).get(0); /* <=== */ \n\n            char[] tmpID = repID.toCharArray();\n            int i = 0;\n            for (i = 2; i < repID.length(); i++)\n            {"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2).get(1)",
                    "lineNumber" : 471,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "        \n        try{\t\t\t\n\t\t\t\n            /////////////////// Generating the Result ID //////////////////////////////////////////////////////////////\n            String sql2 = \"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\";\n            String repID = super.dbOperator.customSelection(sql2).get(1).get(0); /* <=== */ \n\n            char[] tmpID = repID.toCharArray();\n            int i = 0;\n            for (i = 2; i < repID.length(); i++)\n            {"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2).get(1).get(0)",
                    "lineNumber" : 471,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "        \n        try{\t\t\t\n\t\t\t\n            /////////////////// Generating the Result ID //////////////////////////////////////////////////////////////\n            String sql2 = \"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\";\n            String repID = super.dbOperator.customSelection(sql2).get(1).get(0); /* <=== */ \n\n            char[] tmpID = repID.toCharArray();\n            int i = 0;\n            for (i = 2; i < repID.length(); i++)\n            {"
                  },
                  {
                    "sample" : "repID",
                    "lineNumber" : 471,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "        \n        try{\t\t\t\n\t\t\t\n            /////////////////// Generating the Result ID //////////////////////////////////////////////////////////////\n            String sql2 = \"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\";\n            String repID = super.dbOperator.customSelection(sql2).get(1).get(0); /* <=== */ \n\n            char[] tmpID = repID.toCharArray();\n            int i = 0;\n            for (i = 2; i < repID.length(); i++)\n            {"
                  },
                  {
                    "sample" : "repID",
                    "lineNumber" : 473,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\t\t\t\n            /////////////////// Generating the Result ID //////////////////////////////////////////////////////////////\n            String sql2 = \"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\";\n            String repID = super.dbOperator.customSelection(sql2).get(1).get(0);\n\n            char[] tmpID = repID.toCharArray(); /* <=== */ \n            int i = 0;\n            for (i = 2; i < repID.length(); i++)\n            {\n                    if  (tmpID[i] != '0') break; \n            } "
                  },
                  {
                    "sample" : "repID",
                    "lineNumber" : 475,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            String sql2 = \"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\";\n            String repID = super.dbOperator.customSelection(sql2).get(1).get(0);\n\n            char[] tmpID = repID.toCharArray();\n            int i = 0;\n            for (i = 2; i < repID.length(); i++) /* <=== */ \n            {\n                    if  (tmpID[i] != '0') break; \n            } \n\n            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 );"
                  },
                  {
                    "sample" : "repID.length()",
                    "lineNumber" : 475,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            String sql2 = \"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\";\n            String repID = super.dbOperator.customSelection(sql2).get(1).get(0);\n\n            char[] tmpID = repID.toCharArray();\n            int i = 0;\n            for (i = 2; i < repID.length(); i++) /* <=== */ \n            {\n                    if  (tmpID[i] != '0') break; \n            } \n\n            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 );"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 475,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            String sql2 = \"SELECT tst_bloodG_id FROM BloodGroupingRh WHERE tst_bloodG_id = (SELECT MAX(tst_bloodG_id) FROM BloodGroupingRh);\";\n            String repID = super.dbOperator.customSelection(sql2).get(1).get(0);\n\n            char[] tmpID = repID.toCharArray();\n            int i = 0;\n            for (i = 2; i < repID.length(); i++) /* <=== */ \n            {\n                    if  (tmpID[i] != '0') break; \n            } \n\n            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 );"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 480,
                    "columnNumber" : 79,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            for (i = 2; i < repID.length(); i++)\n            {\n                    if  (tmpID[i] != '0') break; \n            } \n\n            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 ); /* <=== */ \n            while(tmpID2.length() < 4)\n            {\n                    tmpID2 = \"0\" + tmpID2;\n            }\n            tmpID2 = \"bg\" + tmpID2;"
                  },
                  {
                    "sample" : "repID",
                    "lineNumber" : 480,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            for (i = 2; i < repID.length(); i++)\n            {\n                    if  (tmpID[i] != '0') break; \n            } \n\n            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 ); /* <=== */ \n            while(tmpID2.length() < 4)\n            {\n                    tmpID2 = \"0\" + tmpID2;\n            }\n            tmpID2 = \"bg\" + tmpID2;"
                  },
                  {
                    "sample" : "repID.substring(i, repID.length())",
                    "lineNumber" : 480,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            for (i = 2; i < repID.length(); i++)\n            {\n                    if  (tmpID[i] != '0') break; \n            } \n\n            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 ); /* <=== */ \n            while(tmpID2.length() < 4)\n            {\n                    tmpID2 = \"0\" + tmpID2;\n            }\n            tmpID2 = \"bg\" + tmpID2;"
                  },
                  {
                    "sample" : "Integer",
                    "lineNumber" : 480,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            for (i = 2; i < repID.length(); i++)\n            {\n                    if  (tmpID[i] != '0') break; \n            } \n\n            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 ); /* <=== */ \n            while(tmpID2.length() < 4)\n            {\n                    tmpID2 = \"0\" + tmpID2;\n            }\n            tmpID2 = \"bg\" + tmpID2;"
                  },
                  {
                    "sample" : "Integer.parseInt(repID.substring(i, repID.length())) + 1",
                    "lineNumber" : 480,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            for (i = 2; i < repID.length(); i++)\n            {\n                    if  (tmpID[i] != '0') break; \n            } \n\n            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 ); /* <=== */ \n            while(tmpID2.length() < 4)\n            {\n                    tmpID2 = \"0\" + tmpID2;\n            }\n            tmpID2 = \"bg\" + tmpID2;"
                  },
                  {
                    "sample" : "Integer",
                    "lineNumber" : 480,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            for (i = 2; i < repID.length(); i++)\n            {\n                    if  (tmpID[i] != '0') break; \n            } \n\n            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 ); /* <=== */ \n            while(tmpID2.length() < 4)\n            {\n                    tmpID2 = \"0\" + tmpID2;\n            }\n            tmpID2 = \"bg\" + tmpID2;"
                  },
                  {
                    "sample" : "Integer.toString(Integer.parseInt(repID.substring(i, repID.length())) + 1)",
                    "lineNumber" : 480,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            for (i = 2; i < repID.length(); i++)\n            {\n                    if  (tmpID[i] != '0') break; \n            } \n\n            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 ); /* <=== */ \n            while(tmpID2.length() < 4)\n            {\n                    tmpID2 = \"0\" + tmpID2;\n            }\n            tmpID2 = \"bg\" + tmpID2;"
                  },
                  {
                    "sample" : "tmpID2",
                    "lineNumber" : 480,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            for (i = 2; i < repID.length(); i++)\n            {\n                    if  (tmpID[i] != '0') break; \n            } \n\n            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 ); /* <=== */ \n            while(tmpID2.length() < 4)\n            {\n                    tmpID2 = \"0\" + tmpID2;\n            }\n            tmpID2 = \"bg\" + tmpID2;"
                  },
                  {
                    "sample" : "tmpID2",
                    "lineNumber" : 481,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            {\n                    if  (tmpID[i] != '0') break; \n            } \n\n            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 );\n            while(tmpID2.length() < 4) /* <=== */ \n            {\n                    tmpID2 = \"0\" + tmpID2;\n            }\n            tmpID2 = \"bg\" + tmpID2;\n            id = tmpID2;"
                  },
                  {
                    "sample" : "\"bg\" + tmpID2",
                    "lineNumber" : 485,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 );\n            while(tmpID2.length() < 4)\n            {\n                    tmpID2 = \"0\" + tmpID2;\n            }\n            tmpID2 = \"bg\" + tmpID2; /* <=== */ \n            id = tmpID2;\n            \n        }catch(Exception e){\n            \n            id = \"bg0001\"; "
                  },
                  {
                    "sample" : "tmpID2",
                    "lineNumber" : 485,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            String tmpID2 = Integer.toString(Integer.parseInt(repID.substring(i,repID.length())) + 1 );\n            while(tmpID2.length() < 4)\n            {\n                    tmpID2 = \"0\" + tmpID2;\n            }\n            tmpID2 = \"bg\" + tmpID2; /* <=== */ \n            id = tmpID2;\n            \n        }catch(Exception e){\n            \n            id = \"bg0001\"; "
                  },
                  {
                    "sample" : "tmpID2",
                    "lineNumber" : 486,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            while(tmpID2.length() < 4)\n            {\n                    tmpID2 = \"0\" + tmpID2;\n            }\n            tmpID2 = \"bg\" + tmpID2;\n            id = tmpID2; /* <=== */ \n            \n        }catch(Exception e){\n            \n            id = \"bg0001\"; \n        }"
                  },
                  {
                    "sample" : "id",
                    "lineNumber" : 486,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            while(tmpID2.length() < 4)\n            {\n                    tmpID2 = \"0\" + tmpID2;\n            }\n            tmpID2 = \"bg\" + tmpID2;\n            id = tmpID2; /* <=== */ \n            \n        }catch(Exception e){\n            \n            id = \"bg0001\"; \n        }"
                  },
                  {
                    "sample" : "\"INSERT INTO BloodGroupingRh(tst_bloodG_id, appointment_id, BloodGroup, rhesusD,date) \" + \"VALUE('\" + id + \"','\" + app_id + \"','\" + bloodG + \"','\" + rhD + \"',NOW())\"",
                    "lineNumber" : 494,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            \n            id = \"bg0001\"; \n        }\n        \n        \n        String sql2 = \"INSERT INTO BloodGroupingRh(tst_bloodG_id, appointment_id, BloodGroup, rhesusD,date) \"+ /* <=== */ \n        \"VALUE('\"+id+\"','\"+app_id+\"','\"+bloodG+\"','\"+rhD+\"',NOW())\";\n\n        try{\t\t\t\n\n                t = super.dbOperator.customInsertion(sql2);"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 494,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "            \n            id = \"bg0001\"; \n        }\n        \n        \n        String sql2 = \"INSERT INTO BloodGroupingRh(tst_bloodG_id, appointment_id, BloodGroup, rhesusD,date) \"+ /* <=== */ \n        \"VALUE('\"+id+\"','\"+app_id+\"','\"+bloodG+\"','\"+rhD+\"',NOW())\";\n\n        try{\t\t\t\n\n                t = super.dbOperator.customInsertion(sql2);"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 499,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "        String sql2 = \"INSERT INTO BloodGroupingRh(tst_bloodG_id, appointment_id, BloodGroup, rhesusD,date) \"+\n        \"VALUE('\"+id+\"','\"+app_id+\"','\"+bloodG+\"','\"+rhD+\"',NOW())\";\n\n        try{\t\t\t\n\n                t = super.dbOperator.customInsertion(sql2); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        //System.out.println(data);\n        return id;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.FinancialData.PaymentMode",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60642-60645-60648-19257-19263-15672-15692-15683-15682-15712-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "cashier",
                    "lineNumber" : 183,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadCashier(String username)\n    {\n        Stage stage = new Stage();\n        CashierController cashier = new CashierController(username); /* <=== */ \n        \n        cashier.loadProfileData(); \n        cashier.makeHistoryTable();\n        cashier.fillLineChart();\n        cashier.setPaceholders();"
                  },
                  {
                    "sample" : "cashier",
                    "lineNumber" : 183,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadCashier(String username)\n    {\n        Stage stage = new Stage();\n        CashierController cashier = new CashierController(username); /* <=== */ \n        \n        cashier.loadProfileData(); \n        cashier.makeHistoryTable();\n        cashier.fillLineChart();\n        cashier.setPaceholders();"
                  },
                  {
                    "sample" : "cashier",
                    "lineNumber" : 185,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadCashier(String username)\n    {\n        Stage stage = new Stage();\n        CashierController cashier = new CashierController(username);\n        \n        cashier.loadProfileData();  /* <=== */ \n        cashier.makeHistoryTable();\n        cashier.fillLineChart();\n        cashier.setPaceholders();\n        cashier.loadNameList();\n        cashier.addFocusListener();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 776,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "    @FXML\n    private TextField cashierNewPassword;\n    @FXML\n    private TextField cashierConfirmPassword;\n            \n    @FXML /* <=== */ \n    public void loadProfileData() \n    {\n\n        HashMap<String,String> cashierPersonalInfo =  cashier.getProfileInfo();\n\t\t"
                  },
                  {
                    "sample" : "this.cashier",
                    "lineNumber" : 780,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            \n    @FXML\n    public void loadProfileData() \n    {\n\n        HashMap<String,String> cashierPersonalInfo =  cashier.getProfileInfo(); /* <=== */ \n\t\t\n        cashierName.setText(cashierPersonalInfo.get(\"first_name\") + \" \" + cashierPersonalInfo.get(\"last_name\"));\n        cashierNIC.setText(cashierPersonalInfo.get(\"nic\"));\n        cashierNationality.setText(cashierPersonalInfo.get(\"nationality\"));\n        cashierReligion.setText(cashierPersonalInfo.get(\"religion\"));"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 51,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\n    /**\n     *\n     * @return\n     */\n    public HashMap<String,String> getProfileInfo() /* <=== */ \n\t{\n\n\t\tHashMap<String,String> infoHash = new HashMap<String,String>();\t\n\t\t\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 59,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\tHashMap<String,String> infoHash = new HashMap<String,String>();\t\n\t\t\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\tString sql = \"SELECT person.*,sys_user.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n\t\t\t\t\t\t\"WHERE (sys_user.user_id = '\"+userID+\"' AND person.user_id = '\"+userID+\"');\"; /* <=== */ \n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.customSelection(sql);\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}"
                  },
                  {
                    "sample" : "\"SELECT person.*,sys_user.* \" + \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \" + \"WHERE (sys_user.user_id = '\" + userID + \"' AND person.user_id = '\" + userID + \"');\"",
                    "lineNumber" : 57,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t{\n\n\t\tHashMap<String,String> infoHash = new HashMap<String,String>();\t\n\t\t\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\tString sql = \"SELECT person.*,sys_user.* \"+ /* <=== */ \n\t\t\t\t\t\t\"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n\t\t\t\t\t\t\"WHERE (sys_user.user_id = '\"+userID+\"' AND person.user_id = '\"+userID+\"');\";\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 57,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t{\n\n\t\tHashMap<String,String> infoHash = new HashMap<String,String>();\t\n\t\t\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\tString sql = \"SELECT person.*,sys_user.* \"+ /* <=== */ \n\t\t\t\t\t\t\"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n\t\t\t\t\t\t\"WHERE (sys_user.user_id = '\"+userID+\"' AND person.user_id = '\"+userID+\"');\";\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 63,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\t\t\t\"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n\t\t\t\t\t\t\"WHERE (sys_user.user_id = '\"+userID+\"' AND person.user_id = '\"+userID+\"');\";\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into hashmap /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<String> columns = data.get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "18218-18215-18214-18224-18223-18272-15760-15857-15856-15855-15879-15878-15897-15914-15931-15939-15930-15929-15947-15946-15959-15958-15980-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "this.paymentMethod",
                    "lineNumber" : 444,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        String hosFee = hospitalFee.getText();\n        String tot = patientTotal.getText();\n        String vatVal = vat.getText();\n        String doctorID = docID.getText();\n        \n        String paymeth = (String)paymentMethod.getValue(); /* <=== */ \n        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \"\n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        "
                  },
                  {
                    "sample" : "(String) paymentMethod.getValue()",
                    "lineNumber" : 444,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        String hosFee = hospitalFee.getText();\n        String tot = patientTotal.getText();\n        String vatVal = vat.getText();\n        String doctorID = docID.getText();\n        \n        String paymeth = (String)paymentMethod.getValue(); /* <=== */ \n        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \"\n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        "
                  },
                  {
                    "sample" : "paymeth",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        String hosFee = hospitalFee.getText();\n        String tot = patientTotal.getText();\n        String vatVal = vat.getText();\n        String doctorID = docID.getText();\n        \n        String paymeth = (String)paymentMethod.getValue(); /* <=== */ \n        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \"\n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        "
                  },
                  {
                    "sample" : "\"payment_method \" + paymeth + \",consultant_id \" + doctorID + \",patient_id \" + searchID + \",doctor_fee \" + doctorFee + \",hospital_fee \" + hosFee + \",pharmacy_fee \" + pharFee + \",\" + \"laboratory_fee \" + labFee + \",appointment_fee \" + appFee + \",vat \" + vatVal + \",total \" + tot",
                    "lineNumber" : 446,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        String vatVal = vat.getText();\n        String doctorID = docID.getText();\n        \n        String paymeth = (String)paymentMethod.getValue();\n        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \" /* <=== */ \n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        \n        String billID = cashier.bill(billInfo);\n"
                  },
                  {
                    "sample" : "billInfo",
                    "lineNumber" : 446,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        String vatVal = vat.getText();\n        String doctorID = docID.getText();\n        \n        String paymeth = (String)paymentMethod.getValue();\n        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \" /* <=== */ \n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        \n        String billID = cashier.bill(billInfo);\n"
                  },
                  {
                    "sample" : "billInfo",
                    "lineNumber" : 450,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \"\n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        \n        String billID = cashier.bill(billInfo); /* <=== */ \n\n        boolean result = cashier.removeFromTempBill(searchID);\n        \n    \n        String name = patientName.getText();"
                  },
                  {
                    "sample" : "billInfo",
                    "lineNumber" : 86,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param billInfo\n     * @return\n     */\n    public String bill(String billInfo) /* <=== */ \n\t{\n\t\t\n\t\tString result = \"0\";\n\t\n\t\ttry{\t\t\t"
                  },
                  {
                    "sample" : "billInfo",
                    "lineNumber" : 116,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\n\t\t\t//////////////////////////////// SQL for adding the row ////////////////////////////////////////////////\n\t\t\tString columnNames = \"\";\n\t\t\tString rowData = \"\";\n\t\t\t\n\t\t\tString[] field = billInfo.split(\",\"); /* <=== */ \n\t\t\t\n\t\t\tint index = 0;\n\t\t\tfor (String val : field)\n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }"
                  },
                  {
                    "sample" : "billInfo.split(\",\")",
                    "lineNumber" : 116,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\n\t\t\t//////////////////////////////// SQL for adding the row ////////////////////////////////////////////////\n\t\t\tString columnNames = \"\";\n\t\t\tString rowData = \"\";\n\t\t\t\n\t\t\tString[] field = billInfo.split(\",\"); /* <=== */ \n\t\t\t\n\t\t\tint index = 0;\n\t\t\tfor (String val : field)\n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }"
                  },
                  {
                    "sample" : "field",
                    "lineNumber" : 116,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\n\t\t\t//////////////////////////////// SQL for adding the row ////////////////////////////////////////////////\n\t\t\tString columnNames = \"\";\n\t\t\tString rowData = \"\";\n\t\t\t\n\t\t\tString[] field = billInfo.split(\",\"); /* <=== */ \n\t\t\t\n\t\t\tint index = 0;\n\t\t\tfor (String val : field)\n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }"
                  },
                  {
                    "sample" : "val",
                    "lineNumber" : 119,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\tString rowData = \"\";\n\t\t\t\n\t\t\tString[] field = billInfo.split(\",\");\n\t\t\t\n\t\t\tint index = 0;\n\t\t\tfor (String val : field) /* <=== */ \n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }\n\t\t\t\t\n\t\t\t\t//// Order of column feilds in the input string!!! ////\n\t\t\t\tcolumnNames += val.split(\" \")[0];"
                  },
                  {
                    "sample" : "val",
                    "lineNumber" : 124,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\tfor (String val : field)\n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }\n\t\t\t\t\n\t\t\t\t//// Order of column feilds in the input string!!! ////\n\t\t\t\tcolumnNames += val.split(\" \")[0]; /* <=== */ \n\t\t\t\tif (index < 3) {rowData = rowData + \"'\";}\n\t\t\t\trowData += val.split(\" \")[1];\n\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;"
                  },
                  {
                    "sample" : "val",
                    "lineNumber" : 126,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }\n\t\t\t\t\n\t\t\t\t//// Order of column feilds in the input string!!! ////\n\t\t\t\tcolumnNames += val.split(\" \")[0];\n\t\t\t\tif (index < 3) {rowData = rowData + \"'\";}\n\t\t\t\trowData += val.split(\" \")[1]; /* <=== */ \n\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 132,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 132,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 132,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);"
                  },
                  {
                    "sample" : "\",'\" + tmpID2 + \"','\" + date + \"'\"",
                    "lineNumber" : 135,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\"; /* <=== */ \n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\";"
                  },
                  {
                    "sample" : "rowData",
                    "lineNumber" : 135,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\"; /* <=== */ \n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\";"
                  },
                  {
                    "sample" : "\"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData + \");\"",
                    "lineNumber" : 140,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\"; /* <=== */ \n                        System.out.println(sql);\n\t\t\t/////////////////////////////// Adding data to database /////////////////////////////////////////////////\n\t\t\tboolean res = super.dbOperator.customInsertion(sql);\n\t\t\tif (res == true ) result = tmpID2;\n\t"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 140,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\"; /* <=== */ \n                        System.out.println(sql);\n\t\t\t/////////////////////////////// Adding data to database /////////////////////////////////////////////////\n\t\t\tboolean res = super.dbOperator.customInsertion(sql);\n\t\t\tif (res == true ) result = tmpID2;\n\t"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 143,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\";\n                        System.out.println(sql);\n\t\t\t/////////////////////////////// Adding data to database /////////////////////////////////////////////////\n\t\t\tboolean res = super.dbOperator.customInsertion(sql); /* <=== */ \n\t\t\tif (res == true ) result = tmpID2;\n\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\t\n\t\treturn result;\t"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "27086-66795-66798-27085-27183-21355-23418-23417-23424-23432-23423-23422-23451-23450-23477-59292-59361-59360-59359-59397-59394-59393-59403-59402",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1102,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 723,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n\tpublic boolean prescribe(String drugs, String tests, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "this.slmcRegNo",
                    "lineNumber" : 747,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 747,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 748,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 748,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 748,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests",
                    "lineNumber" : 753,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 753,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 754,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;\n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t /* <=== */ \n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 303,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tmetaData.add(TableColumnNull);\n\t\tmetaData.add(TableColumnKeys);\n\t\treturn metaData;\n\t}\n\t\n\tpublic boolean addTableRow(String table,String tableData) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\tString sql = \"SELECT * FROM \" + table + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableData.split(\",\")",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit",
                    "lineNumber" : 319,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit[i]",
                    "lineNumber" : 328,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "i + 1",
                    "lineNumber" : 328,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 328,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  },
                  {
                    "sample" : "stmt.executeUpdate()",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-60433-60435-23970-27853-21349-21872-21869-59788-59805-59804-59825-59822-59821-59820-59830-59829",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 112,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData();  /* <=== */ \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 113,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable(); /* <=== */ \n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();\n        doctor.loadNameList();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 1298,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        availabilityPagination.setPageCount((dataSize / 8 + 1));\n        availabilityPagination.setPageFactory(this::createPage);\n    }\n    \n    @FXML /* <=== */ \n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable();\n        createPagination(currentTimeTableData0.size()-1);\n    }"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1301,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    }\n    \n    @FXML\n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable(); /* <=== */ \n        createPagination(currentTimeTableData0.size()-1);\n    }\n    \n    @FXML\n    private Button editBasicInfoButton;"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 200,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "    \n            return messages;\n        }\n        */\n        \n\tpublic ArrayList<ArrayList<String>> doctorTimeTable() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 206,
                    "columnNumber" : 159,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 206,
                    "columnNumber" : 93,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  }
                ]
              },
              {
                "pathId" : "53540-53539-53538-53537-53842-53841-53846-53851-53856-53871-48581-48586-48585-48609-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "this.patientLastName",
                    "lineNumber" : 534,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        } \n        \n        try{\n        \n            String fname = patientFirstName.getText().replaceAll(\"\\\\s+$\", \"\");\n            String lname = patientLastName.getText().replaceAll(\"\\\\s+$\", \"\"); /* <=== */ \n\n            String gender = \"\";\n            String tmpGender = (String)patientGender.getSelectionModel().getSelectedItem();\n            if (tmpGender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}"
                  },
                  {
                    "sample" : "getText()",
                    "lineNumber" : 534,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        } \n        \n        try{\n        \n            String fname = patientFirstName.getText().replaceAll(\"\\\\s+$\", \"\");\n            String lname = patientLastName.getText().replaceAll(\"\\\\s+$\", \"\"); /* <=== */ \n\n            String gender = \"\";\n            String tmpGender = (String)patientGender.getSelectionModel().getSelectedItem();\n            if (tmpGender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}"
                  },
                  {
                    "sample" : "replaceAll(\"\\\\s+$\", \"\")",
                    "lineNumber" : 534,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        } \n        \n        try{\n        \n            String fname = patientFirstName.getText().replaceAll(\"\\\\s+$\", \"\");\n            String lname = patientLastName.getText().replaceAll(\"\\\\s+$\", \"\"); /* <=== */ \n\n            String gender = \"\";\n            String tmpGender = (String)patientGender.getSelectionModel().getSelectedItem();\n            if (tmpGender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}"
                  },
                  {
                    "sample" : "lname",
                    "lineNumber" : 534,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        } \n        \n        try{\n        \n            String fname = patientFirstName.getText().replaceAll(\"\\\\s+$\", \"\");\n            String lname = patientLastName.getText().replaceAll(\"\\\\s+$\", \"\"); /* <=== */ \n\n            String gender = \"\";\n            String tmpGender = (String)patientGender.getSelectionModel().getSelectedItem();\n            if (tmpGender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}"
                  },
                  {
                    "sample" : "\"',last_name = '\" + lname",
                    "lineNumber" : 604,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',gender = '\" + gender;\n                    patientInfo += \"',date_of_birth = '\" + dateOfBirth;\n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname; /* <=== */ \n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";\n\n                    //System.out.println(patientInfo);"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 604,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',gender = '\" + gender;\n                    patientInfo += \"',date_of_birth = '\" + dateOfBirth;\n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname; /* <=== */ \n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";\n\n                    //System.out.println(patientInfo);"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 605,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',date_of_birth = '\" + dateOfBirth;\n                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email; /* <=== */ \n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";\n\n                    //System.out.println(patientInfo);\n                    boolean result = receptionist.updatePatientInfo(patientSearchBox.getText(),patientInfo);"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 606,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',address = '\" + address;\n                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\"; /* <=== */ \n                    patientInfo += \",religion = \" + \"NULL\";\n\n                    //System.out.println(patientInfo);\n                    boolean result = receptionist.updatePatientInfo(patientSearchBox.getText(),patientInfo);\n                    if (result == true) "
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 607,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',mobile = '\" + mobile;\n                    patientInfo += \"',first_name = '\" + fname;\n                    patientInfo += \"',last_name = '\" + lname;\n                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\"; /* <=== */ \n\n                    //System.out.println(patientInfo);\n                    boolean result = receptionist.updatePatientInfo(patientSearchBox.getText(),patientInfo);\n                    if (result == true) \n                        showSuccessIndicator();"
                  },
                  {
                    "sample" : "patientInfo",
                    "lineNumber" : 610,
                    "columnNumber" : 96,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientInfo += \"',email = '\" + email;\n                    patientInfo += \"',nationality = \" + \"NULL\";\n                    patientInfo += \",religion = \" + \"NULL\";\n\n                    //System.out.println(patientInfo);\n                    boolean result = receptionist.updatePatientInfo(patientSearchBox.getText(),patientInfo); /* <=== */ \n                    if (result == true) \n                        showSuccessIndicator();\n                \n                }    \n                    "
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 263,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\treturn value;\n\t}\n        \n        \n        public boolean updatePatientInfo(String patientID,String info) /* <=== */ \n        {\n            String sql =    \"UPDATE person SET \"+info+\" \"+\n                            \"WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '\"+patientID+\"');\";\n\n"
                  },
                  {
                    "sample" : "\"UPDATE person SET \" + info + \" \" + \"WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '\" + patientID + \"');\"",
                    "lineNumber" : 265,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t}\n        \n        \n        public boolean updatePatientInfo(String patientID,String info)\n        {\n            String sql =    \"UPDATE person SET \"+info+\" \"+ /* <=== */ \n                            \"WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '\"+patientID+\"');\";\n\n\n            boolean result = true;\n            try{\t\t\t"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 265,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t}\n        \n        \n        public boolean updatePatientInfo(String patientID,String info)\n        {\n            String sql =    \"UPDATE person SET \"+info+\" \"+ /* <=== */ \n                            \"WHERE person_id = (SELECT person_id FROM patient WHERE patient_id = '\"+patientID+\"');\";\n\n\n            boolean result = true;\n            try{\t\t\t"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 272,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\n            boolean result = true;\n            try{\t\t\t\n                    //System.out.println(sql);\n                    result = super.dbOperator.customInsertion(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            //System.out.println(data);\n            return result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "27086-66795-66798-27085-27183-21355-23418-23417-23424-23432-23423-23422-23451-23450-23477-59292-59361-59360-59359-59397-59394-59393-59403-59402",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1102,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 723,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n\tpublic boolean prescribe(String drugs, String tests, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "this.slmcRegNo",
                    "lineNumber" : 747,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 747,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 748,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 748,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 748,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests",
                    "lineNumber" : 753,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 753,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 754,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;\n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t /* <=== */ \n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 303,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tmetaData.add(TableColumnNull);\n\t\tmetaData.add(TableColumnKeys);\n\t\treturn metaData;\n\t}\n\t\n\tpublic boolean addTableRow(String table,String tableData) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\tString sql = \"SELECT * FROM \" + table + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableData.split(\",\")",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit",
                    "lineNumber" : 319,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit[i]",
                    "lineNumber" : 328,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "i + 1",
                    "lineNumber" : 328,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 328,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  },
                  {
                    "sample" : "stmt.executeUpdate()",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-60433-60435-23970-27853-21349-21872-21869-59788-59805-59804-59825-59822-59821-59820-59830-59829",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 112,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData();  /* <=== */ \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 113,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable(); /* <=== */ \n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();\n        doctor.loadNameList();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 1298,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        availabilityPagination.setPageCount((dataSize / 8 + 1));\n        availabilityPagination.setPageFactory(this::createPage);\n    }\n    \n    @FXML /* <=== */ \n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable();\n        createPagination(currentTimeTableData0.size()-1);\n    }"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1301,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    }\n    \n    @FXML\n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable(); /* <=== */ \n        createPagination(currentTimeTableData0.size()-1);\n    }\n    \n    @FXML\n    private Button editBasicInfoButton;"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 200,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "    \n            return messages;\n        }\n        */\n        \n\tpublic ArrayList<ArrayList<String>> doctorTimeTable() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 206,
                    "columnNumber" : 159,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 206,
                    "columnNumber" : 93,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  }
                ]
              },
              {
                "pathId" : "55902-55981-55980-55979-56028-56026-56025-56030-56041-47954-47968-47967-47966-47986-47985-47993-47992-47991-48000-47998-47997-48015-48014-48006-48005-48026-48025-48024-48022-48021-48020-48031-48030-48049-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "this.receptionistEmail",
                    "lineNumber" : 1235,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            receptionistNIC.setDisable(true);\n            receptionistGender.setDisable(true);\n            receptionistNationality.setDisable(true);\n            receptionistReligion.setDisable(true);\n            receptionistMobile.setDisable(true);\n            receptionistEmail.setDisable(true); /* <=== */ \n            receptionistAddress.setDisable(true);\n            receptionistDOB.setDisable(true);\n            \n            String info = \"\";\n\t\t\t\t"
                  },
                  {
                    "sample" : "this.receptionistEmail",
                    "lineNumber" : 1249,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            else {gender = \"f\";}\n            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)receptionistNationality.getText();\n            String religion = (String)receptionistReligion.getText();\n            String mobile = receptionistMobile.getText();\n            String email = receptionistEmail.getText(); /* <=== */ \n            String address = receptionistAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;"
                  },
                  {
                    "sample" : "getText()",
                    "lineNumber" : 1249,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            else {gender = \"f\";}\n            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)receptionistNationality.getText();\n            String religion = (String)receptionistReligion.getText();\n            String mobile = receptionistMobile.getText();\n            String email = receptionistEmail.getText(); /* <=== */ \n            String address = receptionistAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;"
                  },
                  {
                    "sample" : "email",
                    "lineNumber" : 1249,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            else {gender = \"f\";}\n            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)receptionistNationality.getText();\n            String religion = (String)receptionistReligion.getText();\n            String mobile = receptionistMobile.getText();\n            String email = receptionistEmail.getText(); /* <=== */ \n            String address = receptionistAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;"
                  },
                  {
                    "sample" : "email",
                    "lineNumber" : 1257,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email; /* <=== */ \n            info += \"#address \" + address;\n\n            //System.out.println(info);\n\n            boolean success = receptionist.updateProfileInfo(info);"
                  },
                  {
                    "sample" : "\"#email \" + email",
                    "lineNumber" : 1257,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email; /* <=== */ \n            info += \"#address \" + address;\n\n            //System.out.println(info);\n\n            boolean success = receptionist.updateProfileInfo(info);"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1257,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email; /* <=== */ \n            info += \"#address \" + address;\n\n            //System.out.println(info);\n\n            boolean success = receptionist.updateProfileInfo(info);"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1258,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address; /* <=== */ \n\n            //System.out.println(info);\n\n            boolean success = receptionist.updateProfileInfo(info);\n            "
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1262,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);\n\n            boolean success = receptionist.updateProfileInfo(info); /* <=== */ \n            \n            editBasicInfoButton.setText(\"Edit\");\n            //saveProgress.setProgress(0.5);  \n            if (success == true) showSuccessIndicator();\n            //waitFor();"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 73,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t//System.out.println(infoHash);\n\t\treturn infoHash;\n\t}\n        \n        public boolean updateProfileInfo(String info) /* <=== */ \n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 78,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "info.split(\"#\")",
                    "lineNumber" : 78,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "tmpInfo",
                    "lineNumber" : 78,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 79,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo) /* <=== */ \n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 81,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "s.split(\" \")",
                    "lineNumber" : 81,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "tmpData",
                    "lineNumber" : 81,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "tmpData[0]",
                    "lineNumber" : 82,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmpData[0].length() + 1",
                    "lineNumber" : 82,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmplen",
                    "lineNumber" : 82,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmplen",
                    "lineNumber" : 83,
                    "columnNumber" : 64,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 83,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"",
                    "lineNumber" : 83,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 83,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 87,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.length()",
                    "lineNumber" : 87,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.length() - 1",
                    "lineNumber" : 87,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 87,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.substring(0, column_data.length() - 1)",
                    "lineNumber" : 87,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 87,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "\"UPDATE person SET \" + column_data + \" \" + \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 89,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  + /* <=== */ \n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 89,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  + /* <=== */ \n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 94,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql ); /* <=== */ \n\n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();result = false;}\n\n        return result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalCharacteristics.Religion/ReligiousBeliefs",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "27086-66795-66798-27085-27183-21355-23418-23417-23424-23432-23423-23422-23451-23450-23477-59292-59361-59360-59359-59397-59394-59393-59403-59402",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1102,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 723,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n\tpublic boolean prescribe(String drugs, String tests, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "this.slmcRegNo",
                    "lineNumber" : 747,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 747,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 748,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 748,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 748,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests",
                    "lineNumber" : 753,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 753,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 754,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;\n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t /* <=== */ \n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 303,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tmetaData.add(TableColumnNull);\n\t\tmetaData.add(TableColumnKeys);\n\t\treturn metaData;\n\t}\n\t\n\tpublic boolean addTableRow(String table,String tableData) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\tString sql = \"SELECT * FROM \" + table + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableData.split(\",\")",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit",
                    "lineNumber" : 319,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit[i]",
                    "lineNumber" : 328,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "i + 1",
                    "lineNumber" : 328,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 328,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  },
                  {
                    "sample" : "stmt.executeUpdate()",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-60433-60435-23970-27853-21349-21872-21869-59788-59805-59804-59825-59822-59821-59820-59830-59829",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 112,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData();  /* <=== */ \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 113,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable(); /* <=== */ \n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();\n        doctor.loadNameList();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 1298,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        availabilityPagination.setPageCount((dataSize / 8 + 1));\n        availabilityPagination.setPageFactory(this::createPage);\n    }\n    \n    @FXML /* <=== */ \n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable();\n        createPagination(currentTimeTableData0.size()-1);\n    }"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1301,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    }\n    \n    @FXML\n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable(); /* <=== */ \n        createPagination(currentTimeTableData0.size()-1);\n    }\n    \n    @FXML\n    private Button editBasicInfoButton;"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 200,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "    \n            return messages;\n        }\n        */\n        \n\tpublic ArrayList<ArrayList<String>> doctorTimeTable() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 206,
                    "columnNumber" : 159,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 206,
                    "columnNumber" : 93,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  }
                ]
              },
              {
                "pathId" : "55892-55967-55964-55963-56018-56016-56015-56020-56025-56030-56041-47954-47968-47967-47966-47986-47985-47993-47992-47991-48000-47998-47997-48015-48014-48006-48005-48026-48025-48024-48022-48021-48020-48031-48030-48049-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "this.receptionistReligion",
                    "lineNumber" : 1233,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        {\n            receptionistName.setDisable(true);\n            receptionistNIC.setDisable(true);\n            receptionistGender.setDisable(true);\n            receptionistNationality.setDisable(true);\n            receptionistReligion.setDisable(true); /* <=== */ \n            receptionistMobile.setDisable(true);\n            receptionistEmail.setDisable(true);\n            receptionistAddress.setDisable(true);\n            receptionistDOB.setDisable(true);\n            "
                  },
                  {
                    "sample" : "this.receptionistReligion",
                    "lineNumber" : 1247,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            String gender = (String)receptionistGender.getSelectionModel().getSelectedItem();\n            if (gender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}\n            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)receptionistNationality.getText();\n            String religion = (String)receptionistReligion.getText(); /* <=== */ \n            String mobile = receptionistMobile.getText();\n            String email = receptionistEmail.getText();\n            String address = receptionistAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];"
                  },
                  {
                    "sample" : "(String) receptionistReligion.getText()",
                    "lineNumber" : 1247,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            String gender = (String)receptionistGender.getSelectionModel().getSelectedItem();\n            if (gender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}\n            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)receptionistNationality.getText();\n            String religion = (String)receptionistReligion.getText(); /* <=== */ \n            String mobile = receptionistMobile.getText();\n            String email = receptionistEmail.getText();\n            String address = receptionistAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];"
                  },
                  {
                    "sample" : "religion",
                    "lineNumber" : 1247,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            String gender = (String)receptionistGender.getSelectionModel().getSelectedItem();\n            if (gender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}\n            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)receptionistNationality.getText();\n            String religion = (String)receptionistReligion.getText(); /* <=== */ \n            String mobile = receptionistMobile.getText();\n            String email = receptionistEmail.getText();\n            String address = receptionistAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];"
                  },
                  {
                    "sample" : "religion",
                    "lineNumber" : 1255,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            String address = receptionistAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion; /* <=== */ \n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);"
                  },
                  {
                    "sample" : "\"#religion \" + religion",
                    "lineNumber" : 1255,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            String address = receptionistAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion; /* <=== */ \n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1255,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            String address = receptionistAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion; /* <=== */ \n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1256,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile; /* <=== */ \n            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);\n"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1257,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email; /* <=== */ \n            info += \"#address \" + address;\n\n            //System.out.println(info);\n\n            boolean success = receptionist.updateProfileInfo(info);"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1258,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address; /* <=== */ \n\n            //System.out.println(info);\n\n            boolean success = receptionist.updateProfileInfo(info);\n            "
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 1262,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);\n\n            boolean success = receptionist.updateProfileInfo(info); /* <=== */ \n            \n            editBasicInfoButton.setText(\"Edit\");\n            //saveProgress.setProgress(0.5);  \n            if (success == true) showSuccessIndicator();\n            //waitFor();"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 73,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t//System.out.println(infoHash);\n\t\treturn infoHash;\n\t}\n        \n        public boolean updateProfileInfo(String info) /* <=== */ \n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 78,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "info.split(\"#\")",
                    "lineNumber" : 78,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "tmpInfo",
                    "lineNumber" : 78,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 79,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo) /* <=== */ \n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 81,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "s.split(\" \")",
                    "lineNumber" : 81,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "tmpData",
                    "lineNumber" : 81,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "tmpData[0]",
                    "lineNumber" : 82,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmpData[0].length() + 1",
                    "lineNumber" : 82,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmplen",
                    "lineNumber" : 82,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmplen",
                    "lineNumber" : 83,
                    "columnNumber" : 64,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 83,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"",
                    "lineNumber" : 83,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 83,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 87,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.length()",
                    "lineNumber" : 87,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.length() - 1",
                    "lineNumber" : 87,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 87,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.substring(0, column_data.length() - 1)",
                    "lineNumber" : 87,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 87,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "\"UPDATE person SET \" + column_data + \" \" + \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 89,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  + /* <=== */ \n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 89,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  + /* <=== */ \n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 94,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql ); /* <=== */ \n\n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();result = false;}\n\n        return result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountName",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "27086-66795-66798-27085-27183-21355-23418-23417-23424-23432-23423-23422-23451-23450-23477-59292-59361-59360-59359-59397-59394-59393-59403-59402",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1102,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 723,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n\tpublic boolean prescribe(String drugs, String tests, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "this.slmcRegNo",
                    "lineNumber" : 747,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 747,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 748,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 748,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 748,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests",
                    "lineNumber" : 753,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 753,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 754,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;\n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t /* <=== */ \n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 303,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tmetaData.add(TableColumnNull);\n\t\tmetaData.add(TableColumnKeys);\n\t\treturn metaData;\n\t}\n\t\n\tpublic boolean addTableRow(String table,String tableData) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\tString sql = \"SELECT * FROM \" + table + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableData.split(\",\")",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit",
                    "lineNumber" : 319,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit[i]",
                    "lineNumber" : 328,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "i + 1",
                    "lineNumber" : 328,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 328,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  },
                  {
                    "sample" : "stmt.executeUpdate()",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "19012-19015-19020-58458-58457-58455-58549-62451-63437-63450-66795-66798-63449-70558-58549-58595-62447-63215-63206-63205-63230-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "user",
                    "lineNumber" : 677,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "    \n    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(cashier); /* <=== */ \n        user.load();\n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 677,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "    \n    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(cashier); /* <=== */ \n        user.load();\n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 678,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(cashier);\n        user.load(); /* <=== */ \n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();\n        }"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 90,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "            stage.close();\n        }\n    }\n    \n    \n    public void load() /* <=== */ \n    {\n        fillUser();\n    }\n    \n    "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "    }\n    \n    \n    public void load()\n    {\n        fillUser(); /* <=== */ \n    }\n    \n    \n    \n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 47,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "    \n    @FXML private ImageView profPic;\n    @FXML private Label userN;\n    @FXML private Label userTAndN;\n    \n    public void fillUser() /* <=== */ \n    {\n        HashMap<String,String> log = new HashMap<String,String>();\n        log.clear();\n        log.put(\"doctor\",\"Doctor\");\n        log.put(\"lab_assistant\",\"Lab Assistant\");"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 58,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        log.put(\"cashier\",\"Cashier\");\n        log.put(\"pharmacist\",\"Pharmacist\");\n        log.put(\"receptionist\",\"Receptionist\");\n        log.put(\"admin\",\"Admin\");\n            \n        ArrayList<ArrayList<String>> data = sysUser.getCurrentUserNameAndID(); /* <=== */ \n        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 353,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID() /* <=== */ \n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 358,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "        public ArrayList<ArrayList<String>> getCurrentUserNameAndID()\n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\"; /* <=== */ \n\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 364,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "this.dbOperator",
                    "lineNumber" : 364,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 353,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID() /* <=== */ \n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 58,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        log.put(\"cashier\",\"Cashier\");\n        log.put(\"pharmacist\",\"Pharmacist\");\n        log.put(\"receptionist\",\"Receptionist\");\n        log.put(\"admin\",\"Admin\");\n            \n        ArrayList<ArrayList<String>> data = sysUser.getCurrentUserNameAndID(); /* <=== */ \n        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 64,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{\n            String image = sysUser.getProfilePic(); /* <=== */ \n            img = new Image(getClass().getResource(\"/imgs/profilePics/\"+image).toString(), true);\n        }catch(Exception e){\n            img = new Image(getClass().getResource(\"/imgs/noUser.png\").toString(), true);\n        }\n        profPic.setImage(img);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 254,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            }catch(ClassNotFoundException | SQLException e){}\t\n            \n            return result;\n\t}\n        \n        public String getProfilePic() /* <=== */ \n\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+\n                            \"profile_pic \"+\n                            \"FROM sys_user \"+"
                  },
                  {
                    "sample" : "this.username",
                    "lineNumber" : 260,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+\n                            \"profile_pic \"+\n                            \"FROM sys_user \"+\n                            \"WHERE sys_user.user_name = '\"+this.username+\"';\"; /* <=== */ \n\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n"
                  },
                  {
                    "sample" : "\"SELECT \" + \"profile_pic \" + \"FROM sys_user \" + \"WHERE sys_user.user_name = '\" + this.username + \"';\"",
                    "lineNumber" : 257,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        public String getProfilePic()\n\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"profile_pic \"+\n                            \"FROM sys_user \"+\n                            \"WHERE sys_user.user_name = '\"+this.username+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 257,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        public String getProfilePic()\n\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"profile_pic \"+\n                            \"FROM sys_user \"+\n                            \"WHERE sys_user.user_name = '\"+this.username+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 266,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n                    image = data.get(1).get(0);\n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            //System.out.println(data);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-60433-60435-23970-27853-21349-21872-21869-59788-59805-59804-59825-59822-59821-59820-59830-59829",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 112,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData();  /* <=== */ \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 113,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable(); /* <=== */ \n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();\n        doctor.loadNameList();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 1298,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        availabilityPagination.setPageCount((dataSize / 8 + 1));\n        availabilityPagination.setPageFactory(this::createPage);\n    }\n    \n    @FXML /* <=== */ \n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable();\n        createPagination(currentTimeTableData0.size()-1);\n    }"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1301,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    }\n    \n    @FXML\n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable(); /* <=== */ \n        createPagination(currentTimeTableData0.size()-1);\n    }\n    \n    @FXML\n    private Button editBasicInfoButton;"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 200,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "    \n            return messages;\n        }\n        */\n        \n\tpublic ArrayList<ArrayList<String>> doctorTimeTable() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 206,
                    "columnNumber" : 159,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 206,
                    "columnNumber" : 93,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  }
                ]
              },
              {
                "pathId" : "58387-58390-58396-62214-62223-57591-70402-62223-62228-57587-70400-62228-62236-57579-70396-62236-62243-57583-70398-62243-62250-57575-70394-62250-62257-57595-57884-57889-62256-62255-62264-63469-63474-63473-63499-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "newMessage",
                    "lineNumber" : 157,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessagesController.java",
                    "excerpt" : "    {\n        AllMessages message = (AllMessages)messagesTable.getSelectionModel().getSelectedItem();\n        //System.out.println(message.getMessage());\n        \n        Stage stage= new Stage();\n        ReadMessageController newMessage = new ReadMessageController(message,newSysUser); /* <=== */ \n        newMessage.fillMessage();\n        Scene scene = new Scene(newMessage);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
                  },
                  {
                    "sample" : "newMessage",
                    "lineNumber" : 157,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessagesController.java",
                    "excerpt" : "    {\n        AllMessages message = (AllMessages)messagesTable.getSelectionModel().getSelectedItem();\n        //System.out.println(message.getMessage());\n        \n        Stage stage= new Stage();\n        ReadMessageController newMessage = new ReadMessageController(message,newSysUser); /* <=== */ \n        newMessage.fillMessage();\n        Scene scene = new Scene(newMessage);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
                  },
                  {
                    "sample" : "newMessage",
                    "lineNumber" : 158,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessagesController.java",
                    "excerpt" : "        AllMessages message = (AllMessages)messagesTable.getSelectionModel().getSelectedItem();\n        //System.out.println(message.getMessage());\n        \n        Stage stage= new Stage();\n        ReadMessageController newMessage = new ReadMessageController(message,newSysUser);\n        newMessage.fillMessage(); /* <=== */ \n        Scene scene = new Scene(newMessage);\n        stage.setScene(scene);\n        \n        Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n        //set Stage boundaries to visible bounds of the main screen"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 132,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "    \n    @FXML private TextArea messagetxt;\n    \n    private Label msgID = new Label();\n    \n    public void fillMessage() /* <=== */ \n    {\n        \n        String name = message.getName() + \" (\" + message.getType() + \")\";\n        String dt = message.getDate();\n        String sbjct = message.getSubject();"
                  },
                  {
                    "sample" : "this.message",
                    "lineNumber" : 135,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "    private Label msgID = new Label();\n    \n    public void fillMessage()\n    {\n        \n        String name = message.getName() + \" (\" + message.getType() + \")\"; /* <=== */ \n        String dt = message.getDate();\n        String sbjct = message.getSubject();\n        String msg = message.getMessage();\n        String msgid = message.getID();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 120,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessages.java",
                    "excerpt" : "     public void setName(String string) \n     {\n         this.name = string;\n     }\n\n     public String getName()  /* <=== */ \n     {\n         return this.name;\n     }\n     \n     public void setID(String string) "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 120,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessages.java",
                    "excerpt" : "     public void setName(String string) \n     {\n         this.name = string;\n     }\n\n     public String getName()  /* <=== */ \n     {\n         return this.name;\n     }\n     \n     public void setID(String string) "
                  },
                  {
                    "sample" : "this.message",
                    "lineNumber" : 135,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "    private Label msgID = new Label();\n    \n    public void fillMessage()\n    {\n        \n        String name = message.getName() + \" (\" + message.getType() + \")\"; /* <=== */ \n        String dt = message.getDate();\n        String sbjct = message.getSubject();\n        String msg = message.getMessage();\n        String msgid = message.getID();\n        "
                  },
                  {
                    "sample" : "this.message",
                    "lineNumber" : 135,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "    private Label msgID = new Label();\n    \n    public void fillMessage()\n    {\n        \n        String name = message.getName() + \" (\" + message.getType() + \")\"; /* <=== */ \n        String dt = message.getDate();\n        String sbjct = message.getSubject();\n        String msg = message.getMessage();\n        String msgid = message.getID();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 110,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessages.java",
                    "excerpt" : "     public void setType(String string) \n     {\n         this.type = string;\n     }\n\n     public String getType()  /* <=== */ \n     {\n         return this.type;\n     }\n     \n     public void setName(String string) "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 110,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessages.java",
                    "excerpt" : "     public void setType(String string) \n     {\n         this.type = string;\n     }\n\n     public String getType()  /* <=== */ \n     {\n         return this.type;\n     }\n     \n     public void setName(String string) "
                  },
                  {
                    "sample" : "this.message",
                    "lineNumber" : 135,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "    private Label msgID = new Label();\n    \n    public void fillMessage()\n    {\n        \n        String name = message.getName() + \" (\" + message.getType() + \")\"; /* <=== */ \n        String dt = message.getDate();\n        String sbjct = message.getSubject();\n        String msg = message.getMessage();\n        String msgid = message.getID();\n        "
                  },
                  {
                    "sample" : "this.message",
                    "lineNumber" : 136,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "    \n    public void fillMessage()\n    {\n        \n        String name = message.getName() + \" (\" + message.getType() + \")\";\n        String dt = message.getDate(); /* <=== */ \n        String sbjct = message.getSubject();\n        String msg = message.getMessage();\n        String msgid = message.getID();\n        \n        newSysUser.setMessageRead(msgid);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 90,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessages.java",
                    "excerpt" : "     public void setDate(String string) \n     {\n         this.date = string;\n     }\n\n     public String getDate()  /* <=== */ \n     {\n         return this.date;\n     }\n     \n     public void setSubject(String string) "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 90,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessages.java",
                    "excerpt" : "     public void setDate(String string) \n     {\n         this.date = string;\n     }\n\n     public String getDate()  /* <=== */ \n     {\n         return this.date;\n     }\n     \n     public void setSubject(String string) "
                  },
                  {
                    "sample" : "this.message",
                    "lineNumber" : 136,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "    \n    public void fillMessage()\n    {\n        \n        String name = message.getName() + \" (\" + message.getType() + \")\";\n        String dt = message.getDate(); /* <=== */ \n        String sbjct = message.getSubject();\n        String msg = message.getMessage();\n        String msgid = message.getID();\n        \n        newSysUser.setMessageRead(msgid);"
                  },
                  {
                    "sample" : "this.message",
                    "lineNumber" : 137,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "    public void fillMessage()\n    {\n        \n        String name = message.getName() + \" (\" + message.getType() + \")\";\n        String dt = message.getDate();\n        String sbjct = message.getSubject(); /* <=== */ \n        String msg = message.getMessage();\n        String msgid = message.getID();\n        \n        newSysUser.setMessageRead(msgid);\n        msgID.setText(msgid);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 100,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessages.java",
                    "excerpt" : "     public void setSubject(String string) \n     {\n         this.subject = string;\n     }\n\n     public String getSubject()  /* <=== */ \n     {\n         return this.subject;\n     }\n     \n     public void setType(String string) "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 100,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessages.java",
                    "excerpt" : "     public void setSubject(String string) \n     {\n         this.subject = string;\n     }\n\n     public String getSubject()  /* <=== */ \n     {\n         return this.subject;\n     }\n     \n     public void setType(String string) "
                  },
                  {
                    "sample" : "this.message",
                    "lineNumber" : 137,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "    public void fillMessage()\n    {\n        \n        String name = message.getName() + \" (\" + message.getType() + \")\";\n        String dt = message.getDate();\n        String sbjct = message.getSubject(); /* <=== */ \n        String msg = message.getMessage();\n        String msgid = message.getID();\n        \n        newSysUser.setMessageRead(msgid);\n        msgID.setText(msgid);"
                  },
                  {
                    "sample" : "this.message",
                    "lineNumber" : 138,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "    {\n        \n        String name = message.getName() + \" (\" + message.getType() + \")\";\n        String dt = message.getDate();\n        String sbjct = message.getSubject();\n        String msg = message.getMessage(); /* <=== */ \n        String msgid = message.getID();\n        \n        newSysUser.setMessageRead(msgid);\n        msgID.setText(msgid);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessages.java",
                    "excerpt" : "     public void setMessage(String string) \n     {\n         this.message = string;\n     }\n\n     public String getMessage()  /* <=== */ \n     {\n         return this.message;\n     }\n     \n     public void setDate(String string) "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 80,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessages.java",
                    "excerpt" : "     public void setMessage(String string) \n     {\n         this.message = string;\n     }\n\n     public String getMessage()  /* <=== */ \n     {\n         return this.message;\n     }\n     \n     public void setDate(String string) "
                  },
                  {
                    "sample" : "this.message",
                    "lineNumber" : 138,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "    {\n        \n        String name = message.getName() + \" (\" + message.getType() + \")\";\n        String dt = message.getDate();\n        String sbjct = message.getSubject();\n        String msg = message.getMessage(); /* <=== */ \n        String msgid = message.getID();\n        \n        newSysUser.setMessageRead(msgid);\n        msgID.setText(msgid);\n        "
                  },
                  {
                    "sample" : "this.message",
                    "lineNumber" : 139,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "        \n        String name = message.getName() + \" (\" + message.getType() + \")\";\n        String dt = message.getDate();\n        String sbjct = message.getSubject();\n        String msg = message.getMessage();\n        String msgid = message.getID(); /* <=== */ \n        \n        newSysUser.setMessageRead(msgid);\n        msgID.setText(msgid);\n        \n        senderName.setText(name);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 130,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessages.java",
                    "excerpt" : "     public void setID(String string) \n     {\n         this.id = string;\n     }\n\n     public String getID()  /* <=== */ \n     {\n         return this.id;\n     }\n }"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/AllMessages.java",
                    "excerpt" : "     public void setID(String string) \n     {\n         this.id = string;\n     }\n\n     public String getID()  /* <=== */ \n     {\n         return this.id;\n     }\n }"
                  },
                  {
                    "sample" : "message.getID()",
                    "lineNumber" : 139,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "        \n        String name = message.getName() + \" (\" + message.getType() + \")\";\n        String dt = message.getDate();\n        String sbjct = message.getSubject();\n        String msg = message.getMessage();\n        String msgid = message.getID(); /* <=== */ \n        \n        newSysUser.setMessageRead(msgid);\n        msgID.setText(msgid);\n        \n        senderName.setText(name);"
                  },
                  {
                    "sample" : "msgid",
                    "lineNumber" : 139,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "        \n        String name = message.getName() + \" (\" + message.getType() + \")\";\n        String dt = message.getDate();\n        String sbjct = message.getSubject();\n        String msg = message.getMessage();\n        String msgid = message.getID(); /* <=== */ \n        \n        newSysUser.setMessageRead(msgid);\n        msgID.setText(msgid);\n        \n        senderName.setText(name);"
                  },
                  {
                    "sample" : "msgid",
                    "lineNumber" : 141,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/ReadMessageController.java",
                    "excerpt" : "        String dt = message.getDate();\n        String sbjct = message.getSubject();\n        String msg = message.getMessage();\n        String msgid = message.getID();\n        \n        newSysUser.setMessageRead(msgid); /* <=== */ \n        msgID.setText(msgid);\n        \n        senderName.setText(name);\n        date.setText(dt);\n        subject.setText(sbjct);"
                  },
                  {
                    "sample" : "msgID",
                    "lineNumber" : 371,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}\n        \n        public boolean setMessageRead(String msgID) /* <=== */ \n        {\n             String sql =   \"UPDATE user_message \"+\n                            \"SET rd = '\"+1+\"'\"+\n                            \"WHERE user_message.message_id = '\"+msgID+\"';\";\n"
                  },
                  {
                    "sample" : "\"UPDATE user_message \" + \"SET rd = '\" + 1 + \"'\" + \"WHERE user_message.message_id = '\" + msgID + \"';\"",
                    "lineNumber" : 373,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            return data;\n\t}\n        \n        public boolean setMessageRead(String msgID)\n        {\n             String sql =   \"UPDATE user_message \"+ /* <=== */ \n                            \"SET rd = '\"+1+\"'\"+\n                            \"WHERE user_message.message_id = '\"+msgID+\"';\";\n\n            boolean result = true;\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 373,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            return data;\n\t}\n        \n        public boolean setMessageRead(String msgID)\n        {\n             String sql =   \"UPDATE user_message \"+ /* <=== */ \n                            \"SET rd = '\"+1+\"'\"+\n                            \"WHERE user_message.message_id = '\"+msgID+\"';\";\n\n            boolean result = true;\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 381,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            boolean result = true;\n\n            try{\t\t\t\n\n                    result = dbOperator.customInsertion(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            //System.out.println(data);\n            return result;\n        }        "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              },
              {
                "pathId" : "16931-16934-15617-15616-62436-62435-62680-62679-62678-62677-62684-62689-62688-62709-62715-62721-62720-62718-62784-58914-58919-58918-58931-58928-58927-58926-58941-58940",
                "path" : [
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 42,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param username\n     */\n\t\n\tpublic Cashier(String username) /* <=== */ \n\t{\n\t\tsuper(username);\t\t\n\t}\n\t\n    /**"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 79,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t\t\tdbOperator.useDatabse(database);\n                        \n\t\t}catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n\t}\n\t\n\tpublic User(String username) /* <=== */ \n\t{\n            InputStream inputStream = null;\n            \n            try {\n                Properties prop = new Properties();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass()",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass().getClassLoader()",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass().getClassLoader().getResourceAsStream(propFileName)",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 87,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 89,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) { /* <=== */ \n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 90,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) {\n                        prop.load(inputStream); /* <=== */ \n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 90,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) {\n                        prop.load(inputStream); /* <=== */ \n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 96,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\"); /* <=== */ \n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                "
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 98,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "prop.getProperty(\"database\")",
                    "lineNumber" : 98,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "this.database",
                    "lineNumber" : 98,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "this.database",
                    "lineNumber" : 115,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            \n            this.dbOperator = new DatabaseOperator();\n            try{\n                dbOperator.connect(dbUsername,dbPassword);\n                dbOperator.useDatabse(database); /* <=== */ \n                this.username = username;\n                ArrayList<ArrayList<String>> result = dbOperator.showTableData(\"sys_user\",\"user_id,user_type\",(\"user_name = '\" + username + \"'\"));\n                this.userID = result.get(0).get(0);\n                this.userType = result.get(0).get(1);\n"
                  },
                  {
                    "sample" : "databaseName",
                    "lineNumber" : 175,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\trs.close();\n        stmt.close();\n        return dbNames;\n\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry"
                  },
                  {
                    "sample" : "\"USE \" + databaseName + \";\"",
                    "lineNumber" : 177,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        return dbNames;\n\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\"; /* <=== */ \n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 177,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        return dbNames;\n\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\"; /* <=== */ \n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 178,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 178,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 178,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 178,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 182,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");\n\t\t\tcurrentDatabaseName = databaseName;\n\t\t\trs.close();\n\t\t}\n\t\tcatch(Exception e)"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 182,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");\n\t\t\tcurrentDatabaseName = databaseName;\n\t\t\trs.close();\n\t\t}\n\t\tcatch(Exception e)"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "5420-5423-5426-12905-12904-13000-13011-2662-2685-2676-2675-2695-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "user",
                    "lineNumber" : 1048,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        String userid = userIDlbl.getText();\n        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid); /* <=== */ \n            user.load();\n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1048,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        String userid = userIDlbl.getText();\n        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid); /* <=== */ \n            user.load();\n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1049,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid);\n            user.load(); /* <=== */ \n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            //set Stage boundaries to visible bounds of the main screen"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 183,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "        Stage stage; \n        stage = (Stage) close.getScene().getWindow();\n        stage.close();\n    }       \n    \n    public void load() /* <=== */ \n    {\n        loadInfo();\n    }\n    \n    "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 185,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "        stage.close();\n    }       \n    \n    public void load()\n    {\n        loadInfo(); /* <=== */ \n    }\n    \n    \n    public void showSuccessIndicator()\n    {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 65,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "    @FXML private ComboBox gender;\n\n    @FXML private TextField username;\n    @FXML private TextField userid;\n    \n    public void loadInfo() /* <=== */ \n    {\n        ArrayList<ArrayList<String>> data = admin.admin.getSysUser(userID);\n        \n        String type = data.get(1).get(13);\n        "
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 67,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "    @FXML private TextField username;\n    @FXML private TextField userid;\n    \n    public void loadInfo()\n    {\n        ArrayList<ArrayList<String>> data = admin.admin.getSysUser(userID); /* <=== */ \n        \n        String type = data.get(1).get(13);\n        \n        switch(type)\n        {"
                  },
                  {
                    "sample" : "userid",
                    "lineNumber" : 1052,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            return data;\n    }\n    \n    \n    public ArrayList<ArrayList<String>> getSysUser(String userid) /* <=== */ \n    {\n            ArrayList<ArrayList<String>> data = null;\n            \n            String sql1=\"\";\n            "
                  },
                  {
                    "sample" : "userid",
                    "lineNumber" : 1063,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            try{\n                \n                \n                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+\n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\"; /* <=== */ \n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1);\n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}"
                  },
                  {
                    "sample" : "\"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \" + \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \" + \"WHERE (sys_user.user_id = '\" + userid + \"' AND person.user_id = '\" + userid + \"');\"",
                    "lineNumber" : 1061,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            String sql1=\"\";\n            \n            try{\n                \n                \n                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+ /* <=== */ \n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\";\n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1);"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 1061,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            String sql1=\"\";\n            \n            try{\n                \n                \n                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+ /* <=== */ \n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\";\n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1);"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 1066,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+\n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\";\n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            return data;\n    }"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "19646-19697-19695-19694-19699-19704-19715-16460-16474-16473-16472-16492-16491-16499-16498-16497-16506-16504-16503-16521-16520-16512-16511-16532-16531-16530-16528-16527-16526-16537-16536-16555-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "mobile",
                    "lineNumber" : 862,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            if (gender.equals(\"Male\")){gender = \"m\";}\n            else {gender = \"f\";}\n            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)cashierNationality.getText();\n            String religion = (String)cashierReligion.getText();\n            String mobile = cashierMobile.getText(); /* <=== */ \n            String email = cashierEmail.getText();\n            String address = cashierAddress.getText();\n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;"
                  },
                  {
                    "sample" : "mobile",
                    "lineNumber" : 870,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile; /* <=== */ \n            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);\n"
                  },
                  {
                    "sample" : "\"#mobile \" + mobile",
                    "lineNumber" : 870,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile; /* <=== */ \n            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);\n"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 870,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile; /* <=== */ \n            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);\n"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 871,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email; /* <=== */ \n            info += \"#address \" + address;\n\n            //System.out.println(info);\n\n            boolean success = cashier.updateProfileInfo(info);"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 872,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address; /* <=== */ \n\n            //System.out.println(info);\n\n            boolean success = cashier.updateProfileInfo(info);\n            "
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 876,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);\n\n            boolean success = cashier.updateProfileInfo(info); /* <=== */ \n            \n            editBasicInfoButton.setText(\"Edit\");\n            //saveProgress.setProgress(0.5);  \n            if (success == true) showSuccessIndicator();\n            //waitFor();"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 352,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param info\n     * @return\n     */\n    public boolean updateProfileInfo(String info) /* <=== */ \n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 357,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "info.split(\"#\")",
                    "lineNumber" : 357,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "tmpInfo",
                    "lineNumber" : 357,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 358,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo) /* <=== */ \n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 360,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "s.split(\" \")",
                    "lineNumber" : 360,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "tmpData",
                    "lineNumber" : 360,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "tmpData[0]",
                    "lineNumber" : 361,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmpData[0].length() + 1",
                    "lineNumber" : 361,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmplen",
                    "lineNumber" : 361,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmplen",
                    "lineNumber" : 362,
                    "columnNumber" : 64,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 362,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"",
                    "lineNumber" : 362,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 362,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 366,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.length()",
                    "lineNumber" : 366,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.length() - 1",
                    "lineNumber" : 366,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 366,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.substring(0, column_data.length() - 1)",
                    "lineNumber" : 366,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 366,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "\"UPDATE person SET \" + column_data + \" \" + \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 368,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  + /* <=== */ \n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 368,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  + /* <=== */ \n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 373,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql ); /* <=== */ \n\n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();result = false;}\n\n        return result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.Address",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "27086-66795-66798-27085-27183-21355-23418-23417-23424-23432-23423-23422-23451-23450-23477-59292-59361-59360-59359-59397-59394-59393-59403-59402",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1102,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 723,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n\tpublic boolean prescribe(String drugs, String tests, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "this.slmcRegNo",
                    "lineNumber" : 747,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 747,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 748,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 748,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 748,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests",
                    "lineNumber" : 753,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 753,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 754,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;\n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t /* <=== */ \n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 303,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tmetaData.add(TableColumnNull);\n\t\tmetaData.add(TableColumnKeys);\n\t\treturn metaData;\n\t}\n\t\n\tpublic boolean addTableRow(String table,String tableData) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\tString sql = \"SELECT * FROM \" + table + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableData.split(\",\")",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit",
                    "lineNumber" : 319,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit[i]",
                    "lineNumber" : 328,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "i + 1",
                    "lineNumber" : 328,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 328,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  },
                  {
                    "sample" : "stmt.executeUpdate()",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-60433-60435-23970-27853-21349-21872-21869-59788-59805-59804-59825-59822-59821-59820-59830-59829",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 112,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData();  /* <=== */ \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 113,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable(); /* <=== */ \n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();\n        doctor.loadNameList();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 1298,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        availabilityPagination.setPageCount((dataSize / 8 + 1));\n        availabilityPagination.setPageFactory(this::createPage);\n    }\n    \n    @FXML /* <=== */ \n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable();\n        createPagination(currentTimeTableData0.size()-1);\n    }"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1301,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    }\n    \n    @FXML\n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable(); /* <=== */ \n        createPagination(currentTimeTableData0.size()-1);\n    }\n    \n    @FXML\n    private Button editBasicInfoButton;"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 200,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "    \n            return messages;\n        }\n        */\n        \n\tpublic ArrayList<ArrayList<String>> doctorTimeTable() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 206,
                    "columnNumber" : 159,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 206,
                    "columnNumber" : 93,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  }
                ]
              },
              {
                "pathId" : "19581-19662-19661-19660-19707-19705-19704-19715-16460-16474-16473-16472-16492-16491-16499-16498-16497-16506-16504-16503-16521-16520-16512-16511-16532-16531-16530-16528-16527-16526-16537-16536-16555-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "this.cashierAddress",
                    "lineNumber" : 850,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            cashierGender.setDisable(true);\n            cashierNationality.setDisable(true);\n            cashierReligion.setDisable(true);\n            cashierMobile.setDisable(true);\n            cashierEmail.setDisable(true);\n            cashierAddress.setDisable(true); /* <=== */ \n            cashierDOB.setDisable(true);\n            \n            String info = \"\";\n\t\t\t\t\n            String[] name = cashierName.getText().split(\" \");"
                  },
                  {
                    "sample" : "this.cashierAddress",
                    "lineNumber" : 864,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)cashierNationality.getText();\n            String religion = (String)cashierReligion.getText();\n            String mobile = cashierMobile.getText();\n            String email = cashierEmail.getText();\n            String address = cashierAddress.getText(); /* <=== */ \n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;"
                  },
                  {
                    "sample" : "getText()",
                    "lineNumber" : 864,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)cashierNationality.getText();\n            String religion = (String)cashierReligion.getText();\n            String mobile = cashierMobile.getText();\n            String email = cashierEmail.getText();\n            String address = cashierAddress.getText(); /* <=== */ \n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;"
                  },
                  {
                    "sample" : "address",
                    "lineNumber" : 864,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            //String marital = receptionMaritalComboDoc.getText();\n            String nationality = (String)cashierNationality.getText();\n            String religion = (String)cashierReligion.getText();\n            String mobile = cashierMobile.getText();\n            String email = cashierEmail.getText();\n            String address = cashierAddress.getText(); /* <=== */ \n\n            info += \"first_name \" + name[0] + \"#last_name \" + name[1];\n            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;"
                  },
                  {
                    "sample" : "address",
                    "lineNumber" : 872,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address; /* <=== */ \n\n            //System.out.println(info);\n\n            boolean success = cashier.updateProfileInfo(info);\n            "
                  },
                  {
                    "sample" : "\"#address \" + address",
                    "lineNumber" : 872,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address; /* <=== */ \n\n            //System.out.println(info);\n\n            boolean success = cashier.updateProfileInfo(info);\n            "
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 872,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            info += \"#gender \" + gender;\n            info += \"#nationality \" + nationality;\n            info += \"#religion \" + religion;\n            info += \"#mobile \" + mobile;\n            info += \"#email \" + email;\n            info += \"#address \" + address; /* <=== */ \n\n            //System.out.println(info);\n\n            boolean success = cashier.updateProfileInfo(info);\n            "
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 876,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            info += \"#email \" + email;\n            info += \"#address \" + address;\n\n            //System.out.println(info);\n\n            boolean success = cashier.updateProfileInfo(info); /* <=== */ \n            \n            editBasicInfoButton.setText(\"Edit\");\n            //saveProgress.setProgress(0.5);  \n            if (success == true) showSuccessIndicator();\n            //waitFor();"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 352,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param info\n     * @return\n     */\n    public boolean updateProfileInfo(String info) /* <=== */ \n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");"
                  },
                  {
                    "sample" : "info",
                    "lineNumber" : 357,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "info.split(\"#\")",
                    "lineNumber" : 357,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "tmpInfo",
                    "lineNumber" : 357,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public boolean updateProfileInfo(String info)\n    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\"); /* <=== */ \n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 358,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    {\n        boolean result = true;\n        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo) /* <=== */ \n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 360,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "s.split(\" \")",
                    "lineNumber" : 360,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "tmpData",
                    "lineNumber" : 360,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String column_data = \"\";\n\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \"); /* <=== */ \n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n"
                  },
                  {
                    "sample" : "tmpData[0]",
                    "lineNumber" : 361,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmpData[0].length() + 1",
                    "lineNumber" : 361,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmplen",
                    "lineNumber" : 361,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\n        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1; /* <=== */ \n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);"
                  },
                  {
                    "sample" : "tmplen",
                    "lineNumber" : 362,
                    "columnNumber" : 64,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "s",
                    "lineNumber" : 362,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"",
                    "lineNumber" : 362,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 362,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String[] tmpInfo = info.split(\"#\");\n        for(String s : tmpInfo)\n        {\n                String[] tmpData = s.split(\" \");\n                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\"; /* <=== */ \n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 366,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.length()",
                    "lineNumber" : 366,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.length() - 1",
                    "lineNumber" : 366,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 366,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data.substring(0, column_data.length() - 1)",
                    "lineNumber" : 366,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "column_data",
                    "lineNumber" : 366,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                int tmplen = tmpData[0].length() + 1;\n                column_data += tmpData[0] + \"='\" + s.substring(tmplen, s.length()) + \"',\";\n                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1); /* <=== */ \n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{"
                  },
                  {
                    "sample" : "\"UPDATE person SET \" + column_data + \" \" + \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 368,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  + /* <=== */ \n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 368,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                //System.out.println(column_data);\n        }\n\n        column_data = column_data.substring(0,column_data.length()-1);\n\n        String sql =\t\"UPDATE person SET \" + column_data + \" \"  + /* <=== */ \n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql );"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 373,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        String sql =\t\"UPDATE person SET \" + column_data + \" \"  +\n                        \"WHERE person_id = (SELECT person_id FROM sys_user WHERE user_id = '\" + this.userID + \"');\";\n\n        try{\n\n                super.dbOperator.customInsertion( sql ); /* <=== */ \n\n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();result = false;}\n\n        return result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountID",
        "sinks" : [
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Write",
            "name" : "Java Database Connector(Write)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "27086-66795-66798-27085-27183-21355-23418-23417-23424-23432-23423-23422-23451-23450-23477-59292-59361-59360-59359-59397-59394-59393-59403-59402",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1075,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                if (tmpSize > 0)\n                {\n                    \n                    for (int count = 0; count < tmpSize; count++)\n                    {\n                        fee = Integer.toString(Integer.parseInt(fee) + Integer.parseInt(doc.getLabFee(tests.get(count))));  /* <=== */ \n                        presc1 += tests.get(count) + \"|\";\n                    }\n                    presc1 = presc1.substring(0,presc1.length()-1);\n                }    \n                if ( tests.size() > 0 )"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1102,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 723,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n\tpublic boolean prescribe(String drugs, String tests, String patientID) /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\t//////////////////////////////////// Adding data to database //////////////////////////////////////////////////////////////\n\t\ttry{\n\t\t\t"
                  },
                  {
                    "sample" : "this.slmcRegNo",
                    "lineNumber" : 747,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 747,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\ttmpID2 = \"0\" + tmpID2;\n\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo; /* <=== */ \n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        "
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 748,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 748,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 748,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t}\n\t\t\ttmpID2 = \"pres\" + tmpID2;\n\t\t\t\n\t\t\t\n\t\t\tString doctorID = this.slmcRegNo;\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;"
                  },
                  {
                    "sample" : "tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests",
                    "lineNumber" : 753,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 753,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests; /* <=== */ \n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t\n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 754,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t\t\n                        if ( tests == \"\" ) tests = \"NULL\";\n                        if ( drugs == \"\") tests = \"NULL\";\n                        \n\t\t\tsql = tmpID2 + \",\" + patientID + \",\" + doctorID + \",\" + date + \",\" + drugs + \",\" + tests;\n\t\t\tsuper.dbOperator.addTableRow(\"prescription\",sql);\t\t /* <=== */ \n\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 303,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tmetaData.add(TableColumnNull);\n\t\tmetaData.add(TableColumnKeys);\n\t\treturn metaData;\n\t}\n\t\n\tpublic boolean addTableRow(String table,String tableData) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\tString sql = \"SELECT * FROM \" + table + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "tableData",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableData.split(\",\")",
                    "lineNumber" : 319,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit",
                    "lineNumber" : 319,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tcolumnHeaders += \"?\";\n\t\t\tif (i < (noOfColumns-1)) \n\t\t\t\tcolumnHeaders += \",\";\n\t\t}\n\t\t\n\t\tString[] tableDataSplit = tableData.split(\",\"); /* <=== */ \n\t\t//System.out.println(tableData);\n                \n\t\tsql = \"INSERT INTO \"+ table +\" VALUES (\"+ columnHeaders +\")\";\n\t\tstmt = c.prepareStatement(sql);\n\t\t"
                  },
                  {
                    "sample" : "tableDataSplit[i]",
                    "lineNumber" : 328,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "i + 1",
                    "lineNumber" : 328,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 328,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tstmt = c.prepareStatement(sql);\n\t\t\n\t\tfor(int i = 0; i < noOfColumns; i++)\n\t\t{\n                        //System.out.println(tableDataSplit[i]);\n\t\t\tstmt.setString(i+1, tableDataSplit[i]);  /* <=== */ \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  },
                  {
                    "sample" : "stmt.executeUpdate()",
                    "lineNumber" : 333,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tstmt.setString(i+1, tableDataSplit[i]); \n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t\tstmt.executeUpdate(); /* <=== */ \n\t\t\tSystem.out.println(\"Inserted records into the table...\");\n\t\t}catch(SQLException e)\n\t\t{\n\t\t\tSystem.out.println(\"Error when inserting records into the table...\");\n\t\t\tresult = false;"
                  }
                ]
              }
            ]
          },
          {
            "sinkType" : "storages",
            "id" : "Storages.SpringFramework.Jdbc.Read",
            "name" : "Java Database Connector(Read)",
            "category" : "",
            "domains" : [
              "oracle.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "19012-19015-19020-58458-58457-58455-58549-62451-63437-63450-66795-66798-63449-70558-58549-58595-62447-63215-63206-63205-63230-59884-59899-59896-59895-59894-59904-59903",
                "path" : [
                  {
                    "sample" : "user",
                    "lineNumber" : 677,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "    \n    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(cashier); /* <=== */ \n        user.load();\n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 677,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "    \n    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(cashier); /* <=== */ \n        user.load();\n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 678,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(cashier);\n        user.load(); /* <=== */ \n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();\n        }"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 90,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "            stage.close();\n        }\n    }\n    \n    \n    public void load() /* <=== */ \n    {\n        fillUser();\n    }\n    \n    "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "    }\n    \n    \n    public void load()\n    {\n        fillUser(); /* <=== */ \n    }\n    \n    \n    \n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 47,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "    \n    @FXML private ImageView profPic;\n    @FXML private Label userN;\n    @FXML private Label userTAndN;\n    \n    public void fillUser() /* <=== */ \n    {\n        HashMap<String,String> log = new HashMap<String,String>();\n        log.clear();\n        log.put(\"doctor\",\"Doctor\");\n        log.put(\"lab_assistant\",\"Lab Assistant\");"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 58,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        log.put(\"cashier\",\"Cashier\");\n        log.put(\"pharmacist\",\"Pharmacist\");\n        log.put(\"receptionist\",\"Receptionist\");\n        log.put(\"admin\",\"Admin\");\n            \n        ArrayList<ArrayList<String>> data = sysUser.getCurrentUserNameAndID(); /* <=== */ \n        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 353,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID() /* <=== */ \n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 358,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "        public ArrayList<ArrayList<String>> getCurrentUserNameAndID()\n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\"; /* <=== */ \n\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 364,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "this.dbOperator",
                    "lineNumber" : 364,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 353,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID() /* <=== */ \n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 58,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        log.put(\"cashier\",\"Cashier\");\n        log.put(\"pharmacist\",\"Pharmacist\");\n        log.put(\"receptionist\",\"Receptionist\");\n        log.put(\"admin\",\"Admin\");\n            \n        ArrayList<ArrayList<String>> data = sysUser.getCurrentUserNameAndID(); /* <=== */ \n        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 64,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{\n            String image = sysUser.getProfilePic(); /* <=== */ \n            img = new Image(getClass().getResource(\"/imgs/profilePics/\"+image).toString(), true);\n        }catch(Exception e){\n            img = new Image(getClass().getResource(\"/imgs/noUser.png\").toString(), true);\n        }\n        profPic.setImage(img);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 254,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            }catch(ClassNotFoundException | SQLException e){}\t\n            \n            return result;\n\t}\n        \n        public String getProfilePic() /* <=== */ \n\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+\n                            \"profile_pic \"+\n                            \"FROM sys_user \"+"
                  },
                  {
                    "sample" : "this.username",
                    "lineNumber" : 260,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+\n                            \"profile_pic \"+\n                            \"FROM sys_user \"+\n                            \"WHERE sys_user.user_name = '\"+this.username+\"';\"; /* <=== */ \n\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n"
                  },
                  {
                    "sample" : "\"SELECT \" + \"profile_pic \" + \"FROM sys_user \" + \"WHERE sys_user.user_name = '\" + this.username + \"';\"",
                    "lineNumber" : 257,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        public String getProfilePic()\n\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"profile_pic \"+\n                            \"FROM sys_user \"+\n                            \"WHERE sys_user.user_name = '\"+this.username+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 257,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        public String getProfilePic()\n\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"profile_pic \"+\n                            \"FROM sys_user \"+\n                            \"WHERE sys_user.user_name = '\"+this.username+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 266,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n                    image = data.get(1).get(0);\n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            //System.out.println(data);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-60433-60435-23970-27853-21349-21872-21869-59788-59805-59804-59825-59822-59821-59820-59830-59829",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 112,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData();  /* <=== */ \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 113,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable(); /* <=== */ \n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();\n        doctor.addFocusListener();\n        doctor.loadNameList();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 1298,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        availabilityPagination.setPageCount((dataSize / 8 + 1));\n        availabilityPagination.setPageFactory(this::createPage);\n    }\n    \n    @FXML /* <=== */ \n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable();\n        createPagination(currentTimeTableData0.size()-1);\n    }"
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 1301,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    }\n    \n    @FXML\n    public void MakeAvailabilityTable()\n    {\n        ArrayList<ArrayList<String>> currentTimeTableData0 = doc.doctorTimeTable(); /* <=== */ \n        createPagination(currentTimeTableData0.size()-1);\n    }\n    \n    @FXML\n    private Button editBasicInfoButton;"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 200,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "    \n            return messages;\n        }\n        */\n        \n\tpublic ArrayList<ArrayList<String>> doctorTimeTable() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 206,
                    "columnNumber" : 159,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 206,
                    "columnNumber" : 93,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"doctor_availability\",\"day,time_slot,time_slot_id\",\"slmc_reg_no = (SELECT slmc_reg_no FROM doctor WHERE user_id = '\"+this.userID+\"');\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  }
                ]
              },
              {
                "pathId" : "27139-27155-27188-27196-27254-27267-22971-22986-22983-22982-22999-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-22995-22994-22993-22992-23005-23004-23018-60020-60035-60032-60031-60030-60040-60039",
                "path" : [
                  {
                    "sample" : "currentPatientID",
                    "lineNumber" : 1091,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n                System.out.println(diagnostic+\"\\n\");\n                System.out.println(presc+\"\\n\");\n                System.out.println(presc1+\"\\n\");\n\n                String currentPatientID = patientSearchValue.getText(); /* <=== */ \n                boolean saved1 = false;\n                boolean saved2 = false;\n                \n                if (currentPatientID.length() > 0)\n                {"
                  },
                  {
                    "sample" : "currentPatientID",
                    "lineNumber" : 1095,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "\n                String currentPatientID = patientSearchValue.getText();\n                boolean saved1 = false;\n                boolean saved2 = false;\n                \n                if (currentPatientID.length() > 0) /* <=== */ \n                {\n                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) "
                  },
                  {
                    "sample" : "currentPatientID",
                    "lineNumber" : 1102,
                    "columnNumber" : 67,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "currentPatientID",
                    "lineNumber" : 1104,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID);\n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID); /* <=== */ \n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();\n                            \n                            txtAuto.setText(\"\");"
                  },
                  {
                    "sample" : "currentPatientID",
                    "lineNumber" : 1119,
                    "columnNumber" : 98,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                            prescription.getItems().clear();\n                            prescription1.getItems().clear();\n                            \n                            \n                        }\n                        String billInfo = \"consultant_id \"+ doc.slmcRegNo +\",\" + \"patient_id \" + currentPatientID + \",laboratory_fee \" + fee; /* <=== */ \n                        \n                        if (labTests == true)\n                        {        \n                            doc.bill(billInfo, currentPatientID, fee);\n                        }    "
                  },
                  {
                    "sample" : "currentPatientID",
                    "lineNumber" : 1123,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                        }\n                        String billInfo = \"consultant_id \"+ doc.slmcRegNo +\",\" + \"patient_id \" + currentPatientID + \",laboratory_fee \" + fee;\n                        \n                        if (labTests == true)\n                        {        \n                            doc.bill(billInfo, currentPatientID, fee); /* <=== */ \n                        }    \n                    }    \n                    System.out.println(currentPatientID);\n                }\n                "
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 600,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace(); result = false;}\n\n\t\treturn result;\n\t}\n\t\n        public boolean bill(String billInfo, String patientID, String labFee) /* <=== */ \n\t{\n\t\t\n            boolean result = true;\n\n            try{\t\t\t"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 609,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            try{\t\t\t\n\n                /////////////////// Generating the Bill ID //////////////////////////////////////////////////////////////\n\n                String sql3 = \"SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '\" + patientID + \"';\"; /* <=== */ \n                String tmpID2;\n                try{\n\n                    tmpID2 = super.dbOperator.customSelection(sql3).get(1).get(0);\n"
                  },
                  {
                    "sample" : "\"SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '\" + patientID + \"';\"",
                    "lineNumber" : 609,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            try{\t\t\t\n\n                /////////////////// Generating the Bill ID //////////////////////////////////////////////////////////////\n\n                String sql3 = \"SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '\" + patientID + \"';\"; /* <=== */ \n                String tmpID2;\n                try{\n\n                    tmpID2 = super.dbOperator.customSelection(sql3).get(1).get(0);\n"
                  },
                  {
                    "sample" : "sql3",
                    "lineNumber" : 609,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            try{\t\t\t\n\n                /////////////////// Generating the Bill ID //////////////////////////////////////////////////////////////\n\n                String sql3 = \"SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '\" + patientID + \"';\"; /* <=== */ \n                String tmpID2;\n                try{\n\n                    tmpID2 = super.dbOperator.customSelection(sql3).get(1).get(0);\n"
                  },
                  {
                    "sample" : "sql3",
                    "lineNumber" : 613,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n                String sql3 = \"SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '\" + patientID + \"';\";\n                String tmpID2;\n                try{\n\n                    tmpID2 = super.dbOperator.customSelection(sql3).get(1).get(0); /* <=== */ \n\n                    String sql = \"UPDATE tmp_bill SET laboratory_fee = '\" + labFee + \"' WHERE tmp_bill_id = '\" + tmpID2 + \"';\";\n                    /////////////////////////////// Adding data to database /////////////////////////////////////////////////\n                    super.dbOperator.customInsertion(sql);\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql3)",
                    "lineNumber" : 613,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n                String sql3 = \"SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '\" + patientID + \"';\";\n                String tmpID2;\n                try{\n\n                    tmpID2 = super.dbOperator.customSelection(sql3).get(1).get(0); /* <=== */ \n\n                    String sql = \"UPDATE tmp_bill SET laboratory_fee = '\" + labFee + \"' WHERE tmp_bill_id = '\" + tmpID2 + \"';\";\n                    /////////////////////////////// Adding data to database /////////////////////////////////////////////////\n                    super.dbOperator.customInsertion(sql);\n"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql3).get(1)",
                    "lineNumber" : 613,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n                String sql3 = \"SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '\" + patientID + \"';\";\n                String tmpID2;\n                try{\n\n                    tmpID2 = super.dbOperator.customSelection(sql3).get(1).get(0); /* <=== */ \n\n                    String sql = \"UPDATE tmp_bill SET laboratory_fee = '\" + labFee + \"' WHERE tmp_bill_id = '\" + tmpID2 + \"';\";\n                    /////////////////////////////// Adding data to database /////////////////////////////////////////////////\n                    super.dbOperator.customInsertion(sql);\n"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql3).get(1).get(0)",
                    "lineNumber" : 613,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n                String sql3 = \"SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '\" + patientID + \"';\";\n                String tmpID2;\n                try{\n\n                    tmpID2 = super.dbOperator.customSelection(sql3).get(1).get(0); /* <=== */ \n\n                    String sql = \"UPDATE tmp_bill SET laboratory_fee = '\" + labFee + \"' WHERE tmp_bill_id = '\" + tmpID2 + \"';\";\n                    /////////////////////////////// Adding data to database /////////////////////////////////////////////////\n                    super.dbOperator.customInsertion(sql);\n"
                  },
                  {
                    "sample" : "tmpID2",
                    "lineNumber" : 613,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n                String sql3 = \"SELECT tmp_bill_id FROM tmp_bill WHERE patient_id = '\" + patientID + \"';\";\n                String tmpID2;\n                try{\n\n                    tmpID2 = super.dbOperator.customSelection(sql3).get(1).get(0); /* <=== */ \n\n                    String sql = \"UPDATE tmp_bill SET laboratory_fee = '\" + labFee + \"' WHERE tmp_bill_id = '\" + tmpID2 + \"';\";\n                    /////////////////////////////// Adding data to database /////////////////////////////////////////////////\n                    super.dbOperator.customInsertion(sql);\n"
                  },
                  {
                    "sample" : "\"UPDATE tmp_bill SET laboratory_fee = '\" + labFee + \"' WHERE tmp_bill_id = '\" + tmpID2 + \"';\"",
                    "lineNumber" : 615,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                String tmpID2;\n                try{\n\n                    tmpID2 = super.dbOperator.customSelection(sql3).get(1).get(0);\n\n                    String sql = \"UPDATE tmp_bill SET laboratory_fee = '\" + labFee + \"' WHERE tmp_bill_id = '\" + tmpID2 + \"';\"; /* <=== */ \n                    /////////////////////////////// Adding data to database /////////////////////////////////////////////////\n                    super.dbOperator.customInsertion(sql);\n\n\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 615,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                String tmpID2;\n                try{\n\n                    tmpID2 = super.dbOperator.customSelection(sql3).get(1).get(0);\n\n                    String sql = \"UPDATE tmp_bill SET laboratory_fee = '\" + labFee + \"' WHERE tmp_bill_id = '\" + tmpID2 + \"';\"; /* <=== */ \n                    /////////////////////////////// Adding data to database /////////////////////////////////////////////////\n                    super.dbOperator.customInsertion(sql);\n\n\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 617,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n                    tmpID2 = super.dbOperator.customSelection(sql3).get(1).get(0);\n\n                    String sql = \"UPDATE tmp_bill SET laboratory_fee = '\" + labFee + \"' WHERE tmp_bill_id = '\" + tmpID2 + \"';\";\n                    /////////////////////////////// Adding data to database /////////////////////////////////////////////////\n                    super.dbOperator.customInsertion(sql); /* <=== */ \n\n\n\n                } catch(Exception e) {\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 557,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t}\n\t\treturn main;\n\t}\n\t\n\t\n\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 562,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 562,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 562,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic boolean customInsertion(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 563,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tboolean result = true;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n                        try{\n                            ResultSetMetaData rsmd = rs.getMetaData();\n                            int noOfColumns = rsmd.getColumnCount();\n                        }catch(Exception e){}\n                            "
                  }
                ]
              },
              {
                "pathId" : "16931-16934-15617-15616-62436-62435-62680-62679-62678-62677-62684-62689-62688-62709-62715-62721-62720-62718-62784-58914-58919-58918-58931-58928-58927-58926-58941-58940",
                "path" : [
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 42,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param username\n     */\n\t\n\tpublic Cashier(String username) /* <=== */ \n\t{\n\t\tsuper(username);\t\t\n\t}\n\t\n    /**"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 79,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t\t\tdbOperator.useDatabse(database);\n                        \n\t\t}catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n\t}\n\t\n\tpublic User(String username) /* <=== */ \n\t{\n            InputStream inputStream = null;\n            \n            try {\n                Properties prop = new Properties();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass()",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass().getClassLoader()",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass().getClassLoader().getResourceAsStream(propFileName)",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 87,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 89,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) { /* <=== */ \n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 90,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) {\n                        prop.load(inputStream); /* <=== */ \n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 90,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) {\n                        prop.load(inputStream); /* <=== */ \n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 96,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\"); /* <=== */ \n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                "
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 98,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "prop.getProperty(\"database\")",
                    "lineNumber" : 98,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "this.database",
                    "lineNumber" : 98,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "this.database",
                    "lineNumber" : 115,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            \n            this.dbOperator = new DatabaseOperator();\n            try{\n                dbOperator.connect(dbUsername,dbPassword);\n                dbOperator.useDatabse(database); /* <=== */ \n                this.username = username;\n                ArrayList<ArrayList<String>> result = dbOperator.showTableData(\"sys_user\",\"user_id,user_type\",(\"user_name = '\" + username + \"'\"));\n                this.userID = result.get(0).get(0);\n                this.userType = result.get(0).get(1);\n"
                  },
                  {
                    "sample" : "databaseName",
                    "lineNumber" : 175,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\trs.close();\n        stmt.close();\n        return dbNames;\n\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry"
                  },
                  {
                    "sample" : "\"USE \" + databaseName + \";\"",
                    "lineNumber" : 177,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        return dbNames;\n\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\"; /* <=== */ \n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 177,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        return dbNames;\n\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\"; /* <=== */ \n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 178,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 178,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 178,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 178,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException\n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 182,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");\n\t\t\tcurrentDatabaseName = databaseName;\n\t\t\trs.close();\n\t\t}\n\t\tcatch(Exception e)"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 182,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\");\n\t\t\tcurrentDatabaseName = databaseName;\n\t\t\trs.close();\n\t\t}\n\t\tcatch(Exception e)"
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "miscellaneous" : [
    ],
    "internal_apis" : [
    ],
    "leakages" : [
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "62566-62565-62564-62562-62573",
                "path" : [
                  {
                    "sample" : "\"password\"",
                    "lineNumber" : 58,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 58,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "prop.getProperty(\"password\")",
                    "lineNumber" : 58,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "this.dbPassword",
                    "lineNumber" : 58,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "System.out.println(dbUsername + \" \" + dbPassword + \" \" + database)",
                    "lineNumber" : 61,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database); /* <=== */ \n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);\n            } finally {\n                    try{"
                  }
                ]
              },
              {
                "pathId" : "62716-62715-62714-62712-62723",
                "path" : [
                  {
                    "sample" : "\"password\"",
                    "lineNumber" : 97,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "prop.getProperty(\"password\")",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "this.dbPassword",
                    "lineNumber" : 97,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "System.out.println(dbUsername + \" \" + dbPassword + \" \" + database)",
                    "lineNumber" : 100,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database); /* <=== */ \n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);\n            } finally {\n                "
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "System.out.println(tableData0)",
                    "lineNumber" : 100,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0); /* <=== */ \n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        "
                  }
                ]
              },
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              },
              {
                "pathId" : "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 792,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Thursday\");\n        weekDays.put(\"6\",\"Friday\");\n        weekDays.put(\"7\",\"Saturday\");\n        \n        appDatePicker.setValue(null);\n        setDates(); /* <=== */ \n        \n        ArrayList<Integer> day3 = new ArrayList<Integer>();\n        day3.add(1);\n        day3.add(2);\n        day3.add(3);"
                  },
                  {
                    "sample" : "this.consultationAreaCombo",
                    "lineNumber" : 823,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "(String) consultationAreaCombo.getValue()",
                    "lineNumber" : 823,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 823,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 824,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 973,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "\"SELECT \" + \"app_day \" + \"FROM lab_appointment_timetable INNER JOIN lab_test ON \" + \"lab_appointment_timetable.app_test_id = lab_test.test_id \" + \"WHERE lab_test.test_name='\" + testName + \"';\"",
                    "lineNumber" : 976,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 976,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 985,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 985,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 985,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 989,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 990,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 990,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 992,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 992,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 993,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 993,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 995,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 973,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "receptionist.getLabAvailableDays(testName)",
                    "lineNumber" : 824,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 824,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 825,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data); /* <=== */ \n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           \n                String number = Integer.toString(i+1);"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "tableData0.size()",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 99,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 106,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 106,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 108,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 139,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 139,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1).split(\" \")",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 108,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp[0]",
                    "lineNumber" : 109,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 109,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 131,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "LocalDate.parse(date, formatter)",
                    "lineNumber" : 131,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 131,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 133,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  },
                  {
                    "sample" : "System.out.println(finDate.atTime(hour1, minute1))",
                    "lineNumber" : 133,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  }
                ]
              },
              {
                "pathId" : "21011-66795-66798-21010-21069-21084-21079",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 107,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "            scene.setFill(null);\n            stage.initStyle(StageStyle.TRANSPARENT);\n            stage.show();\n        }    \n        \n        if (info.getText().equals(\"1\")) /* <=== */ \n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText());\n        "
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 111,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  },
                  {
                    "sample" : "println(info.getText())",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  }
                ]
              },
              {
                "pathId" : "62566-62565-62571-62570-62568-62634-58914-58943",
                "path" : [
                  {
                    "sample" : "\"password\"",
                    "lineNumber" : 58,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 58,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 59,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "prop.getProperty(\"database\")",
                    "lineNumber" : 59,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "this.database",
                    "lineNumber" : 59,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "this.database",
                    "lineNumber" : 74,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            }\n            \n\t\tthis.dbOperator = new DatabaseOperator();\n\t\ttry{\n\t\t\tdbOperator.connect(dbUsername,dbPassword);\n\t\t\tdbOperator.useDatabse(database); /* <=== */ \n                        \n\t\t}catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n\t}\n\t\n\tpublic User(String username)"
                  },
                  {
                    "sample" : "databaseName",
                    "lineNumber" : 175,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\trs.close();\n        stmt.close();\n        return dbNames;\n\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry"
                  },
                  {
                    "sample" : "System.out.println(\"\\n### Database Changed to \" + databaseName + \"###\\n\")",
                    "lineNumber" : 183,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\"); /* <=== */ \n\t\t\tcurrentDatabaseName = databaseName;\n\t\t\trs.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "5420-5423-5426-12905-12904-13000-13011-2662-2685-2676-2675-2695-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "user",
                    "lineNumber" : 1048,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        String userid = userIDlbl.getText();\n        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid); /* <=== */ \n            user.load();\n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1048,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        String userid = userIDlbl.getText();\n        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid); /* <=== */ \n            user.load();\n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1049,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid);\n            user.load(); /* <=== */ \n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            //set Stage boundaries to visible bounds of the main screen"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 183,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "        Stage stage; \n        stage = (Stage) close.getScene().getWindow();\n        stage.close();\n    }       \n    \n    public void load() /* <=== */ \n    {\n        loadInfo();\n    }\n    \n    "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 185,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "        stage.close();\n    }       \n    \n    public void load()\n    {\n        loadInfo(); /* <=== */ \n    }\n    \n    \n    public void showSuccessIndicator()\n    {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 65,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "    @FXML private ComboBox gender;\n\n    @FXML private TextField username;\n    @FXML private TextField userid;\n    \n    public void loadInfo() /* <=== */ \n    {\n        ArrayList<ArrayList<String>> data = admin.admin.getSysUser(userID);\n        \n        String type = data.get(1).get(13);\n        "
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 67,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "    @FXML private TextField username;\n    @FXML private TextField userid;\n    \n    public void loadInfo()\n    {\n        ArrayList<ArrayList<String>> data = admin.admin.getSysUser(userID); /* <=== */ \n        \n        String type = data.get(1).get(13);\n        \n        switch(type)\n        {"
                  },
                  {
                    "sample" : "userid",
                    "lineNumber" : 1052,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            return data;\n    }\n    \n    \n    public ArrayList<ArrayList<String>> getSysUser(String userid) /* <=== */ \n    {\n            ArrayList<ArrayList<String>> data = null;\n            \n            String sql1=\"\";\n            "
                  },
                  {
                    "sample" : "userid",
                    "lineNumber" : 1063,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            try{\n                \n                \n                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+\n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\"; /* <=== */ \n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1);\n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}"
                  },
                  {
                    "sample" : "\"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \" + \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \" + \"WHERE (sys_user.user_id = '\" + userid + \"' AND person.user_id = '\" + userid + \"');\"",
                    "lineNumber" : 1061,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            String sql1=\"\";\n            \n            try{\n                \n                \n                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+ /* <=== */ \n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\";\n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1);"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 1061,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            String sql1=\"\";\n            \n            try{\n                \n                \n                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+ /* <=== */ \n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\";\n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1);"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 1066,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+\n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\";\n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            return data;\n    }"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalCharacteristics.Nationality",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "System.out.println(tableData0)",
                    "lineNumber" : 100,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0); /* <=== */ \n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        "
                  }
                ]
              },
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              },
              {
                "pathId" : "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 792,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Thursday\");\n        weekDays.put(\"6\",\"Friday\");\n        weekDays.put(\"7\",\"Saturday\");\n        \n        appDatePicker.setValue(null);\n        setDates(); /* <=== */ \n        \n        ArrayList<Integer> day3 = new ArrayList<Integer>();\n        day3.add(1);\n        day3.add(2);\n        day3.add(3);"
                  },
                  {
                    "sample" : "this.consultationAreaCombo",
                    "lineNumber" : 823,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "(String) consultationAreaCombo.getValue()",
                    "lineNumber" : 823,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 823,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 824,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 973,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "\"SELECT \" + \"app_day \" + \"FROM lab_appointment_timetable INNER JOIN lab_test ON \" + \"lab_appointment_timetable.app_test_id = lab_test.test_id \" + \"WHERE lab_test.test_name='\" + testName + \"';\"",
                    "lineNumber" : 976,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 976,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 985,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 985,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 985,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 989,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 990,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 990,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 992,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 992,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 993,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 993,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 995,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 973,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "receptionist.getLabAvailableDays(testName)",
                    "lineNumber" : 824,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 824,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 825,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data); /* <=== */ \n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           \n                String number = Integer.toString(i+1);"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "tableData0.size()",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 99,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 106,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 106,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 108,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 139,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 139,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1).split(\" \")",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 108,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp[0]",
                    "lineNumber" : 109,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 109,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 131,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "LocalDate.parse(date, formatter)",
                    "lineNumber" : 131,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 131,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 133,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  },
                  {
                    "sample" : "System.out.println(finDate.atTime(hour1, minute1))",
                    "lineNumber" : 133,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  }
                ]
              },
              {
                "pathId" : "21011-66795-66798-21010-21069-21084-21079",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 107,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "            scene.setFill(null);\n            stage.initStyle(StageStyle.TRANSPARENT);\n            stage.show();\n        }    \n        \n        if (info.getText().equals(\"1\")) /* <=== */ \n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText());\n        "
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 111,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  },
                  {
                    "sample" : "println(info.getText())",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "5420-5423-5426-12905-12904-13000-13011-2662-2685-2676-2675-2695-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "user",
                    "lineNumber" : 1048,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        String userid = userIDlbl.getText();\n        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid); /* <=== */ \n            user.load();\n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1048,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        String userid = userIDlbl.getText();\n        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid); /* <=== */ \n            user.load();\n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1049,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (!userid.equals(\"\"))\n        {    \n            Stage stage= new Stage();\n            SysUserController user = new SysUserController(this,userid);\n            user.load(); /* <=== */ \n            Scene scene = new Scene(user);\n            stage.setScene(scene);\n\n            Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();\n            //set Stage boundaries to visible bounds of the main screen"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 183,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "        Stage stage; \n        stage = (Stage) close.getScene().getWindow();\n        stage.close();\n    }       \n    \n    public void load() /* <=== */ \n    {\n        loadInfo();\n    }\n    \n    "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 185,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "        stage.close();\n    }       \n    \n    public void load()\n    {\n        loadInfo(); /* <=== */ \n    }\n    \n    \n    public void showSuccessIndicator()\n    {"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 65,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "    @FXML private ComboBox gender;\n\n    @FXML private TextField username;\n    @FXML private TextField userid;\n    \n    public void loadInfo() /* <=== */ \n    {\n        ArrayList<ArrayList<String>> data = admin.admin.getSysUser(userID);\n        \n        String type = data.get(1).get(13);\n        "
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 67,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/src/main/java/Admin/SysUserController.java",
                    "excerpt" : "    @FXML private TextField username;\n    @FXML private TextField userid;\n    \n    public void loadInfo()\n    {\n        ArrayList<ArrayList<String>> data = admin.admin.getSysUser(userID); /* <=== */ \n        \n        String type = data.get(1).get(13);\n        \n        switch(type)\n        {"
                  },
                  {
                    "sample" : "userid",
                    "lineNumber" : 1052,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            return data;\n    }\n    \n    \n    public ArrayList<ArrayList<String>> getSysUser(String userid) /* <=== */ \n    {\n            ArrayList<ArrayList<String>> data = null;\n            \n            String sql1=\"\";\n            "
                  },
                  {
                    "sample" : "userid",
                    "lineNumber" : 1063,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            try{\n                \n                \n                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+\n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\"; /* <=== */ \n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1);\n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}"
                  },
                  {
                    "sample" : "\"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \" + \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \" + \"WHERE (sys_user.user_id = '\" + userid + \"' AND person.user_id = '\" + userid + \"');\"",
                    "lineNumber" : 1061,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            String sql1=\"\";\n            \n            try{\n                \n                \n                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+ /* <=== */ \n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\";\n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1);"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 1061,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            String sql1=\"\";\n            \n            try{\n                \n                \n                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+ /* <=== */ \n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\";\n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1);"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 1066,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                sql1 = \"SELECT person.*,sys_user.user_name,sys_user.user_type,sys_user.online,sys_user.suspend \"+\n                       \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                       \"WHERE (sys_user.user_id = '\"+userid+\"' AND person.user_id = '\"+userid+\"');\";\n                \n                //System.out.println(sql1);\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            return data;\n    }"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountID",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "17692-17691-17690-17768-17765-17764-17763-17775-16675-16687-16686-16706-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-16702-16701-16711",
                "path" : [
                  {
                    "sample" : "this.patientID",
                    "lineNumber" : 309,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        //System.out.println(\"Testing\");\n    } \n    \n    public void searchPatientBill()\n    {\n        String searchID = patientID.getText();  /* <=== */ \n        \n        if (patientSearchType.getSelectionModel().getSelectedItem() != null )\n        {    \n            String selectedValue = patientSearchType.getSelectionModel().getSelectedItem().toString();\n"
                  },
                  {
                    "sample" : "getText()",
                    "lineNumber" : 309,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        //System.out.println(\"Testing\");\n    } \n    \n    public void searchPatientBill()\n    {\n        String searchID = patientID.getText();  /* <=== */ \n        \n        if (patientSearchType.getSelectionModel().getSelectedItem() != null )\n        {    \n            String selectedValue = patientSearchType.getSelectionModel().getSelectedItem().toString();\n"
                  },
                  {
                    "sample" : "searchID",
                    "lineNumber" : 309,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        //System.out.println(\"Testing\");\n    } \n    \n    public void searchPatientBill()\n    {\n        String searchID = patientID.getText();  /* <=== */ \n        \n        if (patientSearchType.getSelectionModel().getSelectedItem() != null )\n        {    \n            String selectedValue = patientSearchType.getSelectionModel().getSelectedItem().toString();\n"
                  },
                  {
                    "sample" : "searchID",
                    "lineNumber" : 328,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                {\n                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID);\n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID); /* <=== */ \n                        data = cashier.getPatientDetails(patientid);\n                        patientSearchType.setValue(\"Patient ID\");\n                        patientID.setText(patientid);\n                        break;\n                    case \"NIC\":"
                  },
                  {
                    "sample" : "this.patientLog",
                    "lineNumber" : 328,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                {\n                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID);\n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID); /* <=== */ \n                        data = cashier.getPatientDetails(patientid);\n                        patientSearchType.setValue(\"Patient ID\");\n                        patientID.setText(patientid);\n                        break;\n                    case \"NIC\":"
                  },
                  {
                    "sample" : "patientLog.get(searchID)",
                    "lineNumber" : 328,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                {\n                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID);\n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID); /* <=== */ \n                        data = cashier.getPatientDetails(patientid);\n                        patientSearchType.setValue(\"Patient ID\");\n                        patientID.setText(patientid);\n                        break;\n                    case \"NIC\":"
                  },
                  {
                    "sample" : "patientid",
                    "lineNumber" : 328,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                {\n                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID);\n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID); /* <=== */ \n                        data = cashier.getPatientDetails(patientid);\n                        patientSearchType.setValue(\"Patient ID\");\n                        patientID.setText(patientid);\n                        break;\n                    case \"NIC\":"
                  },
                  {
                    "sample" : "patientid",
                    "lineNumber" : 329,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID);\n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID);\n                        data = cashier.getPatientDetails(patientid); /* <=== */ \n                        patientSearchType.setValue(\"Patient ID\");\n                        patientID.setText(patientid);\n                        break;\n                    case \"NIC\":\n                        "
                  },
                  {
                    "sample" : "value",
                    "lineNumber" : 419,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param value\n     * @return\n     */\n    public ArrayList<ArrayList<String>> getPatientDetails(String value) /* <=== */ \n    {\n        String sql1=\"\";\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+"
                  },
                  {
                    "sample" : "\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\" + \" INNER JOIN patient ON tmp_bill.patient_id = patient.patient_id\" + \" INNER JOIN person ON person.person_id = patient.person_id\" + \" WHERE tmp_bill.patient_id = '\" + value + \"' ;\"",
                    "lineNumber" : 424,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getPatientDetails(String value)\n    {\n        String sql1=\"\";\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+ /* <=== */ \n                \" INNER JOIN patient ON tmp_bill.patient_id = patient.patient_id\"+\n                \" INNER JOIN person ON person.person_id = patient.person_id\"+\n                \" WHERE tmp_bill.patient_id = '\"+value+\"' ;\";\n\n        try{\t\t\t"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 424,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getPatientDetails(String value)\n    {\n        String sql1=\"\";\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+ /* <=== */ \n                \" INNER JOIN patient ON tmp_bill.patient_id = patient.patient_id\"+\n                \" INNER JOIN person ON person.person_id = patient.person_id\"+\n                \" WHERE tmp_bill.patient_id = '\"+value+\"' ;\";\n\n        try{\t\t\t"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 431,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                \" INNER JOIN person ON person.person_id = patient.person_id\"+\n                \" WHERE tmp_bill.patient_id = '\"+value+\"' ;\";\n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql1)",
                    "lineNumber" : 431,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                \" INNER JOIN person ON person.person_id = patient.person_id\"+\n                \" WHERE tmp_bill.patient_id = '\"+value+\"' ;\";\n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 431,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                \" INNER JOIN person ON person.person_id = patient.person_id\"+\n                \" WHERE tmp_bill.patient_id = '\"+value+\"' ;\";\n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 435,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\n                data = super.dbOperator.customSelection(sql1);\n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data); /* <=== */ \n        return data;\n    }\n\n    /**\n     *"
                  }
                ]
              },
              {
                "pathId" : "39997-39993-39992-40012-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-40008-40007-40017-40021-43165-43164-43179",
                "path" : [
                  {
                    "sample" : "patientID",
                    "lineNumber" : 88,
                    "columnNumber" : 79,
                    "fileName" : "/app/code/src/main/java/Pharmacist/Pharmacist.java",
                    "excerpt" : "\t\treturn infoHash;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPrescriptionInfo(String patientID)\n\t{\t\n\t\tString sql =    \"SELECT drugs_dose FROM prescription WHERE patient_id = '\"+ patientID +\"'\" + /* <=== */ \n                                \"AND date = (SELECT MAX(date) FROM prescription);\";\n\t\t\t\t\t\t\n\t\tArrayList<ArrayList<String>> data = null;\t\n\t\ttry{\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql);"
                  },
                  {
                    "sample" : "\"SELECT drugs_dose FROM prescription WHERE patient_id = '\" + patientID + \"'\" + \"AND date = (SELECT MAX(date) FROM prescription);\"",
                    "lineNumber" : 88,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/Pharmacist/Pharmacist.java",
                    "excerpt" : "\t\treturn infoHash;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPrescriptionInfo(String patientID)\n\t{\t\n\t\tString sql =    \"SELECT drugs_dose FROM prescription WHERE patient_id = '\"+ patientID +\"'\" + /* <=== */ \n                                \"AND date = (SELECT MAX(date) FROM prescription);\";\n\t\t\t\t\t\t\n\t\tArrayList<ArrayList<String>> data = null;\t\n\t\ttry{\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 88,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Pharmacist/Pharmacist.java",
                    "excerpt" : "\t\treturn infoHash;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPrescriptionInfo(String patientID)\n\t{\t\n\t\tString sql =    \"SELECT drugs_dose FROM prescription WHERE patient_id = '\"+ patientID +\"'\" + /* <=== */ \n                                \"AND date = (SELECT MAX(date) FROM prescription);\";\n\t\t\t\t\t\t\n\t\tArrayList<ArrayList<String>> data = null;\t\n\t\ttry{\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 93,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Pharmacist/Pharmacist.java",
                    "excerpt" : "\t\tString sql =    \"SELECT drugs_dose FROM prescription WHERE patient_id = '\"+ patientID +\"'\" +\n                                \"AND date = (SELECT MAX(date) FROM prescription);\";\n\t\t\t\t\t\t\n\t\tArrayList<ArrayList<String>> data = null;\t\n\t\ttry{\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;\n\t}"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql)",
                    "lineNumber" : 93,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Pharmacist/Pharmacist.java",
                    "excerpt" : "\t\tString sql =    \"SELECT drugs_dose FROM prescription WHERE patient_id = '\"+ patientID +\"'\" +\n                                \"AND date = (SELECT MAX(date) FROM prescription);\";\n\t\t\t\t\t\t\n\t\tArrayList<ArrayList<String>> data = null;\t\n\t\ttry{\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;\n\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 93,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Pharmacist/Pharmacist.java",
                    "excerpt" : "\t\tString sql =    \"SELECT drugs_dose FROM prescription WHERE patient_id = '\"+ patientID +\"'\" +\n                                \"AND date = (SELECT MAX(date) FROM prescription);\";\n\t\t\t\t\t\t\n\t\tArrayList<ArrayList<String>> data = null;\t\n\t\ttry{\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;\n\t}"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 86,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Pharmacist/Pharmacist.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t//System.out.println(infoHash);\n\t\treturn infoHash;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPrescriptionInfo(String patientID) /* <=== */ \n\t{\t\n\t\tString sql =    \"SELECT drugs_dose FROM prescription WHERE patient_id = '\"+ patientID +\"'\" +\n                                \"AND date = (SELECT MAX(date) FROM prescription);\";\n\t\t\t\t\t\t\n\t\tArrayList<ArrayList<String>> data = null;\t"
                  },
                  {
                    "sample" : "pharmacist.getPrescriptionInfo(searchValue)",
                    "lineNumber" : 132,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
                    "excerpt" : "                patientSearchValue.setStyle(\"-fx-border-color: #999 #999 #999 #999;\");\n                switch (selectedValue) \n                {\n                    case \"Patient ID\":\n                        //System.out.println(\"testing1\");\n                        prescriptionData = pharmacist.getPrescriptionInfo(searchValue); /* <=== */ \n                        break;\n                    case \"Name\":\n                        //System.out.println(\"testing2\");\n                        //patientData = pharmacist.getPrescriptionInfo(searchValue);\n                        break;"
                  },
                  {
                    "sample" : "prescriptionData",
                    "lineNumber" : 132,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
                    "excerpt" : "                patientSearchValue.setStyle(\"-fx-border-color: #999 #999 #999 #999;\");\n                switch (selectedValue) \n                {\n                    case \"Patient ID\":\n                        //System.out.println(\"testing1\");\n                        prescriptionData = pharmacist.getPrescriptionInfo(searchValue); /* <=== */ \n                        break;\n                    case \"Name\":\n                        //System.out.println(\"testing2\");\n                        //patientData = pharmacist.getPrescriptionInfo(searchValue);\n                        break;"
                  },
                  {
                    "sample" : "System.out.println(prescriptionData)",
                    "lineNumber" : 146,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Pharmacist/PharmacistController.java",
                    "excerpt" : "                        break;\n                    default:\n                        break;\n                }\n\n                System.out.println(prescriptionData); /* <=== */ \n                \n                if (prescriptionData.size() > 1)\n                {\n                    fillListSelection(prescriptionData); \n                    "
                  }
                ]
              },
              {
                "pathId" : "20964-20997-20644-20648-20647-20646-20653-20996-20994-20991-21010-61782-61802-70531-21010-21069-21084-21079",
                "path" : [
                  {
                    "sample" : "refund",
                    "lineNumber" : 79,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "    private Label info = new Label();\n    \n    @FXML private void getRefundInfo()\n    {\n        \n        Refund refund = (Refund)refundTable.getSelectionModel().getSelectedItem(); /* <=== */ \n        \n        TablePosition pos = refundTable.getFocusModel().getFocusedCell();\n        int column = pos.getColumn();\n        if (column == 5)\n        {"
                  },
                  {
                    "sample" : "refund",
                    "lineNumber" : 85,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        TablePosition pos = refundTable.getFocusModel().getFocusedCell();\n        int column = pos.getColumn();\n        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID()); /* <=== */ \n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this);\n            popup.message(\"  Make the Refund?\");    \n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 32,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Refund.java",
                    "excerpt" : "        setService(service);\n        setBill(bill);\n        setRefund(refund);\n    }\n\n    public String getPatientID() { /* <=== */ \n        return patientID.get();\n    }\n \n    public void setPatientID(String value) {\n        patientID.set(value);"
                  },
                  {
                    "sample" : "this.patientID",
                    "lineNumber" : 33,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/Refund.java",
                    "excerpt" : "        setBill(bill);\n        setRefund(refund);\n    }\n\n    public String getPatientID() {\n        return patientID.get(); /* <=== */ \n    }\n \n    public void setPatientID(String value) {\n        patientID.set(value);\n    }"
                  },
                  {
                    "sample" : "get()",
                    "lineNumber" : 33,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/Refund.java",
                    "excerpt" : "        setBill(bill);\n        setRefund(refund);\n    }\n\n    public String getPatientID() {\n        return patientID.get(); /* <=== */ \n    }\n \n    public void setPatientID(String value) {\n        patientID.set(value);\n    }"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 32,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Cashier/Refund.java",
                    "excerpt" : "        setService(service);\n        setBill(bill);\n        setRefund(refund);\n    }\n\n    public String getPatientID() { /* <=== */ \n        return patientID.get();\n    }\n \n    public void setPatientID(String value) {\n        patientID.set(value);"
                  },
                  {
                    "sample" : "refund.getPatientID()",
                    "lineNumber" : 85,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        TablePosition pos = refundTable.getFocusModel().getFocusedCell();\n        int column = pos.getColumn();\n        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID()); /* <=== */ \n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this);\n            popup.message(\"  Make the Refund?\");    \n"
                  },
                  {
                    "sample" : "\"refund \" + refund.getPatientID()",
                    "lineNumber" : 85,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        TablePosition pos = refundTable.getFocusModel().getFocusedCell();\n        int column = pos.getColumn();\n        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID()); /* <=== */ \n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this);\n            popup.message(\"  Make the Refund?\");    \n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 85,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        TablePosition pos = refundTable.getFocusModel().getFocusedCell();\n        int column = pos.getColumn();\n        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID()); /* <=== */ \n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this);\n            popup.message(\"  Make the Refund?\");    \n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "label",
                    "lineNumber" : 36,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/PopupAskController.java",
                    "excerpt" : "\n    private Label label;\n    private CashierController cashier;\n    private RefundController refundC;\n    \n    public PopupAskController(Label label, CashierController cashier,RefundController refundC) { /* <=== */ \n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/PopupAsk.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.label = label;"
                  },
                  {
                    "sample" : "label",
                    "lineNumber" : 41,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/PopupAskController.java",
                    "excerpt" : "    public PopupAskController(Label label, CashierController cashier,RefundController refundC) {\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/PopupAsk.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.label = label; /* <=== */ \n        this.cashier = cashier;\n        this.refundC = refundC;\n        \n        try {\n            fxmlLoader.load();            "
                  },
                  {
                    "sample" : "label",
                    "lineNumber" : 36,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/PopupAskController.java",
                    "excerpt" : "\n    private Label label;\n    private CashierController cashier;\n    private RefundController refundC;\n    \n    public PopupAskController(Label label, CashierController cashier,RefundController refundC) { /* <=== */ \n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/PopupAsk.fxml\"));\n        fxmlLoader.setRoot(this);\n        fxmlLoader.setController(this);\n\n        this.label = label;"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 107,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "            scene.setFill(null);\n            stage.initStyle(StageStyle.TRANSPARENT);\n            stage.show();\n        }    \n        \n        if (info.getText().equals(\"1\")) /* <=== */ \n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText());\n        "
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 111,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  },
                  {
                    "sample" : "println(info.getText())",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  }
                ]
              },
              {
                "pathId" : "63356-63347-63346-63370-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-63366-63365-63375",
                "path" : [
                  {
                    "sample" : "userID",
                    "lineNumber" : 320,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "        public ArrayList<ArrayList<String>> getName(String userID)\n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+userID+\"';\"; /* <=== */ \n\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n"
                  },
                  {
                    "sample" : "\"SELECT \" + \"person.first_name, person.last_name, sys_user.user_type \" + \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \" + \"WHERE sys_user.user_id = '\" + userID + \"';\"",
                    "lineNumber" : 317,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            return result;\n\t}\n        \n        public ArrayList<ArrayList<String>> getName(String userID)\n\t{\t\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"person.first_name, person.last_name, sys_user.user_type \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+userID+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 317,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            return result;\n\t}\n        \n        public ArrayList<ArrayList<String>> getName(String userID)\n\t{\t\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"person.first_name, person.last_name, sys_user.user_type \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+userID+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 326,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "dbOperator.customSelection(sql)",
                    "lineNumber" : 326,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 326,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 329,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql);\n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data); /* <=== */ \n            return data;\n\t}\n        \n        public ArrayList<ArrayList<String>> getUserNameAndID()\n\t{\t"
                  }
                ]
              },
              {
                "pathId" : "3088-3091-4-3-62436-62435-62680-62679-62678-62677-62684-62689-62688-62709-62715-62721-62720-62718-62784-58914-58943",
                "path" : [
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 30,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n    /**\n     * Constructor of the class\n     * @param username username of the Administrator\n     */\n    Admin(String username)  /* <=== */ \n    {\n        super(username);\n    }\n    \n    /**"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 79,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t\t\tdbOperator.useDatabse(database);\n                        \n\t\t}catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n\t}\n\t\n\tpublic User(String username) /* <=== */ \n\t{\n            InputStream inputStream = null;\n            \n            try {\n                Properties prop = new Properties();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass()",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass().getClassLoader()",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass().getClassLoader().getResourceAsStream(propFileName)",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 87,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 89,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) { /* <=== */ \n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 90,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) {\n                        prop.load(inputStream); /* <=== */ \n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 90,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) {\n                        prop.load(inputStream); /* <=== */ \n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 96,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\"); /* <=== */ \n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                "
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 98,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "prop.getProperty(\"database\")",
                    "lineNumber" : 98,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "this.database",
                    "lineNumber" : 98,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "this.database",
                    "lineNumber" : 115,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            \n            this.dbOperator = new DatabaseOperator();\n            try{\n                dbOperator.connect(dbUsername,dbPassword);\n                dbOperator.useDatabse(database); /* <=== */ \n                this.username = username;\n                ArrayList<ArrayList<String>> result = dbOperator.showTableData(\"sys_user\",\"user_id,user_type\",(\"user_name = '\" + username + \"'\"));\n                this.userID = result.get(0).get(0);\n                this.userType = result.get(0).get(1);\n"
                  },
                  {
                    "sample" : "databaseName",
                    "lineNumber" : 175,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\trs.close();\n        stmt.close();\n        return dbNames;\n\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry"
                  },
                  {
                    "sample" : "System.out.println(\"\\n### Database Changed to \" + databaseName + \"###\\n\")",
                    "lineNumber" : 183,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\"); /* <=== */ \n\t\t\tcurrentDatabaseName = databaseName;\n\t\t\trs.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{"
                  }
                ]
              },
              {
                "pathId" : "23674-23690-23684-23683-23705-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-23701-23700-23710-23714-24317-24316-24346-24345-24344-24354-24353-24363-24362-24361-24360-24359-24376-24374-24373-24389-24388-24387-24386-24390",
                "path" : [
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 847,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "        public ArrayList<ArrayList<String>> getPatientAttendence(String doctorID)\n    {\n\n        String sql = \"\";\n\n        if ( doctorID.equals(\"All\") ) { /* <=== */ \n\n            sql =   \"SELECT date FROM appointment WHERE date > (CURRENT_DATE - INTERVAL 12 MONTH) ORDER BY date ASC;\";\n\n        } else {\n"
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 854,
                    "columnNumber" : 94,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            sql =   \"SELECT date FROM appointment WHERE date > (CURRENT_DATE - INTERVAL 12 MONTH) ORDER BY date ASC;\";\n\n        } else {\n\n            sql =   \"SELECT date FROM appointment \"+\n                    \"WHERE ( date > (CURRENT_DATE - INTERVAL 12 MONTH) ) & (slmc_reg_no = '\"+doctorID+\"') \"+ /* <=== */ \n                    \"ORDER BY date ASC;\";\n        }    \n\n\n        ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "\"SELECT date FROM appointment \" + \"WHERE ( date > (CURRENT_DATE - INTERVAL 12 MONTH) ) & (slmc_reg_no = '\" + doctorID + \"') \" + \"ORDER BY date ASC;\"",
                    "lineNumber" : 853,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            sql =   \"SELECT date FROM appointment WHERE date > (CURRENT_DATE - INTERVAL 12 MONTH) ORDER BY date ASC;\";\n\n        } else {\n\n            sql =   \"SELECT date FROM appointment \"+ /* <=== */ \n                    \"WHERE ( date > (CURRENT_DATE - INTERVAL 12 MONTH) ) & (slmc_reg_no = '\"+doctorID+\"') \"+\n                    \"ORDER BY date ASC;\";\n        }    \n\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 853,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            sql =   \"SELECT date FROM appointment WHERE date > (CURRENT_DATE - INTERVAL 12 MONTH) ORDER BY date ASC;\";\n\n        } else {\n\n            sql =   \"SELECT date FROM appointment \"+ /* <=== */ \n                    \"WHERE ( date > (CURRENT_DATE - INTERVAL 12 MONTH) ) & (slmc_reg_no = '\"+doctorID+\"') \"+\n                    \"ORDER BY date ASC;\";\n        }    \n\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 861,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "        }    \n\n\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}   \n\n        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql)",
                    "lineNumber" : 861,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "        }    \n\n\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}   \n\n        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 861,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "        }    \n\n\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}   \n\n        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 842,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            //System.out.println(data);\n            return data2;\n        \n        }\n        \n        public ArrayList<ArrayList<String>> getPatientAttendence(String doctorID) /* <=== */ \n    {\n\n        String sql = \"\";\n\n        if ( doctorID.equals(\"All\") ) {"
                  },
                  {
                    "sample" : "doc.getPatientAttendence(doc.slmcRegNo)",
                    "lineNumber" : 158,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "   @FXML private NumberAxis yaxis ;\n   @FXML public void fillAreaChart()\n   {\n        \n        \n        ArrayList<ArrayList<String>> data = doc.getPatientAttendence(doc.slmcRegNo); /* <=== */ \n        String date = \"\";\n        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 158,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "   @FXML private NumberAxis yaxis ;\n   @FXML public void fillAreaChart()\n   {\n        \n        \n        ArrayList<ArrayList<String>> data = doc.getPatientAttendence(doc.slmcRegNo); /* <=== */ \n        String date = \"\";\n        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 164,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        String date = \"\";\n        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size(); /* <=== */ \n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);"
                  },
                  {
                    "sample" : "data.size()",
                    "lineNumber" : 164,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        String date = \"\";\n        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size(); /* <=== */ \n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);"
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 164,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        String date = \"\";\n        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size(); /* <=== */ \n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);"
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 165,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++) /* <=== */ \n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 165,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++) /* <=== */ \n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 167,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0); /* <=== */ \n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 167,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0); /* <=== */ \n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);"
                  },
                  {
                    "sample" : "data.get(i)",
                    "lineNumber" : 167,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0); /* <=== */ \n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);"
                  },
                  {
                    "sample" : "data.get(i).get(0)",
                    "lineNumber" : 167,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0); /* <=== */ \n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 167,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0); /* <=== */ \n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 169,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1); /* <=== */ \n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);\n            \n            System.out.println(Month);"
                  },
                  {
                    "sample" : "LocalDate.parse(date, fomatter1)",
                    "lineNumber" : 169,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1); /* <=== */ \n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);\n            \n            System.out.println(Month);"
                  },
                  {
                    "sample" : "date2",
                    "lineNumber" : 169,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1); /* <=== */ \n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);\n            \n            System.out.println(Month);"
                  },
                  {
                    "sample" : "date2",
                    "lineNumber" : 172,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2); /* <=== */ \n            \n            System.out.println(Month);\n            if ( months.contains(Month) ) {\n            \n                int indx = months.indexOf(Month);"
                  },
                  {
                    "sample" : "fomatter2",
                    "lineNumber" : 172,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2); /* <=== */ \n            \n            System.out.println(Month);\n            if ( months.contains(Month) ) {\n            \n                int indx = months.indexOf(Month);"
                  },
                  {
                    "sample" : "fomatter2.format(date2)",
                    "lineNumber" : 172,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2); /* <=== */ \n            \n            System.out.println(Month);\n            if ( months.contains(Month) ) {\n            \n                int indx = months.indexOf(Month);"
                  },
                  {
                    "sample" : "Month",
                    "lineNumber" : 172,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2); /* <=== */ \n            \n            System.out.println(Month);\n            if ( months.contains(Month) ) {\n            \n                int indx = months.indexOf(Month);"
                  },
                  {
                    "sample" : "System.out.println(Month)",
                    "lineNumber" : 174,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);\n            \n            System.out.println(Month); /* <=== */ \n            if ( months.contains(Month) ) {\n            \n                int indx = months.indexOf(Month);\n                int tmp = patients.remove(indx);\n                patients.add(indx,(tmp+1));"
                  }
                ]
              },
              {
                "pathId" : "54526-54546-50530-50535-50534-50562-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50558-50557-50571-50570-50569-50579-50578-50589-50588-50587-50586-50585-50595-50599-50598-50594-50600-50604-54542-54541-54547",
                "path" : [
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 808,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        if (tmpType.equals(\"Doctor\"))\n        {\n            String doctorID = \"\";\n            try\n            {\n                doctorID = ((String)doctorCombo.getValue()).split(\" \")[0]; /* <=== */ \n            }catch(Exception e){}\n            ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";"
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 810,
                    "columnNumber" : 68,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            String doctorID = \"\";\n            try\n            {\n                doctorID = ((String)doctorCombo.getValue()).split(\" \")[0];\n            }catch(Exception e){}\n            ArrayList<String> data = receptionist.getAvailableDays(doctorID); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "registrtionNo",
                    "lineNumber" : 939,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param registrtionNo doctors registration number\n         * @return ArrayList<String> of days that doctor available in the hospital\n         */\n        public ArrayList<String> getAvailableDays(String registrtionNo) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT day FROM doctor_availability \" +\n\t\t\t\t\t\t\"WHERE slmc_reg_no = '\" + registrtionNo + \"'\"+\n\t\t\t\t\t\t\"ORDER BY day ASC;\";"
                  },
                  {
                    "sample" : "\"SELECT day FROM doctor_availability \" + \"WHERE slmc_reg_no = '\" + registrtionNo + \"'\" + \"ORDER BY day ASC;\"",
                    "lineNumber" : 942,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return ArrayList<String> of days that doctor available in the hospital\n         */\n        public ArrayList<String> getAvailableDays(String registrtionNo)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT day FROM doctor_availability \" + /* <=== */ \n\t\t\t\t\t\t\"WHERE slmc_reg_no = '\" + registrtionNo + \"'\"+\n\t\t\t\t\t\t\"ORDER BY day ASC;\";\n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 942,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return ArrayList<String> of days that doctor available in the hospital\n         */\n        public ArrayList<String> getAvailableDays(String registrtionNo)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT day FROM doctor_availability \" + /* <=== */ \n\t\t\t\t\t\t\"WHERE slmc_reg_no = '\" + registrtionNo + \"'\"+\n\t\t\t\t\t\t\"ORDER BY day ASC;\";\n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 950,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 950,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 950,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 954,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 954,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 954,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 955,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 955,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 957,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 957,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 957,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 957,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 957,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 958,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 960,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 960,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 958,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 939,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param registrtionNo doctors registration number\n         * @return ArrayList<String> of days that doctor available in the hospital\n         */\n        public ArrayList<String> getAvailableDays(String registrtionNo) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT day FROM doctor_availability \" +\n\t\t\t\t\t\t\"WHERE slmc_reg_no = '\" + registrtionNo + \"'\"+\n\t\t\t\t\t\t\"ORDER BY day ASC;\";"
                  },
                  {
                    "sample" : "receptionist.getAvailableDays(doctorID)",
                    "lineNumber" : 810,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            String doctorID = \"\";\n            try\n            {\n                doctorID = ((String)doctorCombo.getValue()).split(\" \")[0];\n            }catch(Exception e){}\n            ArrayList<String> data = receptionist.getAvailableDays(doctorID); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 810,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            String doctorID = \"\";\n            try\n            {\n                doctorID = ((String)doctorCombo.getValue()).split(\" \")[0];\n            }catch(Exception e){}\n            ArrayList<String> data = receptionist.getAvailableDays(doctorID); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 811,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            try\n            {\n                doctorID = ((String)doctorCombo.getValue()).split(\" \")[0];\n            }catch(Exception e){}\n            ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n            System.out.println(data); /* <=== */ \n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           \n                String number = Integer.toString(i+1);"
                  }
                ]
              },
              {
                "pathId" : "52914-52925-52943-48210-48226-48215-48214-48240-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-48236-48235-48245-48249-52939-52938-52955-52964-52972-52999-53008-53017-53026-53064-53063-53062-53061-53067",
                "path" : [
                  {
                    "sample" : "patientid",
                    "lineNumber" : 343,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                }\n                else{ showPopup(\"hmsxxxxpa\",patientSearchBox); }\n                \n            } else if (selectedValue.equals(\"Name\")) {\n            \n                String patientid = patientLog.get(searchValue); /* <=== */ \n                \n                String result = Validate.patientID(patientid);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {"
                  },
                  {
                    "sample" : "patientid",
                    "lineNumber" : 345,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                \n            } else if (selectedValue.equals(\"Name\")) {\n            \n                String patientid = patientLog.get(searchValue);\n                \n                String result = Validate.patientID(patientid); /* <=== */ \n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(patientid);\n                    System.out.println(data);"
                  },
                  {
                    "sample" : "patientid",
                    "lineNumber" : 349,
                    "columnNumber" : 85,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                \n                String result = Validate.patientID(patientid);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(patientid); /* <=== */ \n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 155,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\t//System.out.println(data);\n\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID) /* <=== */ \n\t{\t\n\t\tString sql = \t\"SELECT \"+\n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 161,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t{\t\n\t\tString sql = \t\"SELECT \"+\n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+\n\t\t\t\t\t\t\"WHERE patient_id = '\" + patientID + \"';\"; /* <=== */ \n\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "\"SELECT \" + \"person.*, \" + \"patient.* \" + \"FROM person INNER JOIN patient ON patient.person_id = person.person_id \" + \"WHERE patient_id = '\" + patientID + \"';\"",
                    "lineNumber" : 157,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID)\n\t{\t\n\t\tString sql = \t\"SELECT \"+ /* <=== */ \n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+\n\t\t\t\t\t\t\"WHERE patient_id = '\" + patientID + \"';\";\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 157,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID)\n\t{\t\n\t\tString sql = \t\"SELECT \"+ /* <=== */ \n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+\n\t\t\t\t\t\t\"WHERE patient_id = '\" + patientID + \"';\";\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 167,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql)",
                    "lineNumber" : 167,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 167,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 155,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\t//System.out.println(data);\n\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID) /* <=== */ \n\t{\t\n\t\tString sql = \t\"SELECT \"+\n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+"
                  },
                  {
                    "sample" : "receptionist.getPatientInfo(patientid)",
                    "lineNumber" : 349,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                \n                String result = Validate.patientID(patientid);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(patientid); /* <=== */ \n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 349,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                \n                String result = Validate.patientID(patientid);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(patientid); /* <=== */ \n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 351,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(patientid);\n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7)); /* <=== */ \n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);\n                    if (gender.equals(\"m\")){gender = \"Male\";}\n                    else {gender = \"Female\";}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 352,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(patientid);\n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8)); /* <=== */ \n\n                    String gender = data.get(1).get(3);\n                    if (gender.equals(\"m\")){gender = \"Male\";}\n                    else {gender = \"Female\";}\n"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 354,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(patientid);\n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3); /* <=== */ \n                    if (gender.equals(\"m\")){gender = \"Male\";}\n                    else {gender = \"Female\";}\n\n                    patientGender.setValue(gender);\n"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 360,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    if (gender.equals(\"m\")){gender = \"Male\";}\n                    else {gender = \"Female\";}\n\n                    patientGender.setValue(gender);\n\n                    patientNIC.setText(data.get(1).get(2)); /* <=== */ \n\n                    patientMobile.setText(data.get(1).get(6));\n                    patientEmail.setText(data.get(1).get(9));\n                    \n                    String tmp[] = data.get(1).get(5).split(\"\\\\|\");"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 362,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "\n                    patientGender.setValue(gender);\n\n                    patientNIC.setText(data.get(1).get(2));\n\n                    patientMobile.setText(data.get(1).get(6)); /* <=== */ \n                    patientEmail.setText(data.get(1).get(9));\n                    \n                    String tmp[] = data.get(1).get(5).split(\"\\\\|\");\n                    String ad = \"\";\n                    for(int i = 0; i < tmp.length; i++)"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 363,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientGender.setValue(gender);\n\n                    patientNIC.setText(data.get(1).get(2));\n\n                    patientMobile.setText(data.get(1).get(6));\n                    patientEmail.setText(data.get(1).get(9)); /* <=== */ \n                    \n                    String tmp[] = data.get(1).get(5).split(\"\\\\|\");\n                    String ad = \"\";\n                    for(int i = 0; i < tmp.length; i++)\n                    {"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 365,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientNIC.setText(data.get(1).get(2));\n\n                    patientMobile.setText(data.get(1).get(6));\n                    patientEmail.setText(data.get(1).get(9));\n                    \n                    String tmp[] = data.get(1).get(5).split(\"\\\\|\"); /* <=== */ \n                    String ad = \"\";\n                    for(int i = 0; i < tmp.length; i++)\n                    {\n                        ad += ( \" \" + tmp[i]); \n                    }    "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 373,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    {\n                        ad += ( \" \" + tmp[i]); \n                    }    \n                    patientAddress.setText(ad);\n\n                    String tmpDOB = data.get(1).get(4); /* <=== */ \n                    System.out.println(tmpDOB);\n                    int year = Integer.parseInt(tmpDOB.substring(0,4));\n                    int month = Integer.parseInt(tmpDOB.substring(5,7));        \n                    int date = Integer.parseInt(tmpDOB.substring(8,10));        \n                    patientDOB.setValue(LocalDate.of(year, month, date));"
                  },
                  {
                    "sample" : "data.get(1)",
                    "lineNumber" : 373,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    {\n                        ad += ( \" \" + tmp[i]); \n                    }    \n                    patientAddress.setText(ad);\n\n                    String tmpDOB = data.get(1).get(4); /* <=== */ \n                    System.out.println(tmpDOB);\n                    int year = Integer.parseInt(tmpDOB.substring(0,4));\n                    int month = Integer.parseInt(tmpDOB.substring(5,7));        \n                    int date = Integer.parseInt(tmpDOB.substring(8,10));        \n                    patientDOB.setValue(LocalDate.of(year, month, date));"
                  },
                  {
                    "sample" : "data.get(1).get(4)",
                    "lineNumber" : 373,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    {\n                        ad += ( \" \" + tmp[i]); \n                    }    \n                    patientAddress.setText(ad);\n\n                    String tmpDOB = data.get(1).get(4); /* <=== */ \n                    System.out.println(tmpDOB);\n                    int year = Integer.parseInt(tmpDOB.substring(0,4));\n                    int month = Integer.parseInt(tmpDOB.substring(5,7));        \n                    int date = Integer.parseInt(tmpDOB.substring(8,10));        \n                    patientDOB.setValue(LocalDate.of(year, month, date));"
                  },
                  {
                    "sample" : "tmpDOB",
                    "lineNumber" : 373,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    {\n                        ad += ( \" \" + tmp[i]); \n                    }    \n                    patientAddress.setText(ad);\n\n                    String tmpDOB = data.get(1).get(4); /* <=== */ \n                    System.out.println(tmpDOB);\n                    int year = Integer.parseInt(tmpDOB.substring(0,4));\n                    int month = Integer.parseInt(tmpDOB.substring(5,7));        \n                    int date = Integer.parseInt(tmpDOB.substring(8,10));        \n                    patientDOB.setValue(LocalDate.of(year, month, date));"
                  },
                  {
                    "sample" : "System.out.println(tmpDOB)",
                    "lineNumber" : 374,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                        ad += ( \" \" + tmp[i]); \n                    }    \n                    patientAddress.setText(ad);\n\n                    String tmpDOB = data.get(1).get(4);\n                    System.out.println(tmpDOB); /* <=== */ \n                    int year = Integer.parseInt(tmpDOB.substring(0,4));\n                    int month = Integer.parseInt(tmpDOB.substring(5,7));        \n                    int date = Integer.parseInt(tmpDOB.substring(8,10));        \n                    patientDOB.setValue(LocalDate.of(year, month, date));\n                    "
                  }
                ]
              },
              {
                "pathId" : "63740-63746-63754-70586-52703-52721-48210-48226-48215-48214-48240-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-48236-48235-48245-48249-52717-52716-52733-52742-52750-52777-52786-52795-52804-52842-52841-52840-52839-52845",
                "path" : [
                  {
                    "sample" : "patientID",
                    "lineNumber" : 82,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/Validate.java",
                    "excerpt" : "     */\n    public static String patientID(String patientID)\n    {\n            String result = \"hmsxxxxpa\";\n\n            if ( patientID.length() == 9 ) /* <=== */ \n            {\n                    if ( patientID.substring(0,3).equals(\"hms\") )\n                    {\n                            if ( patientID.substring(7,9).equals(\"pa\") )\n                            {"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 84,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/Validate.java",
                    "excerpt" : "    {\n            String result = \"hmsxxxxpa\";\n\n            if ( patientID.length() == 9 )\n            {\n                    if ( patientID.substring(0,3).equals(\"hms\") ) /* <=== */ \n                    {\n                            if ( patientID.substring(7,9).equals(\"pa\") )\n                            {\n                                    result = \"1\";\n                            }"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 86,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/Validate.java",
                    "excerpt" : "\n            if ( patientID.length() == 9 )\n            {\n                    if ( patientID.substring(0,3).equals(\"hms\") )\n                    {\n                            if ( patientID.substring(7,9).equals(\"pa\") ) /* <=== */ \n                            {\n                                    result = \"1\";\n                            }\n                    }\n            }"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 78,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/Validate.java",
                    "excerpt" : "    /**\n     * \n     * @param patientID Patient ID of the patient\n     * @return String \"1\" if correct else return correct format\n     */\n    public static String patientID(String patientID) /* <=== */ \n    {\n            String result = \"hmsxxxxpa\";\n\n            if ( patientID.length() == 9 )\n            {"
                  },
                  {
                    "sample" : "searchValue",
                    "lineNumber" : 299,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            String selectedValue = patientSearchCombo.getSelectionModel().getSelectedItem().toString();\n            String searchValue = patientSearchBox.getText();\n            \n            if (selectedValue.equals(\"Patient ID\"))\n            {\n                String result = Validate.patientID(searchValue); /* <=== */ \n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(searchValue);\n                    System.out.println(data);"
                  },
                  {
                    "sample" : "searchValue",
                    "lineNumber" : 303,
                    "columnNumber" : 85,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            {\n                String result = Validate.patientID(searchValue);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(searchValue); /* <=== */ \n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 155,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\t//System.out.println(data);\n\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID) /* <=== */ \n\t{\t\n\t\tString sql = \t\"SELECT \"+\n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 161,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t{\t\n\t\tString sql = \t\"SELECT \"+\n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+\n\t\t\t\t\t\t\"WHERE patient_id = '\" + patientID + \"';\"; /* <=== */ \n\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "\"SELECT \" + \"person.*, \" + \"patient.* \" + \"FROM person INNER JOIN patient ON patient.person_id = person.person_id \" + \"WHERE patient_id = '\" + patientID + \"';\"",
                    "lineNumber" : 157,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID)\n\t{\t\n\t\tString sql = \t\"SELECT \"+ /* <=== */ \n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+\n\t\t\t\t\t\t\"WHERE patient_id = '\" + patientID + \"';\";\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 157,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID)\n\t{\t\n\t\tString sql = \t\"SELECT \"+ /* <=== */ \n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+\n\t\t\t\t\t\t\"WHERE patient_id = '\" + patientID + \"';\";\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 167,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql)",
                    "lineNumber" : 167,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 167,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 155,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\t//System.out.println(data);\n\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID) /* <=== */ \n\t{\t\n\t\tString sql = \t\"SELECT \"+\n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+"
                  },
                  {
                    "sample" : "receptionist.getPatientInfo(searchValue)",
                    "lineNumber" : 303,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            {\n                String result = Validate.patientID(searchValue);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(searchValue); /* <=== */ \n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 303,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            {\n                String result = Validate.patientID(searchValue);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(searchValue); /* <=== */ \n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 305,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(searchValue);\n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7)); /* <=== */ \n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);\n                    if (gender.equals(\"m\")){gender = \"Male\";}\n                    else {gender = \"Female\";}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 306,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(searchValue);\n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8)); /* <=== */ \n\n                    String gender = data.get(1).get(3);\n                    if (gender.equals(\"m\")){gender = \"Male\";}\n                    else {gender = \"Female\";}\n"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(searchValue);\n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3); /* <=== */ \n                    if (gender.equals(\"m\")){gender = \"Male\";}\n                    else {gender = \"Female\";}\n\n                    patientGender.setValue(gender);\n"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 314,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    if (gender.equals(\"m\")){gender = \"Male\";}\n                    else {gender = \"Female\";}\n\n                    patientGender.setValue(gender);\n\n                    patientNIC.setText(data.get(1).get(2)); /* <=== */ \n\n                    patientMobile.setText(data.get(1).get(6));\n                    patientEmail.setText(data.get(1).get(9));\n                    \n                    String tmp[] = data.get(1).get(5).split(\"\\\\|\");"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 316,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "\n                    patientGender.setValue(gender);\n\n                    patientNIC.setText(data.get(1).get(2));\n\n                    patientMobile.setText(data.get(1).get(6)); /* <=== */ \n                    patientEmail.setText(data.get(1).get(9));\n                    \n                    String tmp[] = data.get(1).get(5).split(\"\\\\|\");\n                    String ad = \"\";\n                    for(int i = 0; i < tmp.length; i++)"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 317,
                    "columnNumber" : 42,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientGender.setValue(gender);\n\n                    patientNIC.setText(data.get(1).get(2));\n\n                    patientMobile.setText(data.get(1).get(6));\n                    patientEmail.setText(data.get(1).get(9)); /* <=== */ \n                    \n                    String tmp[] = data.get(1).get(5).split(\"\\\\|\");\n                    String ad = \"\";\n                    for(int i = 0; i < tmp.length; i++)\n                    {"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 319,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    patientNIC.setText(data.get(1).get(2));\n\n                    patientMobile.setText(data.get(1).get(6));\n                    patientEmail.setText(data.get(1).get(9));\n                    \n                    String tmp[] = data.get(1).get(5).split(\"\\\\|\"); /* <=== */ \n                    String ad = \"\";\n                    for(int i = 0; i < tmp.length; i++)\n                    {\n                        ad += ( \" \" + tmp[i]); \n                    }    "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 327,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    {\n                        ad += ( \" \" + tmp[i]); \n                    }    \n                    patientAddress.setText(ad);\n\n                    String tmpDOB = data.get(1).get(4); /* <=== */ \n                    System.out.println(tmpDOB);\n                    int year = Integer.parseInt(tmpDOB.substring(0,4));\n                    int month = Integer.parseInt(tmpDOB.substring(5,7));        \n                    int date = Integer.parseInt(tmpDOB.substring(8,10));        \n                    patientDOB.setValue(LocalDate.of(year, month, date));"
                  },
                  {
                    "sample" : "data.get(1)",
                    "lineNumber" : 327,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    {\n                        ad += ( \" \" + tmp[i]); \n                    }    \n                    patientAddress.setText(ad);\n\n                    String tmpDOB = data.get(1).get(4); /* <=== */ \n                    System.out.println(tmpDOB);\n                    int year = Integer.parseInt(tmpDOB.substring(0,4));\n                    int month = Integer.parseInt(tmpDOB.substring(5,7));        \n                    int date = Integer.parseInt(tmpDOB.substring(8,10));        \n                    patientDOB.setValue(LocalDate.of(year, month, date));"
                  },
                  {
                    "sample" : "data.get(1).get(4)",
                    "lineNumber" : 327,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    {\n                        ad += ( \" \" + tmp[i]); \n                    }    \n                    patientAddress.setText(ad);\n\n                    String tmpDOB = data.get(1).get(4); /* <=== */ \n                    System.out.println(tmpDOB);\n                    int year = Integer.parseInt(tmpDOB.substring(0,4));\n                    int month = Integer.parseInt(tmpDOB.substring(5,7));        \n                    int date = Integer.parseInt(tmpDOB.substring(8,10));        \n                    patientDOB.setValue(LocalDate.of(year, month, date));"
                  },
                  {
                    "sample" : "tmpDOB",
                    "lineNumber" : 327,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                    {\n                        ad += ( \" \" + tmp[i]); \n                    }    \n                    patientAddress.setText(ad);\n\n                    String tmpDOB = data.get(1).get(4); /* <=== */ \n                    System.out.println(tmpDOB);\n                    int year = Integer.parseInt(tmpDOB.substring(0,4));\n                    int month = Integer.parseInt(tmpDOB.substring(5,7));        \n                    int date = Integer.parseInt(tmpDOB.substring(8,10));        \n                    patientDOB.setValue(LocalDate.of(year, month, date));"
                  },
                  {
                    "sample" : "System.out.println(tmpDOB)",
                    "lineNumber" : 328,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                        ad += ( \" \" + tmp[i]); \n                    }    \n                    patientAddress.setText(ad);\n\n                    String tmpDOB = data.get(1).get(4);\n                    System.out.println(tmpDOB); /* <=== */ \n                    int year = Integer.parseInt(tmpDOB.substring(0,4));\n                    int month = Integer.parseInt(tmpDOB.substring(5,7));        \n                    int date = Integer.parseInt(tmpDOB.substring(8,10));        \n                    patientDOB.setValue(LocalDate.of(year, month, date));\n                    "
                  }
                ]
              },
              {
                "pathId" : "17692-17691-17690-17757-16675-16696-69596-17757-18027-16723-16732-16731-16749-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-16745-16744-16754",
                "path" : [
                  {
                    "sample" : "this.patientID",
                    "lineNumber" : 309,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        //System.out.println(\"Testing\");\n    } \n    \n    public void searchPatientBill()\n    {\n        String searchID = patientID.getText();  /* <=== */ \n        \n        if (patientSearchType.getSelectionModel().getSelectedItem() != null )\n        {    \n            String selectedValue = patientSearchType.getSelectionModel().getSelectedItem().toString();\n"
                  },
                  {
                    "sample" : "getText()",
                    "lineNumber" : 309,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        //System.out.println(\"Testing\");\n    } \n    \n    public void searchPatientBill()\n    {\n        String searchID = patientID.getText();  /* <=== */ \n        \n        if (patientSearchType.getSelectionModel().getSelectedItem() != null )\n        {    \n            String selectedValue = patientSearchType.getSelectionModel().getSelectedItem().toString();\n"
                  },
                  {
                    "sample" : "searchID",
                    "lineNumber" : 309,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        //System.out.println(\"Testing\");\n    } \n    \n    public void searchPatientBill()\n    {\n        String searchID = patientID.getText();  /* <=== */ \n        \n        if (patientSearchType.getSelectionModel().getSelectedItem() != null )\n        {    \n            String selectedValue = patientSearchType.getSelectionModel().getSelectedItem().toString();\n"
                  },
                  {
                    "sample" : "searchID",
                    "lineNumber" : 325,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                patientSearchType.setStyle(\"-fx-border-color: #999 #999 #999 #999;\");\n                patientID.setStyle(\"-fx-border-color: #999 #999 #999 #999;\");\n                switch (selectedValue) \n                {\n                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID); /* <=== */ \n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID);\n                        data = cashier.getPatientDetails(patientid);\n                        patientSearchType.setValue(\"Patient ID\");"
                  },
                  {
                    "sample" : "value",
                    "lineNumber" : 419,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param value\n     * @return\n     */\n    public ArrayList<ArrayList<String>> getPatientDetails(String value) /* <=== */ \n    {\n        String sql1=\"\";\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+"
                  },
                  {
                    "sample" : "value",
                    "lineNumber" : 427,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+\n                \" INNER JOIN patient ON tmp_bill.patient_id = patient.patient_id\"+\n                \" INNER JOIN person ON person.person_id = patient.person_id\"+\n                \" WHERE tmp_bill.patient_id = '\"+value+\"' ;\"; /* <=== */ \n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "value",
                    "lineNumber" : 419,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param value\n     * @return\n     */\n    public ArrayList<ArrayList<String>> getPatientDetails(String value) /* <=== */ \n    {\n        String sql1=\"\";\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+"
                  },
                  {
                    "sample" : "searchID",
                    "lineNumber" : 325,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                patientSearchType.setStyle(\"-fx-border-color: #999 #999 #999 #999;\");\n                patientID.setStyle(\"-fx-border-color: #999 #999 #999 #999;\");\n                switch (selectedValue) \n                {\n                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID); /* <=== */ \n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID);\n                        data = cashier.getPatientDetails(patientid);\n                        patientSearchType.setValue(\"Patient ID\");"
                  },
                  {
                    "sample" : "searchID",
                    "lineNumber" : 390,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                billDate.setText(dateFormat.format(date));\n                patientTotal.setText(Integer.toString(service + vatamnt));\n                serviceFees.setText(Integer.toString(service));\n                vat.setText(Integer.toString(vatamnt));\n\n                data = cashier.getDoctorName(searchID); /* <=== */ \n                System.out.println(data);\n                \n                try{\n                    docName.setText(data.get(1).get(0) + \" \" + data.get(1).get(1));\n                }catch(Exception e){}"
                  },
                  {
                    "sample" : "value",
                    "lineNumber" : 444,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param value\n     * @return\n     */\n    public ArrayList<ArrayList<String>> getDoctorName(String value) /* <=== */ \n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT person.first_name,person.last_name \"+"
                  },
                  {
                    "sample" : "\"SELECT person.first_name,person.last_name \" + \"FROM person INNER JOIN doctor ON person.user_id = doctor.user_id \" + \"WHERE doctor.slmc_reg_no = (SELECT consultant_id FROM tmp_bill WHERE patient_id = '\" + value + \"');\"",
                    "lineNumber" : 449,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getDoctorName(String value)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT person.first_name,person.last_name \"+ /* <=== */ \n                        \"FROM person INNER JOIN doctor ON person.user_id = doctor.user_id \"+\n                        \"WHERE doctor.slmc_reg_no = (SELECT consultant_id FROM tmp_bill WHERE patient_id = '\"+value+\"');\";\n\n        try{\t\t\t\n"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 449,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getDoctorName(String value)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT person.first_name,person.last_name \"+ /* <=== */ \n                        \"FROM person INNER JOIN doctor ON person.user_id = doctor.user_id \"+\n                        \"WHERE doctor.slmc_reg_no = (SELECT consultant_id FROM tmp_bill WHERE patient_id = '\"+value+\"');\";\n\n        try{\t\t\t\n"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 455,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                        \"FROM person INNER JOIN doctor ON person.user_id = doctor.user_id \"+\n                        \"WHERE doctor.slmc_reg_no = (SELECT consultant_id FROM tmp_bill WHERE patient_id = '\"+value+\"');\";\n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql1)",
                    "lineNumber" : 455,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                        \"FROM person INNER JOIN doctor ON person.user_id = doctor.user_id \"+\n                        \"WHERE doctor.slmc_reg_no = (SELECT consultant_id FROM tmp_bill WHERE patient_id = '\"+value+\"');\";\n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 455,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                        \"FROM person INNER JOIN doctor ON person.user_id = doctor.user_id \"+\n                        \"WHERE doctor.slmc_reg_no = (SELECT consultant_id FROM tmp_bill WHERE patient_id = '\"+value+\"');\";\n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 459,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\n                data = super.dbOperator.customSelection(sql1);\n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data); /* <=== */ \n        return data;\n\n    }\n    \n    public ArrayList<ArrayList<String>> getCancelledDocAppointments()"
                  }
                ]
              },
              {
                "pathId" : "56322-56325-56330-58458-58457-58455-58549-62451-63437-63428-63427-63452-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-63448-63447-63457",
                "path" : [
                  {
                    "sample" : "user",
                    "lineNumber" : 1369,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "    \n    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(receptionist); /* <=== */ \n        user.load();\n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1369,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "    \n    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(receptionist); /* <=== */ \n        user.load();\n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1370,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(receptionist);\n        user.load(); /* <=== */ \n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();\n        }"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 90,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "            stage.close();\n        }\n    }\n    \n    \n    public void load() /* <=== */ \n    {\n        fillUser();\n    }\n    \n    "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "    }\n    \n    \n    public void load()\n    {\n        fillUser(); /* <=== */ \n    }\n    \n    \n    \n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 47,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "    \n    @FXML private ImageView profPic;\n    @FXML private Label userN;\n    @FXML private Label userTAndN;\n    \n    public void fillUser() /* <=== */ \n    {\n        HashMap<String,String> log = new HashMap<String,String>();\n        log.clear();\n        log.put(\"doctor\",\"Doctor\");\n        log.put(\"lab_assistant\",\"Lab Assistant\");"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 58,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        log.put(\"cashier\",\"Cashier\");\n        log.put(\"pharmacist\",\"Pharmacist\");\n        log.put(\"receptionist\",\"Receptionist\");\n        log.put(\"admin\",\"Admin\");\n            \n        ArrayList<ArrayList<String>> data = sysUser.getCurrentUserNameAndID(); /* <=== */ \n        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 353,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID() /* <=== */ \n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 358,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "        public ArrayList<ArrayList<String>> getCurrentUserNameAndID()\n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\"; /* <=== */ \n\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n"
                  },
                  {
                    "sample" : "\"SELECT \" + \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \" + \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \" + \"WHERE sys_user.user_id = '\" + this.userID + \"';\"",
                    "lineNumber" : 355,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID()\n\t{\t\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 355,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID()\n\t{\t\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 364,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "dbOperator.customSelection(sql)",
                    "lineNumber" : 364,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 364,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 367,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql);\n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data); /* <=== */ \n            return data;\n\t}\n        \n        public boolean setMessageRead(String msgID)\n        {"
                  }
                ]
              },
              {
                "pathId" : "17692-17691-17690-17768-17765-17764-17763-17775-16675-16687-16686-16706-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-16702-16701-16716-16720-17771-17770-17792",
                "path" : [
                  {
                    "sample" : "this.patientID",
                    "lineNumber" : 309,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        //System.out.println(\"Testing\");\n    } \n    \n    public void searchPatientBill()\n    {\n        String searchID = patientID.getText();  /* <=== */ \n        \n        if (patientSearchType.getSelectionModel().getSelectedItem() != null )\n        {    \n            String selectedValue = patientSearchType.getSelectionModel().getSelectedItem().toString();\n"
                  },
                  {
                    "sample" : "getText()",
                    "lineNumber" : 309,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        //System.out.println(\"Testing\");\n    } \n    \n    public void searchPatientBill()\n    {\n        String searchID = patientID.getText();  /* <=== */ \n        \n        if (patientSearchType.getSelectionModel().getSelectedItem() != null )\n        {    \n            String selectedValue = patientSearchType.getSelectionModel().getSelectedItem().toString();\n"
                  },
                  {
                    "sample" : "searchID",
                    "lineNumber" : 309,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        //System.out.println(\"Testing\");\n    } \n    \n    public void searchPatientBill()\n    {\n        String searchID = patientID.getText();  /* <=== */ \n        \n        if (patientSearchType.getSelectionModel().getSelectedItem() != null )\n        {    \n            String selectedValue = patientSearchType.getSelectionModel().getSelectedItem().toString();\n"
                  },
                  {
                    "sample" : "searchID",
                    "lineNumber" : 328,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                {\n                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID);\n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID); /* <=== */ \n                        data = cashier.getPatientDetails(patientid);\n                        patientSearchType.setValue(\"Patient ID\");\n                        patientID.setText(patientid);\n                        break;\n                    case \"NIC\":"
                  },
                  {
                    "sample" : "this.patientLog",
                    "lineNumber" : 328,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                {\n                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID);\n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID); /* <=== */ \n                        data = cashier.getPatientDetails(patientid);\n                        patientSearchType.setValue(\"Patient ID\");\n                        patientID.setText(patientid);\n                        break;\n                    case \"NIC\":"
                  },
                  {
                    "sample" : "patientLog.get(searchID)",
                    "lineNumber" : 328,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                {\n                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID);\n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID); /* <=== */ \n                        data = cashier.getPatientDetails(patientid);\n                        patientSearchType.setValue(\"Patient ID\");\n                        patientID.setText(patientid);\n                        break;\n                    case \"NIC\":"
                  },
                  {
                    "sample" : "patientid",
                    "lineNumber" : 328,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                {\n                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID);\n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID); /* <=== */ \n                        data = cashier.getPatientDetails(patientid);\n                        patientSearchType.setValue(\"Patient ID\");\n                        patientID.setText(patientid);\n                        break;\n                    case \"NIC\":"
                  },
                  {
                    "sample" : "patientid",
                    "lineNumber" : 329,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID);\n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID);\n                        data = cashier.getPatientDetails(patientid); /* <=== */ \n                        patientSearchType.setValue(\"Patient ID\");\n                        patientID.setText(patientid);\n                        break;\n                    case \"NIC\":\n                        "
                  },
                  {
                    "sample" : "value",
                    "lineNumber" : 419,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param value\n     * @return\n     */\n    public ArrayList<ArrayList<String>> getPatientDetails(String value) /* <=== */ \n    {\n        String sql1=\"\";\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+"
                  },
                  {
                    "sample" : "\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\" + \" INNER JOIN patient ON tmp_bill.patient_id = patient.patient_id\" + \" INNER JOIN person ON person.person_id = patient.person_id\" + \" WHERE tmp_bill.patient_id = '\" + value + \"' ;\"",
                    "lineNumber" : 424,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getPatientDetails(String value)\n    {\n        String sql1=\"\";\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+ /* <=== */ \n                \" INNER JOIN patient ON tmp_bill.patient_id = patient.patient_id\"+\n                \" INNER JOIN person ON person.person_id = patient.person_id\"+\n                \" WHERE tmp_bill.patient_id = '\"+value+\"' ;\";\n\n        try{\t\t\t"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 424,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getPatientDetails(String value)\n    {\n        String sql1=\"\";\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+ /* <=== */ \n                \" INNER JOIN patient ON tmp_bill.patient_id = patient.patient_id\"+\n                \" INNER JOIN person ON person.person_id = patient.person_id\"+\n                \" WHERE tmp_bill.patient_id = '\"+value+\"' ;\";\n\n        try{\t\t\t"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 431,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                \" INNER JOIN person ON person.person_id = patient.person_id\"+\n                \" WHERE tmp_bill.patient_id = '\"+value+\"' ;\";\n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql1)",
                    "lineNumber" : 431,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                \" INNER JOIN person ON person.person_id = patient.person_id\"+\n                \" WHERE tmp_bill.patient_id = '\"+value+\"' ;\";\n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 431,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                \" INNER JOIN person ON person.person_id = patient.person_id\"+\n                \" WHERE tmp_bill.patient_id = '\"+value+\"' ;\";\n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 419,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param value\n     * @return\n     */\n    public ArrayList<ArrayList<String>> getPatientDetails(String value) /* <=== */ \n    {\n        String sql1=\"\";\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+"
                  },
                  {
                    "sample" : "cashier.getPatientDetails(patientid)",
                    "lineNumber" : 329,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID);\n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID);\n                        data = cashier.getPatientDetails(patientid); /* <=== */ \n                        patientSearchType.setValue(\"Patient ID\");\n                        patientID.setText(patientid);\n                        break;\n                    case \"NIC\":\n                        "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 329,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID);\n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID);\n                        data = cashier.getPatientDetails(patientid); /* <=== */ \n                        patientSearchType.setValue(\"Patient ID\");\n                        patientID.setText(patientid);\n                        break;\n                    case \"NIC\":\n                        "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 343,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                }\n     \n            }\n   \n            \n            System.out.println(data); /* <=== */ \n            if ( data.size() > 1 )\n            {    \n\n                String app = data.get(1).get(5);\n                String pha = data.get(1).get(3);"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "System.out.println(tableData0)",
                    "lineNumber" : 100,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0); /* <=== */ \n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        "
                  }
                ]
              },
              {
                "pathId" : "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 792,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Thursday\");\n        weekDays.put(\"6\",\"Friday\");\n        weekDays.put(\"7\",\"Saturday\");\n        \n        appDatePicker.setValue(null);\n        setDates(); /* <=== */ \n        \n        ArrayList<Integer> day3 = new ArrayList<Integer>();\n        day3.add(1);\n        day3.add(2);\n        day3.add(3);"
                  },
                  {
                    "sample" : "this.consultationAreaCombo",
                    "lineNumber" : 823,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "(String) consultationAreaCombo.getValue()",
                    "lineNumber" : 823,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 823,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 824,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 973,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "\"SELECT \" + \"app_day \" + \"FROM lab_appointment_timetable INNER JOIN lab_test ON \" + \"lab_appointment_timetable.app_test_id = lab_test.test_id \" + \"WHERE lab_test.test_name='\" + testName + \"';\"",
                    "lineNumber" : 976,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 976,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 985,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 985,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 985,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 989,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 990,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 990,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 992,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 992,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 993,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 993,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 995,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 973,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "receptionist.getLabAvailableDays(testName)",
                    "lineNumber" : 824,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 824,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 825,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data); /* <=== */ \n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           \n                String number = Integer.toString(i+1);"
                  }
                ]
              },
              {
                "pathId" : "27139-27155-27188-27196-27254-27267-27273-27269",
                "path" : [
                  {
                    "sample" : "currentPatientID",
                    "lineNumber" : 1091,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n                System.out.println(diagnostic+\"\\n\");\n                System.out.println(presc+\"\\n\");\n                System.out.println(presc1+\"\\n\");\n\n                String currentPatientID = patientSearchValue.getText(); /* <=== */ \n                boolean saved1 = false;\n                boolean saved2 = false;\n                \n                if (currentPatientID.length() > 0)\n                {"
                  },
                  {
                    "sample" : "currentPatientID",
                    "lineNumber" : 1095,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "\n                String currentPatientID = patientSearchValue.getText();\n                boolean saved1 = false;\n                boolean saved2 = false;\n                \n                if (currentPatientID.length() > 0) /* <=== */ \n                {\n                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) "
                  },
                  {
                    "sample" : "currentPatientID",
                    "lineNumber" : 1102,
                    "columnNumber" : 67,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                    if ( diagnostic.length() > 0 )\n                    {\n                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID); /* <=== */ \n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID);\n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();"
                  },
                  {
                    "sample" : "currentPatientID",
                    "lineNumber" : 1104,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                        diagnosisText.setText(\"\");\n                        if ( ( presc.length() > 0 ) || ( presc1.length() > 0 ) ) \n                        {    \n                            saved1 = doc.prescribe(presc, presc1, currentPatientID);\n                        }\n                        saved2 = doc.diagnose(diagnostic, currentPatientID); /* <=== */ \n                        if ((saved1 == true) || (saved2 == true)) \n                        {    \n                            showSuccessIndicator();\n                            \n                            txtAuto.setText(\"\");"
                  },
                  {
                    "sample" : "currentPatientID",
                    "lineNumber" : 1119,
                    "columnNumber" : 98,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                            prescription.getItems().clear();\n                            prescription1.getItems().clear();\n                            \n                            \n                        }\n                        String billInfo = \"consultant_id \"+ doc.slmcRegNo +\",\" + \"patient_id \" + currentPatientID + \",laboratory_fee \" + fee; /* <=== */ \n                        \n                        if (labTests == true)\n                        {        \n                            doc.bill(billInfo, currentPatientID, fee);\n                        }    "
                  },
                  {
                    "sample" : "currentPatientID",
                    "lineNumber" : 1123,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                        }\n                        String billInfo = \"consultant_id \"+ doc.slmcRegNo +\",\" + \"patient_id \" + currentPatientID + \",laboratory_fee \" + fee;\n                        \n                        if (labTests == true)\n                        {        \n                            doc.bill(billInfo, currentPatientID, fee); /* <=== */ \n                        }    \n                    }    \n                    System.out.println(currentPatientID);\n                }\n                "
                  },
                  {
                    "sample" : "currentPatientID",
                    "lineNumber" : 1126,
                    "columnNumber" : 40,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                        if (labTests == true)\n                        {        \n                            doc.bill(billInfo, currentPatientID, fee);\n                        }    \n                    }    \n                    System.out.println(currentPatientID); /* <=== */ \n                }\n                \n                \n                \n            }catch(Exception ex){}\t"
                  },
                  {
                    "sample" : "System.out.println(currentPatientID)",
                    "lineNumber" : 1126,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                        if (labTests == true)\n                        {        \n                            doc.bill(billInfo, currentPatientID, fee);\n                        }    \n                    }    \n                    System.out.println(currentPatientID); /* <=== */ \n                }\n                \n                \n                \n            }catch(Exception ex){}\t"
                  }
                ]
              },
              {
                "pathId" : "27288-27291-27296-58458-58457-58455-58549-62451-63437-63450-66795-66798-63449-70558-58549-58595-62447-63215-63206-63205-63230-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "user",
                    "lineNumber" : 1139,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    \n    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(doc); /* <=== */ \n        user.load();\n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1139,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    \n    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(doc); /* <=== */ \n        user.load();\n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1140,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(doc);\n        user.load(); /* <=== */ \n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();\n        }"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 90,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "            stage.close();\n        }\n    }\n    \n    \n    public void load() /* <=== */ \n    {\n        fillUser();\n    }\n    \n    "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "    }\n    \n    \n    public void load()\n    {\n        fillUser(); /* <=== */ \n    }\n    \n    \n    \n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 47,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "    \n    @FXML private ImageView profPic;\n    @FXML private Label userN;\n    @FXML private Label userTAndN;\n    \n    public void fillUser() /* <=== */ \n    {\n        HashMap<String,String> log = new HashMap<String,String>();\n        log.clear();\n        log.put(\"doctor\",\"Doctor\");\n        log.put(\"lab_assistant\",\"Lab Assistant\");"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 58,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        log.put(\"cashier\",\"Cashier\");\n        log.put(\"pharmacist\",\"Pharmacist\");\n        log.put(\"receptionist\",\"Receptionist\");\n        log.put(\"admin\",\"Admin\");\n            \n        ArrayList<ArrayList<String>> data = sysUser.getCurrentUserNameAndID(); /* <=== */ \n        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 353,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID() /* <=== */ \n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 358,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "        public ArrayList<ArrayList<String>> getCurrentUserNameAndID()\n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\"; /* <=== */ \n\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 364,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "this.dbOperator",
                    "lineNumber" : 364,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 353,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID() /* <=== */ \n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 58,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        log.put(\"cashier\",\"Cashier\");\n        log.put(\"pharmacist\",\"Pharmacist\");\n        log.put(\"receptionist\",\"Receptionist\");\n        log.put(\"admin\",\"Admin\");\n            \n        ArrayList<ArrayList<String>> data = sysUser.getCurrentUserNameAndID(); /* <=== */ \n        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 64,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{\n            String image = sysUser.getProfilePic(); /* <=== */ \n            img = new Image(getClass().getResource(\"/imgs/profilePics/\"+image).toString(), true);\n        }catch(Exception e){\n            img = new Image(getClass().getResource(\"/imgs/noUser.png\").toString(), true);\n        }\n        profPic.setImage(img);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 254,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            }catch(ClassNotFoundException | SQLException e){}\t\n            \n            return result;\n\t}\n        \n        public String getProfilePic() /* <=== */ \n\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+\n                            \"profile_pic \"+\n                            \"FROM sys_user \"+"
                  },
                  {
                    "sample" : "this.username",
                    "lineNumber" : 260,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+\n                            \"profile_pic \"+\n                            \"FROM sys_user \"+\n                            \"WHERE sys_user.user_name = '\"+this.username+\"';\"; /* <=== */ \n\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n"
                  },
                  {
                    "sample" : "\"SELECT \" + \"profile_pic \" + \"FROM sys_user \" + \"WHERE sys_user.user_name = '\" + this.username + \"';\"",
                    "lineNumber" : 257,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        public String getProfilePic()\n\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"profile_pic \"+\n                            \"FROM sys_user \"+\n                            \"WHERE sys_user.user_name = '\"+this.username+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 257,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        public String getProfilePic()\n\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"profile_pic \"+\n                            \"FROM sys_user \"+\n                            \"WHERE sys_user.user_name = '\"+this.username+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 266,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n                    image = data.get(1).get(0);\n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            //System.out.println(data);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              },
              {
                "pathId" : "18153-18152-18151-18224-18223-18272-15760-15857-15856-15855-15879-15878-15897-15914-15931-15939-15930-15929-15947-15946-15959-15958-15968",
                "path" : [
                  {
                    "sample" : "this.patientID",
                    "lineNumber" : 433,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "    \n    }\n    \n    public void issueBill()\n    {\n        String searchID = patientID.getText(); /* <=== */ \n        String appFee = appointmentTot.getText();\n        String pharFee = pharmacyTot.getText();\n        String labFee = laboratoryTot.getText();\n        \n        String doctorFee = docFee.getText();"
                  },
                  {
                    "sample" : "getText()",
                    "lineNumber" : 433,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "    \n    }\n    \n    public void issueBill()\n    {\n        String searchID = patientID.getText(); /* <=== */ \n        String appFee = appointmentTot.getText();\n        String pharFee = pharmacyTot.getText();\n        String labFee = laboratoryTot.getText();\n        \n        String doctorFee = docFee.getText();"
                  },
                  {
                    "sample" : "searchID",
                    "lineNumber" : 433,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "    \n    }\n    \n    public void issueBill()\n    {\n        String searchID = patientID.getText(); /* <=== */ \n        String appFee = appointmentTot.getText();\n        String pharFee = pharmacyTot.getText();\n        String labFee = laboratoryTot.getText();\n        \n        String doctorFee = docFee.getText();"
                  },
                  {
                    "sample" : "\"payment_method \" + paymeth + \",consultant_id \" + doctorID + \",patient_id \" + searchID + \",doctor_fee \" + doctorFee + \",hospital_fee \" + hosFee + \",pharmacy_fee \" + pharFee + \",\" + \"laboratory_fee \" + labFee + \",appointment_fee \" + appFee + \",vat \" + vatVal + \",total \" + tot",
                    "lineNumber" : 446,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        String vatVal = vat.getText();\n        String doctorID = docID.getText();\n        \n        String paymeth = (String)paymentMethod.getValue();\n        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \" /* <=== */ \n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        \n        String billID = cashier.bill(billInfo);\n"
                  },
                  {
                    "sample" : "billInfo",
                    "lineNumber" : 446,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        String vatVal = vat.getText();\n        String doctorID = docID.getText();\n        \n        String paymeth = (String)paymentMethod.getValue();\n        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \" /* <=== */ \n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        \n        String billID = cashier.bill(billInfo);\n"
                  },
                  {
                    "sample" : "billInfo",
                    "lineNumber" : 450,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \"\n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        \n        String billID = cashier.bill(billInfo); /* <=== */ \n\n        boolean result = cashier.removeFromTempBill(searchID);\n        \n    \n        String name = patientName.getText();"
                  },
                  {
                    "sample" : "billInfo",
                    "lineNumber" : 86,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param billInfo\n     * @return\n     */\n    public String bill(String billInfo) /* <=== */ \n\t{\n\t\t\n\t\tString result = \"0\";\n\t\n\t\ttry{\t\t\t"
                  },
                  {
                    "sample" : "billInfo",
                    "lineNumber" : 116,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\n\t\t\t//////////////////////////////// SQL for adding the row ////////////////////////////////////////////////\n\t\t\tString columnNames = \"\";\n\t\t\tString rowData = \"\";\n\t\t\t\n\t\t\tString[] field = billInfo.split(\",\"); /* <=== */ \n\t\t\t\n\t\t\tint index = 0;\n\t\t\tfor (String val : field)\n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }"
                  },
                  {
                    "sample" : "billInfo.split(\",\")",
                    "lineNumber" : 116,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\n\t\t\t//////////////////////////////// SQL for adding the row ////////////////////////////////////////////////\n\t\t\tString columnNames = \"\";\n\t\t\tString rowData = \"\";\n\t\t\t\n\t\t\tString[] field = billInfo.split(\",\"); /* <=== */ \n\t\t\t\n\t\t\tint index = 0;\n\t\t\tfor (String val : field)\n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }"
                  },
                  {
                    "sample" : "field",
                    "lineNumber" : 116,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\n\t\t\t//////////////////////////////// SQL for adding the row ////////////////////////////////////////////////\n\t\t\tString columnNames = \"\";\n\t\t\tString rowData = \"\";\n\t\t\t\n\t\t\tString[] field = billInfo.split(\",\"); /* <=== */ \n\t\t\t\n\t\t\tint index = 0;\n\t\t\tfor (String val : field)\n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }"
                  },
                  {
                    "sample" : "val",
                    "lineNumber" : 119,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\tString rowData = \"\";\n\t\t\t\n\t\t\tString[] field = billInfo.split(\",\");\n\t\t\t\n\t\t\tint index = 0;\n\t\t\tfor (String val : field) /* <=== */ \n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }\n\t\t\t\t\n\t\t\t\t//// Order of column feilds in the input string!!! ////\n\t\t\t\tcolumnNames += val.split(\" \")[0];"
                  },
                  {
                    "sample" : "val",
                    "lineNumber" : 124,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\tfor (String val : field)\n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }\n\t\t\t\t\n\t\t\t\t//// Order of column feilds in the input string!!! ////\n\t\t\t\tcolumnNames += val.split(\" \")[0]; /* <=== */ \n\t\t\t\tif (index < 3) {rowData = rowData + \"'\";}\n\t\t\t\trowData += val.split(\" \")[1];\n\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;"
                  },
                  {
                    "sample" : "val",
                    "lineNumber" : 126,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }\n\t\t\t\t\n\t\t\t\t//// Order of column feilds in the input string!!! ////\n\t\t\t\tcolumnNames += val.split(\" \")[0];\n\t\t\t\tif (index < 3) {rowData = rowData + \"'\";}\n\t\t\t\trowData += val.split(\" \")[1]; /* <=== */ \n\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 132,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 132,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 132,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);"
                  },
                  {
                    "sample" : "\",'\" + tmpID2 + \"','\" + date + \"'\"",
                    "lineNumber" : 135,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\"; /* <=== */ \n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\";"
                  },
                  {
                    "sample" : "rowData",
                    "lineNumber" : 135,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\"; /* <=== */ \n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\";"
                  },
                  {
                    "sample" : "\"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData + \");\"",
                    "lineNumber" : 140,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\"; /* <=== */ \n                        System.out.println(sql);\n\t\t\t/////////////////////////////// Adding data to database /////////////////////////////////////////////////\n\t\t\tboolean res = super.dbOperator.customInsertion(sql);\n\t\t\tif (res == true ) result = tmpID2;\n\t"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 140,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\"; /* <=== */ \n                        System.out.println(sql);\n\t\t\t/////////////////////////////// Adding data to database /////////////////////////////////////////////////\n\t\t\tboolean res = super.dbOperator.customInsertion(sql);\n\t\t\tif (res == true ) result = tmpID2;\n\t"
                  },
                  {
                    "sample" : "System.out.println(sql)",
                    "lineNumber" : 141,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\";\n                        System.out.println(sql); /* <=== */ \n\t\t\t/////////////////////////////// Adding data to database /////////////////////////////////////////////////\n\t\t\tboolean res = super.dbOperator.customInsertion(sql);\n\t\t\tif (res == true ) result = tmpID2;\n\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}"
                  }
                ]
              },
              {
                "pathId" : "17692-17691-17690-17757-16675-16696-69596-17757-18027-16723-16732-16731-16749-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-16745-16744-16759-16763-18023-18022-18028",
                "path" : [
                  {
                    "sample" : "this.patientID",
                    "lineNumber" : 309,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        //System.out.println(\"Testing\");\n    } \n    \n    public void searchPatientBill()\n    {\n        String searchID = patientID.getText();  /* <=== */ \n        \n        if (patientSearchType.getSelectionModel().getSelectedItem() != null )\n        {    \n            String selectedValue = patientSearchType.getSelectionModel().getSelectedItem().toString();\n"
                  },
                  {
                    "sample" : "getText()",
                    "lineNumber" : 309,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        //System.out.println(\"Testing\");\n    } \n    \n    public void searchPatientBill()\n    {\n        String searchID = patientID.getText();  /* <=== */ \n        \n        if (patientSearchType.getSelectionModel().getSelectedItem() != null )\n        {    \n            String selectedValue = patientSearchType.getSelectionModel().getSelectedItem().toString();\n"
                  },
                  {
                    "sample" : "searchID",
                    "lineNumber" : 309,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        //System.out.println(\"Testing\");\n    } \n    \n    public void searchPatientBill()\n    {\n        String searchID = patientID.getText();  /* <=== */ \n        \n        if (patientSearchType.getSelectionModel().getSelectedItem() != null )\n        {    \n            String selectedValue = patientSearchType.getSelectionModel().getSelectedItem().toString();\n"
                  },
                  {
                    "sample" : "searchID",
                    "lineNumber" : 325,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                patientSearchType.setStyle(\"-fx-border-color: #999 #999 #999 #999;\");\n                patientID.setStyle(\"-fx-border-color: #999 #999 #999 #999;\");\n                switch (selectedValue) \n                {\n                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID); /* <=== */ \n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID);\n                        data = cashier.getPatientDetails(patientid);\n                        patientSearchType.setValue(\"Patient ID\");"
                  },
                  {
                    "sample" : "value",
                    "lineNumber" : 419,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param value\n     * @return\n     */\n    public ArrayList<ArrayList<String>> getPatientDetails(String value) /* <=== */ \n    {\n        String sql1=\"\";\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+"
                  },
                  {
                    "sample" : "value",
                    "lineNumber" : 427,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+\n                \" INNER JOIN patient ON tmp_bill.patient_id = patient.patient_id\"+\n                \" INNER JOIN person ON person.person_id = patient.person_id\"+\n                \" WHERE tmp_bill.patient_id = '\"+value+\"' ;\"; /* <=== */ \n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "value",
                    "lineNumber" : 419,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param value\n     * @return\n     */\n    public ArrayList<ArrayList<String>> getPatientDetails(String value) /* <=== */ \n    {\n        String sql1=\"\";\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT tmp_bill.*,person.first_name,person.last_name FROM tmp_bill\"+"
                  },
                  {
                    "sample" : "searchID",
                    "lineNumber" : 325,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                patientSearchType.setStyle(\"-fx-border-color: #999 #999 #999 #999;\");\n                patientID.setStyle(\"-fx-border-color: #999 #999 #999 #999;\");\n                switch (selectedValue) \n                {\n                    case \"Patient ID\":\n                        data = cashier.getPatientDetails(searchID); /* <=== */ \n                        break;\n                    case \"Name\":\n                        String patientid = patientLog.get(searchID);\n                        data = cashier.getPatientDetails(patientid);\n                        patientSearchType.setValue(\"Patient ID\");"
                  },
                  {
                    "sample" : "searchID",
                    "lineNumber" : 390,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                billDate.setText(dateFormat.format(date));\n                patientTotal.setText(Integer.toString(service + vatamnt));\n                serviceFees.setText(Integer.toString(service));\n                vat.setText(Integer.toString(vatamnt));\n\n                data = cashier.getDoctorName(searchID); /* <=== */ \n                System.out.println(data);\n                \n                try{\n                    docName.setText(data.get(1).get(0) + \" \" + data.get(1).get(1));\n                }catch(Exception e){}"
                  },
                  {
                    "sample" : "value",
                    "lineNumber" : 444,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param value\n     * @return\n     */\n    public ArrayList<ArrayList<String>> getDoctorName(String value) /* <=== */ \n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT person.first_name,person.last_name \"+"
                  },
                  {
                    "sample" : "\"SELECT person.first_name,person.last_name \" + \"FROM person INNER JOIN doctor ON person.user_id = doctor.user_id \" + \"WHERE doctor.slmc_reg_no = (SELECT consultant_id FROM tmp_bill WHERE patient_id = '\" + value + \"');\"",
                    "lineNumber" : 449,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getDoctorName(String value)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT person.first_name,person.last_name \"+ /* <=== */ \n                        \"FROM person INNER JOIN doctor ON person.user_id = doctor.user_id \"+\n                        \"WHERE doctor.slmc_reg_no = (SELECT consultant_id FROM tmp_bill WHERE patient_id = '\"+value+\"');\";\n\n        try{\t\t\t\n"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 449,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getDoctorName(String value)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT person.first_name,person.last_name \"+ /* <=== */ \n                        \"FROM person INNER JOIN doctor ON person.user_id = doctor.user_id \"+\n                        \"WHERE doctor.slmc_reg_no = (SELECT consultant_id FROM tmp_bill WHERE patient_id = '\"+value+\"');\";\n\n        try{\t\t\t\n"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 455,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                        \"FROM person INNER JOIN doctor ON person.user_id = doctor.user_id \"+\n                        \"WHERE doctor.slmc_reg_no = (SELECT consultant_id FROM tmp_bill WHERE patient_id = '\"+value+\"');\";\n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql1)",
                    "lineNumber" : 455,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                        \"FROM person INNER JOIN doctor ON person.user_id = doctor.user_id \"+\n                        \"WHERE doctor.slmc_reg_no = (SELECT consultant_id FROM tmp_bill WHERE patient_id = '\"+value+\"');\";\n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 455,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "                        \"FROM person INNER JOIN doctor ON person.user_id = doctor.user_id \"+\n                        \"WHERE doctor.slmc_reg_no = (SELECT consultant_id FROM tmp_bill WHERE patient_id = '\"+value+\"');\";\n\n        try{\t\t\t\n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 444,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param value\n     * @return\n     */\n    public ArrayList<ArrayList<String>> getDoctorName(String value) /* <=== */ \n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \t\"SELECT person.first_name,person.last_name \"+"
                  },
                  {
                    "sample" : "cashier.getDoctorName(searchID)",
                    "lineNumber" : 390,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                billDate.setText(dateFormat.format(date));\n                patientTotal.setText(Integer.toString(service + vatamnt));\n                serviceFees.setText(Integer.toString(service));\n                vat.setText(Integer.toString(vatamnt));\n\n                data = cashier.getDoctorName(searchID); /* <=== */ \n                System.out.println(data);\n                \n                try{\n                    docName.setText(data.get(1).get(0) + \" \" + data.get(1).get(1));\n                }catch(Exception e){}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 390,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                billDate.setText(dateFormat.format(date));\n                patientTotal.setText(Integer.toString(service + vatamnt));\n                serviceFees.setText(Integer.toString(service));\n                vat.setText(Integer.toString(vatamnt));\n\n                data = cashier.getDoctorName(searchID); /* <=== */ \n                System.out.println(data);\n                \n                try{\n                    docName.setText(data.get(1).get(0) + \" \" + data.get(1).get(1));\n                }catch(Exception e){}"
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 391,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "                patientTotal.setText(Integer.toString(service + vatamnt));\n                serviceFees.setText(Integer.toString(service));\n                vat.setText(Integer.toString(vatamnt));\n\n                data = cashier.getDoctorName(searchID);\n                System.out.println(data); /* <=== */ \n                \n                try{\n                    docName.setText(data.get(1).get(0) + \" \" + data.get(1).get(1));\n                }catch(Exception e){}\n                    "
                  }
                ]
              },
              {
                "pathId" : "52914-52925-52943-48210-48226-48215-48214-48240-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-48236-48235-48245-48249-52939-52938-52944",
                "path" : [
                  {
                    "sample" : "patientid",
                    "lineNumber" : 343,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                }\n                else{ showPopup(\"hmsxxxxpa\",patientSearchBox); }\n                \n            } else if (selectedValue.equals(\"Name\")) {\n            \n                String patientid = patientLog.get(searchValue); /* <=== */ \n                \n                String result = Validate.patientID(patientid);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {"
                  },
                  {
                    "sample" : "patientid",
                    "lineNumber" : 345,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                \n            } else if (selectedValue.equals(\"Name\")) {\n            \n                String patientid = patientLog.get(searchValue);\n                \n                String result = Validate.patientID(patientid); /* <=== */ \n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(patientid);\n                    System.out.println(data);"
                  },
                  {
                    "sample" : "patientid",
                    "lineNumber" : 349,
                    "columnNumber" : 85,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                \n                String result = Validate.patientID(patientid);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(patientid); /* <=== */ \n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 155,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\t//System.out.println(data);\n\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID) /* <=== */ \n\t{\t\n\t\tString sql = \t\"SELECT \"+\n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 161,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t{\t\n\t\tString sql = \t\"SELECT \"+\n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+\n\t\t\t\t\t\t\"WHERE patient_id = '\" + patientID + \"';\"; /* <=== */ \n\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "\"SELECT \" + \"person.*, \" + \"patient.* \" + \"FROM person INNER JOIN patient ON patient.person_id = person.person_id \" + \"WHERE patient_id = '\" + patientID + \"';\"",
                    "lineNumber" : 157,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID)\n\t{\t\n\t\tString sql = \t\"SELECT \"+ /* <=== */ \n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+\n\t\t\t\t\t\t\"WHERE patient_id = '\" + patientID + \"';\";\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 157,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID)\n\t{\t\n\t\tString sql = \t\"SELECT \"+ /* <=== */ \n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+\n\t\t\t\t\t\t\"WHERE patient_id = '\" + patientID + \"';\";\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 167,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql)",
                    "lineNumber" : 167,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 167,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 155,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\t//System.out.println(data);\n\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID) /* <=== */ \n\t{\t\n\t\tString sql = \t\"SELECT \"+\n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+"
                  },
                  {
                    "sample" : "receptionist.getPatientInfo(patientid)",
                    "lineNumber" : 349,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                \n                String result = Validate.patientID(patientid);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(patientid); /* <=== */ \n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 349,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                \n                String result = Validate.patientID(patientid);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(patientid); /* <=== */ \n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);"
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 350,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                String result = Validate.patientID(patientid);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(patientid);\n                    System.out.println(data); /* <=== */ \n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);\n                    if (gender.equals(\"m\")){gender = \"Male\";}"
                  }
                ]
              },
              {
                "pathId" : "29536-29535-29552-29551-29550-29549-29548-29547-29546-29545-29570-29565",
                "path" : [
                  {
                    "sample" : "Example.ACCOUNT_ID",
                    "lineNumber" : 22,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 22,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "createCampaign()",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setName(\"Java SDK Test Campaign\")",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setSpendCap(10000L)",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setStatus(Campaign.EnumStatus.VALUE_PAUSED)",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "execute()",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "campaign",
                    "lineNumber" : 23,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "campaign",
                    "lineNumber" : 29,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();\n      System.out.println(campaign.fetch()); /* <=== */ \n    } catch (APIException e) {\n      e.printStackTrace();\n    }\n  }\n}"
                  },
                  {
                    "sample" : "println(campaign.fetch())",
                    "lineNumber" : 29,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();\n      System.out.println(campaign.fetch()); /* <=== */ \n    } catch (APIException e) {\n      e.printStackTrace();\n    }\n  }\n}"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "tableData0.size()",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 99,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 106,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 106,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 108,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 139,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 139,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1).split(\" \")",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 108,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp[0]",
                    "lineNumber" : 109,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 109,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 131,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "LocalDate.parse(date, formatter)",
                    "lineNumber" : 131,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 131,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 133,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  },
                  {
                    "sample" : "System.out.println(finDate.atTime(hour1, minute1))",
                    "lineNumber" : 133,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  }
                ]
              },
              {
                "pathId" : "1351-1344-1343-1366-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-1362-1361-1371-1375-5017-5016-5021",
                "path" : [
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 505,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public ArrayList<ArrayList<String>> checkConnection()\n    {\n            String sql =    \"SELECT sys_user.user_name \"+\n                            \"FROM sys_user  \"+\n                            \"WHERE (sys_user.user_id = '\"+ this.userID +\"');\"; /* <=== */ \n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql);\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t"
                  },
                  {
                    "sample" : "\"SELECT sys_user.user_name \" + \"FROM sys_user  \" + \"WHERE (sys_user.user_id = '\" + this.userID + \"');\"",
                    "lineNumber" : 503,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    }\n    \n    \n    public ArrayList<ArrayList<String>> checkConnection()\n    {\n            String sql =    \"SELECT sys_user.user_name \"+ /* <=== */ \n                            \"FROM sys_user  \"+\n                            \"WHERE (sys_user.user_id = '\"+ this.userID +\"');\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 503,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    }\n    \n    \n    public ArrayList<ArrayList<String>> checkConnection()\n    {\n            String sql =    \"SELECT sys_user.user_name \"+ /* <=== */ \n                            \"FROM sys_user  \"+\n                            \"WHERE (sys_user.user_id = '\"+ this.userID +\"');\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 509,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                            \"FROM sys_user  \"+\n                            \"WHERE (sys_user.user_id = '\"+ this.userID +\"');\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\n            //System.out.println(data);\n            return data;\n    }"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql)",
                    "lineNumber" : 509,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                            \"FROM sys_user  \"+\n                            \"WHERE (sys_user.user_id = '\"+ this.userID +\"');\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\n            //System.out.println(data);\n            return data;\n    }"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 509,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                            \"FROM sys_user  \"+\n                            \"WHERE (sys_user.user_id = '\"+ this.userID +\"');\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\n            //System.out.println(data);\n            return data;\n    }"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\t\n        return result;\n    }\n    \n    \n    public ArrayList<ArrayList<String>> checkConnection() /* <=== */ \n    {\n            String sql =    \"SELECT sys_user.user_name \"+\n                            \"FROM sys_user  \"+\n                            \"WHERE (sys_user.user_id = '\"+ this.userID +\"');\";\n"
                  },
                  {
                    "sample" : "admin.checkConnection()",
                    "lineNumber" : 933,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "    \n    \n    @FXML\n    private void checkConnection()\n    {\n        ArrayList<ArrayList<String>> data = admin.checkConnection(); /* <=== */ \n        System.out.println(data);\n        if ( data.get(1).get(0).equals(admin.username))\n        {\n            showSuccessIndicator();\n        }    "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 933,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "    \n    \n    @FXML\n    private void checkConnection()\n    {\n        ArrayList<ArrayList<String>> data = admin.checkConnection(); /* <=== */ \n        System.out.println(data);\n        if ( data.get(1).get(0).equals(admin.username))\n        {\n            showSuccessIndicator();\n        }    "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 934,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "    \n    @FXML\n    private void checkConnection()\n    {\n        ArrayList<ArrayList<String>> data = admin.checkConnection();\n        System.out.println(data); /* <=== */ \n        if ( data.get(1).get(0).equals(admin.username))\n        {\n            showSuccessIndicator();\n        }    \n    }    "
                  }
                ]
              },
              {
                "pathId" : "63740-63746-63754-70586-52703-52721-48210-48226-48215-48214-48240-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-48236-48235-48245-48249-52717-52716-52722",
                "path" : [
                  {
                    "sample" : "patientID",
                    "lineNumber" : 82,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/Validate.java",
                    "excerpt" : "     */\n    public static String patientID(String patientID)\n    {\n            String result = \"hmsxxxxpa\";\n\n            if ( patientID.length() == 9 ) /* <=== */ \n            {\n                    if ( patientID.substring(0,3).equals(\"hms\") )\n                    {\n                            if ( patientID.substring(7,9).equals(\"pa\") )\n                            {"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 84,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/Validate.java",
                    "excerpt" : "    {\n            String result = \"hmsxxxxpa\";\n\n            if ( patientID.length() == 9 )\n            {\n                    if ( patientID.substring(0,3).equals(\"hms\") ) /* <=== */ \n                    {\n                            if ( patientID.substring(7,9).equals(\"pa\") )\n                            {\n                                    result = \"1\";\n                            }"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 86,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/Validate.java",
                    "excerpt" : "\n            if ( patientID.length() == 9 )\n            {\n                    if ( patientID.substring(0,3).equals(\"hms\") )\n                    {\n                            if ( patientID.substring(7,9).equals(\"pa\") ) /* <=== */ \n                            {\n                                    result = \"1\";\n                            }\n                    }\n            }"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 78,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/Validate.java",
                    "excerpt" : "    /**\n     * \n     * @param patientID Patient ID of the patient\n     * @return String \"1\" if correct else return correct format\n     */\n    public static String patientID(String patientID) /* <=== */ \n    {\n            String result = \"hmsxxxxpa\";\n\n            if ( patientID.length() == 9 )\n            {"
                  },
                  {
                    "sample" : "searchValue",
                    "lineNumber" : 299,
                    "columnNumber" : 52,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            String selectedValue = patientSearchCombo.getSelectionModel().getSelectedItem().toString();\n            String searchValue = patientSearchBox.getText();\n            \n            if (selectedValue.equals(\"Patient ID\"))\n            {\n                String result = Validate.patientID(searchValue); /* <=== */ \n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(searchValue);\n                    System.out.println(data);"
                  },
                  {
                    "sample" : "searchValue",
                    "lineNumber" : 303,
                    "columnNumber" : 85,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            {\n                String result = Validate.patientID(searchValue);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(searchValue); /* <=== */ \n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 155,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\t//System.out.println(data);\n\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID) /* <=== */ \n\t{\t\n\t\tString sql = \t\"SELECT \"+\n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+"
                  },
                  {
                    "sample" : "patientID",
                    "lineNumber" : 161,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t{\t\n\t\tString sql = \t\"SELECT \"+\n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+\n\t\t\t\t\t\t\"WHERE patient_id = '\" + patientID + \"';\"; /* <=== */ \n\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "\"SELECT \" + \"person.*, \" + \"patient.* \" + \"FROM person INNER JOIN patient ON patient.person_id = person.person_id \" + \"WHERE patient_id = '\" + patientID + \"';\"",
                    "lineNumber" : 157,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID)\n\t{\t\n\t\tString sql = \t\"SELECT \"+ /* <=== */ \n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+\n\t\t\t\t\t\t\"WHERE patient_id = '\" + patientID + \"';\";\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 157,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID)\n\t{\t\n\t\tString sql = \t\"SELECT \"+ /* <=== */ \n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+\n\t\t\t\t\t\t\"WHERE patient_id = '\" + patientID + \"';\";\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 167,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql)",
                    "lineNumber" : 167,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 167,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 155,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\t//System.out.println(data);\n\t\treturn data;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> getPatientInfo(String patientID) /* <=== */ \n\t{\t\n\t\tString sql = \t\"SELECT \"+\n\t\t\t\t\t\t\"person.*, \"+\n\t\t\t\t\t\t\"patient.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN patient ON patient.person_id = person.person_id \"+"
                  },
                  {
                    "sample" : "receptionist.getPatientInfo(searchValue)",
                    "lineNumber" : 303,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            {\n                String result = Validate.patientID(searchValue);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(searchValue); /* <=== */ \n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 303,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            {\n                String result = Validate.patientID(searchValue);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(searchValue); /* <=== */ \n                    System.out.println(data);\n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);"
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 304,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "                String result = Validate.patientID(searchValue);\n                System.out.println(result);\n                if (result.equals(\"1\"))\n                {\n                    ArrayList<ArrayList<String>> data = receptionist.getPatientInfo(searchValue);\n                    System.out.println(data); /* <=== */ \n                    patientFirstName.setText(data.get(1).get(7));\n                    patientLastName.setText(data.get(1).get(8));\n\n                    String gender = data.get(1).get(3);\n                    if (gender.equals(\"m\")){gender = \"Male\";}"
                  }
                ]
              },
              {
                "pathId" : "1657-1673-1667-1666-1688-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-1684-1683-1693-1697-8547-8546-8568-8567-8566-8576-8575-8585-8584-8583-8582-8581-8598-8596-8595-8611-8610-8609-8608-8612",
                "path" : [
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 613,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getPatientAttendence(String doctorID)\n    {\n\n        String sql = \"\";\n\n        if ( doctorID.equals(\"All\") ) { /* <=== */ \n\n            sql =   \"SELECT date FROM appointment WHERE date > (CURRENT_DATE - INTERVAL 12 MONTH) ORDER BY date ASC;\";\n\n        } else {\n"
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 620,
                    "columnNumber" : 94,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "            sql =   \"SELECT date FROM appointment WHERE date > (CURRENT_DATE - INTERVAL 12 MONTH) ORDER BY date ASC;\";\n\n        } else {\n\n            sql =   \"SELECT date FROM appointment \"+\n                    \"WHERE ( date > (CURRENT_DATE - INTERVAL 12 MONTH) ) & (slmc_reg_no = '\"+doctorID+\"') \"+ /* <=== */ \n                    \"ORDER BY date ASC;\";\n        }    \n\n\n        ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "\"SELECT date FROM appointment \" + \"WHERE ( date > (CURRENT_DATE - INTERVAL 12 MONTH) ) & (slmc_reg_no = '\" + doctorID + \"') \" + \"ORDER BY date ASC;\"",
                    "lineNumber" : 619,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            sql =   \"SELECT date FROM appointment WHERE date > (CURRENT_DATE - INTERVAL 12 MONTH) ORDER BY date ASC;\";\n\n        } else {\n\n            sql =   \"SELECT date FROM appointment \"+ /* <=== */ \n                    \"WHERE ( date > (CURRENT_DATE - INTERVAL 12 MONTH) ) & (slmc_reg_no = '\"+doctorID+\"') \"+\n                    \"ORDER BY date ASC;\";\n        }    \n\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 619,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            sql =   \"SELECT date FROM appointment WHERE date > (CURRENT_DATE - INTERVAL 12 MONTH) ORDER BY date ASC;\";\n\n        } else {\n\n            sql =   \"SELECT date FROM appointment \"+ /* <=== */ \n                    \"WHERE ( date > (CURRENT_DATE - INTERVAL 12 MONTH) ) & (slmc_reg_no = '\"+doctorID+\"') \"+\n                    \"ORDER BY date ASC;\";\n        }    \n\n"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 627,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        }    \n\n\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}   \n\n        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql)",
                    "lineNumber" : 627,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        }    \n\n\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}   \n\n        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 627,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        }    \n\n\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}   \n\n        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 608,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                exc.printStackTrace();\n        }\n        return size;\n    }\n    \n    public ArrayList<ArrayList<String>> getPatientAttendence(String doctorID) /* <=== */ \n    {\n\n        String sql = \"\";\n\n        if ( doctorID.equals(\"All\") ) {"
                  },
                  {
                    "sample" : "admin.getPatientAttendence(doctor)",
                    "lineNumber" : 74,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        int max1 = 1;\n        if (!doc.equals(\"All\"))\n        {    \n            doctor = doc.split(\"\\\\[\")[1].split(\"\\\\]\")[0];\n        }\n        ArrayList<ArrayList<String>> data = admin.getPatientAttendence(doctor); /* <=== */ \n        String date = \"\";\n        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 74,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        int max1 = 1;\n        if (!doc.equals(\"All\"))\n        {    \n            doctor = doc.split(\"\\\\[\")[1].split(\"\\\\]\")[0];\n        }\n        ArrayList<ArrayList<String>> data = admin.getPatientAttendence(doctor); /* <=== */ \n        String date = \"\";\n        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 80,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        String date = \"\";\n        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size(); /* <=== */ \n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);"
                  },
                  {
                    "sample" : "data.size()",
                    "lineNumber" : 80,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        String date = \"\";\n        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size(); /* <=== */ \n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);"
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 80,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        String date = \"\";\n        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size(); /* <=== */ \n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);"
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 81,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++) /* <=== */ \n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 81,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        \n        ArrayList<String> months = new ArrayList<String>(); \n        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++) /* <=== */ \n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 83,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0); /* <=== */ \n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 83,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0); /* <=== */ \n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);"
                  },
                  {
                    "sample" : "data.get(i)",
                    "lineNumber" : 83,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0); /* <=== */ \n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);"
                  },
                  {
                    "sample" : "data.get(i).get(0)",
                    "lineNumber" : 83,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0); /* <=== */ \n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 83,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        ArrayList<Integer> patients = new ArrayList<Integer>();\n        \n        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0); /* <=== */ \n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 85,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1); /* <=== */ \n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);\n            \n            System.out.println(Month);"
                  },
                  {
                    "sample" : "LocalDate.parse(date, fomatter1)",
                    "lineNumber" : 85,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1); /* <=== */ \n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);\n            \n            System.out.println(Month);"
                  },
                  {
                    "sample" : "date2",
                    "lineNumber" : 85,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "        int size = data.size();\n        for(int i = 1; i < size; i ++)\n        {    \n            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1); /* <=== */ \n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);\n            \n            System.out.println(Month);"
                  },
                  {
                    "sample" : "date2",
                    "lineNumber" : 88,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2); /* <=== */ \n            \n            System.out.println(Month);\n            if ( months.contains(Month) ) {\n            \n                int indx = months.indexOf(Month);"
                  },
                  {
                    "sample" : "fomatter2",
                    "lineNumber" : 88,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2); /* <=== */ \n            \n            System.out.println(Month);\n            if ( months.contains(Month) ) {\n            \n                int indx = months.indexOf(Month);"
                  },
                  {
                    "sample" : "fomatter2.format(date2)",
                    "lineNumber" : 88,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2); /* <=== */ \n            \n            System.out.println(Month);\n            if ( months.contains(Month) ) {\n            \n                int indx = months.indexOf(Month);"
                  },
                  {
                    "sample" : "Month",
                    "lineNumber" : 88,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "            date = data.get(i).get(0);\n            DateTimeFormatter fomatter1 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2); /* <=== */ \n            \n            System.out.println(Month);\n            if ( months.contains(Month) ) {\n            \n                int indx = months.indexOf(Month);"
                  },
                  {
                    "sample" : "System.out.println(Month)",
                    "lineNumber" : 90,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/ReportsController.java",
                    "excerpt" : "            LocalDate date2 = LocalDate.parse(date, fomatter1);\n\n            DateTimeFormatter fomatter2 = DateTimeFormatter.ofPattern(\"MMM\");\n            String Month = fomatter2.format(date2);\n            \n            System.out.println(Month); /* <=== */ \n            if ( months.contains(Month) ) {\n            \n                int indx = months.indexOf(Month);\n                int tmp = patients.remove(indx);\n                patients.add(indx,(tmp+1));"
                  }
                ]
              },
              {
                "pathId" : "53230-53251-47481-47485-47484-47483-47490-53250-53249-53293-50530-50535-50534-50562-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50558-50557-50571-50570-50569-50579-50578-50589-50588-50587-50586-50585-50595-50599-50598-50594-50600-50604-53289-53288-53298-53297-53296-53311-53310-53321-53320-53322",
                "path" : [
                  {
                    "sample" : "detail",
                    "lineNumber" : 423,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        popOver.show(doctorSummary);\n    } \n    \n    @FXML private void showDays()\n    {\n        DoctorDetail detail = (DoctorDetail)doctorSummary.getSelectionModel().getSelectedItem(); /* <=== */ \n        int index = doctorSummary.getSelectionModel().selectedIndexProperty().get();\n        //System.out.println(bill.getPatientID());\n        \n        String doctorID = detail.getDoctorID();\n        "
                  },
                  {
                    "sample" : "detail",
                    "lineNumber" : 427,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "    {\n        DoctorDetail detail = (DoctorDetail)doctorSummary.getSelectionModel().getSelectedItem();\n        int index = doctorSummary.getSelectionModel().selectedIndexProperty().get();\n        //System.out.println(bill.getPatientID());\n        \n        String doctorID = detail.getDoctorID(); /* <=== */ \n        \n        HashMap<String,String> weekDays = new HashMap<>();\n        weekDays.put(\"1\",\"Monday\");\n        weekDays.put(\"2\",\"Tuesday\");\n        weekDays.put(\"3\",\"Wednesday\");"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 31,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Receptionist/DoctorDetail.java",
                    "excerpt" : "        setArea(area);\n        setAvailability(availability);\n        setDays(days);\n    }\n\n    public String getDoctorID() { /* <=== */ \n        return doctorID.get();\n    }\n \n    public void setDoctorID(String value) {\n        doctorID.set(value);"
                  },
                  {
                    "sample" : "this.doctorID",
                    "lineNumber" : 32,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/DoctorDetail.java",
                    "excerpt" : "        setAvailability(availability);\n        setDays(days);\n    }\n\n    public String getDoctorID() {\n        return doctorID.get(); /* <=== */ \n    }\n \n    public void setDoctorID(String value) {\n        doctorID.set(value);\n    }"
                  },
                  {
                    "sample" : "get()",
                    "lineNumber" : 32,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/DoctorDetail.java",
                    "excerpt" : "        setAvailability(availability);\n        setDays(days);\n    }\n\n    public String getDoctorID() {\n        return doctorID.get(); /* <=== */ \n    }\n \n    public void setDoctorID(String value) {\n        doctorID.set(value);\n    }"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 31,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/DoctorDetail.java",
                    "excerpt" : "        setArea(area);\n        setAvailability(availability);\n        setDays(days);\n    }\n\n    public String getDoctorID() { /* <=== */ \n        return doctorID.get();\n    }\n \n    public void setDoctorID(String value) {\n        doctorID.set(value);"
                  },
                  {
                    "sample" : "detail.getDoctorID()",
                    "lineNumber" : 427,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "    {\n        DoctorDetail detail = (DoctorDetail)doctorSummary.getSelectionModel().getSelectedItem();\n        int index = doctorSummary.getSelectionModel().selectedIndexProperty().get();\n        //System.out.println(bill.getPatientID());\n        \n        String doctorID = detail.getDoctorID(); /* <=== */ \n        \n        HashMap<String,String> weekDays = new HashMap<>();\n        weekDays.put(\"1\",\"Monday\");\n        weekDays.put(\"2\",\"Tuesday\");\n        weekDays.put(\"3\",\"Wednesday\");"
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 427,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "    {\n        DoctorDetail detail = (DoctorDetail)doctorSummary.getSelectionModel().getSelectedItem();\n        int index = doctorSummary.getSelectionModel().selectedIndexProperty().get();\n        //System.out.println(bill.getPatientID());\n        \n        String doctorID = detail.getDoctorID(); /* <=== */ \n        \n        HashMap<String,String> weekDays = new HashMap<>();\n        weekDays.put(\"1\",\"Monday\");\n        weekDays.put(\"2\",\"Tuesday\");\n        weekDays.put(\"3\",\"Wednesday\");"
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 438,
                    "columnNumber" : 64,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"4\",\"Thursday\");\n        weekDays.put(\"5\",\"Friday\");\n        weekDays.put(\"6\",\"Saturday\");\n        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID); /* <=== */ \n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));"
                  },
                  {
                    "sample" : "registrtionNo",
                    "lineNumber" : 939,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param registrtionNo doctors registration number\n         * @return ArrayList<String> of days that doctor available in the hospital\n         */\n        public ArrayList<String> getAvailableDays(String registrtionNo) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT day FROM doctor_availability \" +\n\t\t\t\t\t\t\"WHERE slmc_reg_no = '\" + registrtionNo + \"'\"+\n\t\t\t\t\t\t\"ORDER BY day ASC;\";"
                  },
                  {
                    "sample" : "\"SELECT day FROM doctor_availability \" + \"WHERE slmc_reg_no = '\" + registrtionNo + \"'\" + \"ORDER BY day ASC;\"",
                    "lineNumber" : 942,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return ArrayList<String> of days that doctor available in the hospital\n         */\n        public ArrayList<String> getAvailableDays(String registrtionNo)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT day FROM doctor_availability \" + /* <=== */ \n\t\t\t\t\t\t\"WHERE slmc_reg_no = '\" + registrtionNo + \"'\"+\n\t\t\t\t\t\t\"ORDER BY day ASC;\";\n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 942,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return ArrayList<String> of days that doctor available in the hospital\n         */\n        public ArrayList<String> getAvailableDays(String registrtionNo)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT day FROM doctor_availability \" + /* <=== */ \n\t\t\t\t\t\t\"WHERE slmc_reg_no = '\" + registrtionNo + \"'\"+\n\t\t\t\t\t\t\"ORDER BY day ASC;\";\n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 950,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 950,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 950,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 954,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 954,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 954,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 955,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 955,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 957,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 957,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 957,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 957,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 957,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 958,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 960,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 960,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 958,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 939,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param registrtionNo doctors registration number\n         * @return ArrayList<String> of days that doctor available in the hospital\n         */\n        public ArrayList<String> getAvailableDays(String registrtionNo) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT day FROM doctor_availability \" +\n\t\t\t\t\t\t\"WHERE slmc_reg_no = '\" + registrtionNo + \"'\"+\n\t\t\t\t\t\t\"ORDER BY day ASC;\";"
                  },
                  {
                    "sample" : "receptionist.getAvailableDays(doctorID)",
                    "lineNumber" : 438,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"4\",\"Thursday\");\n        weekDays.put(\"5\",\"Friday\");\n        weekDays.put(\"6\",\"Saturday\");\n        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID); /* <=== */ \n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 438,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"4\",\"Thursday\");\n        weekDays.put(\"5\",\"Friday\");\n        weekDays.put(\"6\",\"Saturday\");\n        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID); /* <=== */ \n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 439,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Friday\");\n        weekDays.put(\"6\",\"Saturday\");\n        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size(); /* <=== */ \n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));\n        }    "
                  },
                  {
                    "sample" : "data.size()",
                    "lineNumber" : 439,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Friday\");\n        weekDays.put(\"6\",\"Saturday\");\n        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size(); /* <=== */ \n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));\n        }    "
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 439,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Friday\");\n        weekDays.put(\"6\",\"Saturday\");\n        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size(); /* <=== */ \n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));\n        }    "
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 441,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++) /* <=== */ \n        {           \n            items.add(weekDays.get(data.get(i)));\n        }    \n        \n        System.out.println(data);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 441,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++) /* <=== */ \n        {           \n            items.add(weekDays.get(data.get(i)));\n        }    \n        \n        System.out.println(data);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 443,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i))); /* <=== */ \n        }    \n        \n        System.out.println(data);\n        showPopup(items);\n        /*"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 443,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i))); /* <=== */ \n        }    \n        \n        System.out.println(data);\n        showPopup(items);\n        /*"
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 446,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));\n        }    \n        \n        System.out.println(data); /* <=== */ \n        showPopup(items);\n        /*\n            Popover2Controller popup = new Popover2Controller();\n            popup.fillDaysList(items);\n            "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalCharacteristics.Religion/ReligiousBeliefs",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "System.out.println(tableData0)",
                    "lineNumber" : 100,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0); /* <=== */ \n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        "
                  }
                ]
              },
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              },
              {
                "pathId" : "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 792,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Thursday\");\n        weekDays.put(\"6\",\"Friday\");\n        weekDays.put(\"7\",\"Saturday\");\n        \n        appDatePicker.setValue(null);\n        setDates(); /* <=== */ \n        \n        ArrayList<Integer> day3 = new ArrayList<Integer>();\n        day3.add(1);\n        day3.add(2);\n        day3.add(3);"
                  },
                  {
                    "sample" : "this.consultationAreaCombo",
                    "lineNumber" : 823,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "(String) consultationAreaCombo.getValue()",
                    "lineNumber" : 823,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 823,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 824,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 973,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "\"SELECT \" + \"app_day \" + \"FROM lab_appointment_timetable INNER JOIN lab_test ON \" + \"lab_appointment_timetable.app_test_id = lab_test.test_id \" + \"WHERE lab_test.test_name='\" + testName + \"';\"",
                    "lineNumber" : 976,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 976,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 985,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 985,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 985,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 989,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 990,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 990,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 992,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 992,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 993,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 993,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 995,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 973,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "receptionist.getLabAvailableDays(testName)",
                    "lineNumber" : 824,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 824,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 825,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data); /* <=== */ \n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           \n                String number = Integer.toString(i+1);"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "tableData0.size()",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 99,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 106,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 106,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 108,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 139,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 139,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1).split(\" \")",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 108,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp[0]",
                    "lineNumber" : 109,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 109,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 131,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "LocalDate.parse(date, formatter)",
                    "lineNumber" : 131,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 131,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 133,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  },
                  {
                    "sample" : "System.out.println(finDate.atTime(hour1, minute1))",
                    "lineNumber" : 133,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  }
                ]
              },
              {
                "pathId" : "21011-66795-66798-21010-21069-21084-21079",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 107,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "            scene.setFill(null);\n            stage.initStyle(StageStyle.TRANSPARENT);\n            stage.show();\n        }    \n        \n        if (info.getText().equals(\"1\")) /* <=== */ \n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText());\n        "
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 111,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  },
                  {
                    "sample" : "println(info.getText())",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "System.out.println(tableData0)",
                    "lineNumber" : 100,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0); /* <=== */ \n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        "
                  }
                ]
              },
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              },
              {
                "pathId" : "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 792,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Thursday\");\n        weekDays.put(\"6\",\"Friday\");\n        weekDays.put(\"7\",\"Saturday\");\n        \n        appDatePicker.setValue(null);\n        setDates(); /* <=== */ \n        \n        ArrayList<Integer> day3 = new ArrayList<Integer>();\n        day3.add(1);\n        day3.add(2);\n        day3.add(3);"
                  },
                  {
                    "sample" : "this.consultationAreaCombo",
                    "lineNumber" : 823,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "(String) consultationAreaCombo.getValue()",
                    "lineNumber" : 823,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 823,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 824,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 973,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "\"SELECT \" + \"app_day \" + \"FROM lab_appointment_timetable INNER JOIN lab_test ON \" + \"lab_appointment_timetable.app_test_id = lab_test.test_id \" + \"WHERE lab_test.test_name='\" + testName + \"';\"",
                    "lineNumber" : 976,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 976,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 985,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 985,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 985,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 989,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 990,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 990,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 992,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 992,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 993,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 993,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 995,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 973,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "receptionist.getLabAvailableDays(testName)",
                    "lineNumber" : 824,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 824,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 825,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data); /* <=== */ \n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           \n                String number = Integer.toString(i+1);"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "tableData0.size()",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 99,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 106,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 106,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 108,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 139,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 139,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1).split(\" \")",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 108,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp[0]",
                    "lineNumber" : 109,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 109,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 131,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "LocalDate.parse(date, formatter)",
                    "lineNumber" : 131,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 131,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 133,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  },
                  {
                    "sample" : "System.out.println(finDate.atTime(hour1, minute1))",
                    "lineNumber" : 133,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  }
                ]
              },
              {
                "pathId" : "21011-66795-66798-21010-21069-21084-21079",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 107,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "            scene.setFill(null);\n            stage.initStyle(StageStyle.TRANSPARENT);\n            stage.show();\n        }    \n        \n        if (info.getText().equals(\"1\")) /* <=== */ \n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText());\n        "
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 111,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  },
                  {
                    "sample" : "println(info.getText())",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.OnlineIdentifiers.IPAddress",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "5143-5197-1378-1447-1437-1436-1472-1471-1470-1469-1483-1501-1500-1499-1507-1506-1505-1511",
                "path" : [
                  {
                    "sample" : "ip",
                    "lineNumber" : 977,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "           showPasswordPopup();\n            \n        } else {\n            \n            try{\n                String ip=\"127.0.0.1\"; /* <=== */ \n                String databaseSchema = admin.database;\n                String user = admin.dbUsername;\n                String path = \"/home/heshan/\";\n\n                Stage stage = new Stage();"
                  },
                  {
                    "sample" : "ip",
                    "lineNumber" : 987,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "                Stage stage = new Stage();\n                chooser.setTitle(\"Select Export Directory\");\n                File selectedDirectory = chooser.showDialog(stage);\n                path = selectedDirectory.getAbsolutePath()+\"/\";\n\n                boolean result = admin.export( ip, databaseSchema, user, pass, path ); /* <=== */ \n                if (result == true) \n                {    \n                    showSuccessIndicator();\n                    dbPasswordlbl.setText(\"\");\n                } else {"
                  },
                  {
                    "sample" : "ip",
                    "lineNumber" : 516,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public boolean export( String ip, String databaseSchema, String user, String pass,String path ) /* <=== */ \n    {\n        boolean result = true;\n        String port=\"3306\";\n        \n        java.util.Date dateNow = new java.util.Date();"
                  },
                  {
                    "sample" : "ip",
                    "lineNumber" : 530,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        System.out.println(\"date into yyyyMMdd format: \" + date_to_string);\n        \n        String ss=\"backup.sql\";\n        String fullName  = path + \" \" + date_to_string + \" \" + ss;\n        \n        String dumpCommand = \"mysqldump \" + databaseSchema + \" -h \" + ip + \" -u \" + user +\" -p\" + pass; /* <=== */ \n        \n        Runtime rt = Runtime.getRuntime();\n        \n        File test=new File(fullName);\n        "
                  },
                  {
                    "sample" : "\"mysqldump \" + databaseSchema + \" -h \" + ip + \" -u \" + user + \" -p\" + pass",
                    "lineNumber" : 530,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        System.out.println(\"date into yyyyMMdd format: \" + date_to_string);\n        \n        String ss=\"backup.sql\";\n        String fullName  = path + \" \" + date_to_string + \" \" + ss;\n        \n        String dumpCommand = \"mysqldump \" + databaseSchema + \" -h \" + ip + \" -u \" + user +\" -p\" + pass; /* <=== */ \n        \n        Runtime rt = Runtime.getRuntime();\n        \n        File test=new File(fullName);\n        "
                  },
                  {
                    "sample" : "dumpCommand",
                    "lineNumber" : 530,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        System.out.println(\"date into yyyyMMdd format: \" + date_to_string);\n        \n        String ss=\"backup.sql\";\n        String fullName  = path + \" \" + date_to_string + \" \" + ss;\n        \n        String dumpCommand = \"mysqldump \" + databaseSchema + \" -h \" + ip + \" -u \" + user +\" -p\" + pass; /* <=== */ \n        \n        Runtime rt = Runtime.getRuntime();\n        \n        File test=new File(fullName);\n        "
                  },
                  {
                    "sample" : "dumpCommand",
                    "lineNumber" : 539,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        File test=new File(fullName);\n        \n        PrintStream ps;\n        \n        try{\n                Process child = rt.exec(dumpCommand); /* <=== */ \n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream();\n                int ch;\n                while ((ch = in.read()) != -1) \n                {"
                  },
                  {
                    "sample" : "rt",
                    "lineNumber" : 539,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        File test=new File(fullName);\n        \n        PrintStream ps;\n        \n        try{\n                Process child = rt.exec(dumpCommand); /* <=== */ \n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream();\n                int ch;\n                while ((ch = in.read()) != -1) \n                {"
                  },
                  {
                    "sample" : "rt.exec(dumpCommand)",
                    "lineNumber" : 539,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        File test=new File(fullName);\n        \n        PrintStream ps;\n        \n        try{\n                Process child = rt.exec(dumpCommand); /* <=== */ \n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream();\n                int ch;\n                while ((ch = in.read()) != -1) \n                {"
                  },
                  {
                    "sample" : "child",
                    "lineNumber" : 539,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        File test=new File(fullName);\n        \n        PrintStream ps;\n        \n        try{\n                Process child = rt.exec(dumpCommand); /* <=== */ \n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream();\n                int ch;\n                while ((ch = in.read()) != -1) \n                {"
                  },
                  {
                    "sample" : "child",
                    "lineNumber" : 541,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        PrintStream ps;\n        \n        try{\n                Process child = rt.exec(dumpCommand);\n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream(); /* <=== */ \n                int ch;\n                while ((ch = in.read()) != -1) \n                {\n                        ps.write(ch);\n                        //System.out.write(ch); //to view it by console"
                  },
                  {
                    "sample" : "child",
                    "lineNumber" : 549,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                {\n                        ps.write(ch);\n                        //System.out.write(ch); //to view it by console\n                }\n\n                InputStream err = child.getErrorStream(); /* <=== */ \n                while ((ch = err.read()) != -1) \n                {\n                        System.out.write(ch);\n                }\n        }catch(IOException exc) { result = false;}"
                  },
                  {
                    "sample" : "child.getErrorStream()",
                    "lineNumber" : 549,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                {\n                        ps.write(ch);\n                        //System.out.write(ch); //to view it by console\n                }\n\n                InputStream err = child.getErrorStream(); /* <=== */ \n                while ((ch = err.read()) != -1) \n                {\n                        System.out.write(ch);\n                }\n        }catch(IOException exc) { result = false;}"
                  },
                  {
                    "sample" : "err",
                    "lineNumber" : 549,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                {\n                        ps.write(ch);\n                        //System.out.write(ch); //to view it by console\n                }\n\n                InputStream err = child.getErrorStream(); /* <=== */ \n                while ((ch = err.read()) != -1) \n                {\n                        System.out.write(ch);\n                }\n        }catch(IOException exc) { result = false;}"
                  },
                  {
                    "sample" : "err",
                    "lineNumber" : 550,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                        ps.write(ch);\n                        //System.out.write(ch); //to view it by console\n                }\n\n                InputStream err = child.getErrorStream();\n                while ((ch = err.read()) != -1)  /* <=== */ \n                {\n                        System.out.write(ch);\n                }\n        }catch(IOException exc) { result = false;}\n        "
                  },
                  {
                    "sample" : "err.read()",
                    "lineNumber" : 550,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                        ps.write(ch);\n                        //System.out.write(ch); //to view it by console\n                }\n\n                InputStream err = child.getErrorStream();\n                while ((ch = err.read()) != -1)  /* <=== */ \n                {\n                        System.out.write(ch);\n                }\n        }catch(IOException exc) { result = false;}\n        "
                  },
                  {
                    "sample" : "ch",
                    "lineNumber" : 550,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                        ps.write(ch);\n                        //System.out.write(ch); //to view it by console\n                }\n\n                InputStream err = child.getErrorStream();\n                while ((ch = err.read()) != -1)  /* <=== */ \n                {\n                        System.out.write(ch);\n                }\n        }catch(IOException exc) { result = false;}\n        "
                  },
                  {
                    "sample" : "System.out.write(ch)",
                    "lineNumber" : 552,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                }\n\n                InputStream err = child.getErrorStream();\n                while ((ch = err.read()) != -1) \n                {\n                        System.out.write(ch); /* <=== */ \n                }\n        }catch(IOException exc) { result = false;}\n        \n        return result;\n    }"
                  }
                ]
              },
              {
                "pathId" : "12450-12504-1378-1447-1437-1436-1472-1471-1470-1469-1483-1482-1481-1490-1489-1488-1494",
                "path" : [
                  {
                    "sample" : "ip",
                    "lineNumber" : 147,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
                    "excerpt" : "           showPasswordPopup();\n            \n        } else {\n            \n            try{\n                String ip=\"127.0.0.1\"; /* <=== */ \n                String databaseSchema = admin.database;\n                String user = admin.dbUsername;\n                String path = \"/home/heshan/\";\n\n                Stage stage = new Stage();"
                  },
                  {
                    "sample" : "ip",
                    "lineNumber" : 157,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/Admin/SettingsController.java",
                    "excerpt" : "                Stage stage = new Stage();\n                chooser.setTitle(\"Select Export Directory\");\n                File selectedDirectory = chooser.showDialog(stage);\n                path = selectedDirectory.getAbsolutePath()+\"/\";\n\n                boolean result = admin.export( ip, databaseSchema, user, pass, path ); /* <=== */ \n                if (result == true) \n                {    \n                    showSuccessIndicator();\n                    dbPasswordlbl.setText(\"\");\n                } else {"
                  },
                  {
                    "sample" : "ip",
                    "lineNumber" : 516,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public boolean export( String ip, String databaseSchema, String user, String pass,String path ) /* <=== */ \n    {\n        boolean result = true;\n        String port=\"3306\";\n        \n        java.util.Date dateNow = new java.util.Date();"
                  },
                  {
                    "sample" : "ip",
                    "lineNumber" : 530,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        System.out.println(\"date into yyyyMMdd format: \" + date_to_string);\n        \n        String ss=\"backup.sql\";\n        String fullName  = path + \" \" + date_to_string + \" \" + ss;\n        \n        String dumpCommand = \"mysqldump \" + databaseSchema + \" -h \" + ip + \" -u \" + user +\" -p\" + pass; /* <=== */ \n        \n        Runtime rt = Runtime.getRuntime();\n        \n        File test=new File(fullName);\n        "
                  },
                  {
                    "sample" : "\"mysqldump \" + databaseSchema + \" -h \" + ip + \" -u \" + user + \" -p\" + pass",
                    "lineNumber" : 530,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        System.out.println(\"date into yyyyMMdd format: \" + date_to_string);\n        \n        String ss=\"backup.sql\";\n        String fullName  = path + \" \" + date_to_string + \" \" + ss;\n        \n        String dumpCommand = \"mysqldump \" + databaseSchema + \" -h \" + ip + \" -u \" + user +\" -p\" + pass; /* <=== */ \n        \n        Runtime rt = Runtime.getRuntime();\n        \n        File test=new File(fullName);\n        "
                  },
                  {
                    "sample" : "dumpCommand",
                    "lineNumber" : 530,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        System.out.println(\"date into yyyyMMdd format: \" + date_to_string);\n        \n        String ss=\"backup.sql\";\n        String fullName  = path + \" \" + date_to_string + \" \" + ss;\n        \n        String dumpCommand = \"mysqldump \" + databaseSchema + \" -h \" + ip + \" -u \" + user +\" -p\" + pass; /* <=== */ \n        \n        Runtime rt = Runtime.getRuntime();\n        \n        File test=new File(fullName);\n        "
                  },
                  {
                    "sample" : "dumpCommand",
                    "lineNumber" : 539,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        File test=new File(fullName);\n        \n        PrintStream ps;\n        \n        try{\n                Process child = rt.exec(dumpCommand); /* <=== */ \n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream();\n                int ch;\n                while ((ch = in.read()) != -1) \n                {"
                  },
                  {
                    "sample" : "rt",
                    "lineNumber" : 539,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        File test=new File(fullName);\n        \n        PrintStream ps;\n        \n        try{\n                Process child = rt.exec(dumpCommand); /* <=== */ \n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream();\n                int ch;\n                while ((ch = in.read()) != -1) \n                {"
                  },
                  {
                    "sample" : "rt.exec(dumpCommand)",
                    "lineNumber" : 539,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        File test=new File(fullName);\n        \n        PrintStream ps;\n        \n        try{\n                Process child = rt.exec(dumpCommand); /* <=== */ \n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream();\n                int ch;\n                while ((ch = in.read()) != -1) \n                {"
                  },
                  {
                    "sample" : "child",
                    "lineNumber" : 539,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        File test=new File(fullName);\n        \n        PrintStream ps;\n        \n        try{\n                Process child = rt.exec(dumpCommand); /* <=== */ \n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream();\n                int ch;\n                while ((ch = in.read()) != -1) \n                {"
                  },
                  {
                    "sample" : "child",
                    "lineNumber" : 541,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        PrintStream ps;\n        \n        try{\n                Process child = rt.exec(dumpCommand);\n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream(); /* <=== */ \n                int ch;\n                while ((ch = in.read()) != -1) \n                {\n                        ps.write(ch);\n                        //System.out.write(ch); //to view it by console"
                  },
                  {
                    "sample" : "child.getInputStream()",
                    "lineNumber" : 541,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        PrintStream ps;\n        \n        try{\n                Process child = rt.exec(dumpCommand);\n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream(); /* <=== */ \n                int ch;\n                while ((ch = in.read()) != -1) \n                {\n                        ps.write(ch);\n                        //System.out.write(ch); //to view it by console"
                  },
                  {
                    "sample" : "in",
                    "lineNumber" : 541,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        PrintStream ps;\n        \n        try{\n                Process child = rt.exec(dumpCommand);\n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream(); /* <=== */ \n                int ch;\n                while ((ch = in.read()) != -1) \n                {\n                        ps.write(ch);\n                        //System.out.write(ch); //to view it by console"
                  },
                  {
                    "sample" : "in",
                    "lineNumber" : 543,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        try{\n                Process child = rt.exec(dumpCommand);\n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream();\n                int ch;\n                while ((ch = in.read()) != -1)  /* <=== */ \n                {\n                        ps.write(ch);\n                        //System.out.write(ch); //to view it by console\n                }\n"
                  },
                  {
                    "sample" : "in.read()",
                    "lineNumber" : 543,
                    "columnNumber" : 30,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        try{\n                Process child = rt.exec(dumpCommand);\n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream();\n                int ch;\n                while ((ch = in.read()) != -1)  /* <=== */ \n                {\n                        ps.write(ch);\n                        //System.out.write(ch); //to view it by console\n                }\n"
                  },
                  {
                    "sample" : "ch",
                    "lineNumber" : 543,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        try{\n                Process child = rt.exec(dumpCommand);\n                ps=new PrintStream(test);\n                InputStream in = child.getInputStream();\n                int ch;\n                while ((ch = in.read()) != -1)  /* <=== */ \n                {\n                        ps.write(ch);\n                        //System.out.write(ch); //to view it by console\n                }\n"
                  },
                  {
                    "sample" : "ps.write(ch)",
                    "lineNumber" : 545,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "                ps=new PrintStream(test);\n                InputStream in = child.getInputStream();\n                int ch;\n                while ((ch = in.read()) != -1) \n                {\n                        ps.write(ch); /* <=== */ \n                        //System.out.write(ch); //to view it by console\n                }\n\n                InputStream err = child.getErrorStream();\n                while ((ch = err.read()) != -1) "
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "System.out.println(tableData0)",
                    "lineNumber" : 100,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0); /* <=== */ \n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        "
                  }
                ]
              },
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              },
              {
                "pathId" : "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 792,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Thursday\");\n        weekDays.put(\"6\",\"Friday\");\n        weekDays.put(\"7\",\"Saturday\");\n        \n        appDatePicker.setValue(null);\n        setDates(); /* <=== */ \n        \n        ArrayList<Integer> day3 = new ArrayList<Integer>();\n        day3.add(1);\n        day3.add(2);\n        day3.add(3);"
                  },
                  {
                    "sample" : "this.consultationAreaCombo",
                    "lineNumber" : 823,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "(String) consultationAreaCombo.getValue()",
                    "lineNumber" : 823,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 823,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 824,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 973,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "\"SELECT \" + \"app_day \" + \"FROM lab_appointment_timetable INNER JOIN lab_test ON \" + \"lab_appointment_timetable.app_test_id = lab_test.test_id \" + \"WHERE lab_test.test_name='\" + testName + \"';\"",
                    "lineNumber" : 976,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 976,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 985,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 985,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 985,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 989,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 990,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 990,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 992,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 992,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 993,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 993,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 995,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 973,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "receptionist.getLabAvailableDays(testName)",
                    "lineNumber" : 824,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 824,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 825,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data); /* <=== */ \n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           \n                String number = Integer.toString(i+1);"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "tableData0.size()",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 99,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 106,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 106,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 108,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 139,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 139,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1).split(\" \")",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 108,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp[0]",
                    "lineNumber" : 109,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 109,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 131,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "LocalDate.parse(date, formatter)",
                    "lineNumber" : 131,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 131,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 133,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  },
                  {
                    "sample" : "System.out.println(finDate.atTime(hour1, minute1))",
                    "lineNumber" : 133,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "System.out.println(tableData0)",
                    "lineNumber" : 100,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0); /* <=== */ \n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        "
                  }
                ]
              },
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              },
              {
                "pathId" : "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 792,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Thursday\");\n        weekDays.put(\"6\",\"Friday\");\n        weekDays.put(\"7\",\"Saturday\");\n        \n        appDatePicker.setValue(null);\n        setDates(); /* <=== */ \n        \n        ArrayList<Integer> day3 = new ArrayList<Integer>();\n        day3.add(1);\n        day3.add(2);\n        day3.add(3);"
                  },
                  {
                    "sample" : "this.consultationAreaCombo",
                    "lineNumber" : 823,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "(String) consultationAreaCombo.getValue()",
                    "lineNumber" : 823,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 823,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 824,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 973,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "\"SELECT \" + \"app_day \" + \"FROM lab_appointment_timetable INNER JOIN lab_test ON \" + \"lab_appointment_timetable.app_test_id = lab_test.test_id \" + \"WHERE lab_test.test_name='\" + testName + \"';\"",
                    "lineNumber" : 976,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 976,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 985,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 985,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 985,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 989,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 990,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 990,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 992,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 992,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 993,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 993,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 995,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 973,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "receptionist.getLabAvailableDays(testName)",
                    "lineNumber" : 824,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 824,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 825,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data); /* <=== */ \n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           \n                String number = Integer.toString(i+1);"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "tableData0.size()",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 99,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 106,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 106,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 108,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 139,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 139,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1).split(\" \")",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 108,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp[0]",
                    "lineNumber" : 109,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 109,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 131,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "LocalDate.parse(date, formatter)",
                    "lineNumber" : 131,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 131,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 133,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  },
                  {
                    "sample" : "System.out.println(finDate.atTime(hour1, minute1))",
                    "lineNumber" : 133,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.Photograph",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "System.out.println(tableData0)",
                    "lineNumber" : 100,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0); /* <=== */ \n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        "
                  }
                ]
              },
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              },
              {
                "pathId" : "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 792,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Thursday\");\n        weekDays.put(\"6\",\"Friday\");\n        weekDays.put(\"7\",\"Saturday\");\n        \n        appDatePicker.setValue(null);\n        setDates(); /* <=== */ \n        \n        ArrayList<Integer> day3 = new ArrayList<Integer>();\n        day3.add(1);\n        day3.add(2);\n        day3.add(3);"
                  },
                  {
                    "sample" : "this.consultationAreaCombo",
                    "lineNumber" : 823,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "(String) consultationAreaCombo.getValue()",
                    "lineNumber" : 823,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 823,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 824,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 973,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "\"SELECT \" + \"app_day \" + \"FROM lab_appointment_timetable INNER JOIN lab_test ON \" + \"lab_appointment_timetable.app_test_id = lab_test.test_id \" + \"WHERE lab_test.test_name='\" + testName + \"';\"",
                    "lineNumber" : 976,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 976,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 985,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 985,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 985,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 989,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 990,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 990,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 992,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 992,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 993,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 993,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 995,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 973,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "receptionist.getLabAvailableDays(testName)",
                    "lineNumber" : 824,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 824,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 825,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data); /* <=== */ \n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           \n                String number = Integer.toString(i+1);"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "tableData0.size()",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 99,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 106,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 106,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 108,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 139,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 139,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1).split(\" \")",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 108,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp[0]",
                    "lineNumber" : 109,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 109,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 131,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "LocalDate.parse(date, formatter)",
                    "lineNumber" : 131,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 131,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 133,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  },
                  {
                    "sample" : "System.out.println(finDate.atTime(hour1, minute1))",
                    "lineNumber" : 133,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  }
                ]
              },
              {
                "pathId" : "21011-66795-66798-21010-21069-21084-21079",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 107,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "            scene.setFill(null);\n            stage.initStyle(StageStyle.TRANSPARENT);\n            stage.show();\n        }    \n        \n        if (info.getText().equals(\"1\")) /* <=== */ \n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText());\n        "
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 111,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  },
                  {
                    "sample" : "println(info.getText())",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.PersonalIdentification.Gender",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "System.out.println(tableData0)",
                    "lineNumber" : 100,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0); /* <=== */ \n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        "
                  }
                ]
              },
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              },
              {
                "pathId" : "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 792,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Thursday\");\n        weekDays.put(\"6\",\"Friday\");\n        weekDays.put(\"7\",\"Saturday\");\n        \n        appDatePicker.setValue(null);\n        setDates(); /* <=== */ \n        \n        ArrayList<Integer> day3 = new ArrayList<Integer>();\n        day3.add(1);\n        day3.add(2);\n        day3.add(3);"
                  },
                  {
                    "sample" : "this.consultationAreaCombo",
                    "lineNumber" : 823,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "(String) consultationAreaCombo.getValue()",
                    "lineNumber" : 823,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 823,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 824,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 973,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "\"SELECT \" + \"app_day \" + \"FROM lab_appointment_timetable INNER JOIN lab_test ON \" + \"lab_appointment_timetable.app_test_id = lab_test.test_id \" + \"WHERE lab_test.test_name='\" + testName + \"';\"",
                    "lineNumber" : 976,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 976,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 985,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 985,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 985,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 989,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 990,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 990,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 992,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 992,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 993,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 993,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 995,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 973,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "receptionist.getLabAvailableDays(testName)",
                    "lineNumber" : 824,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 824,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 825,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data); /* <=== */ \n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           \n                String number = Integer.toString(i+1);"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "tableData0.size()",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 99,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 106,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 106,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 108,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 139,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 139,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1).split(\" \")",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 108,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp[0]",
                    "lineNumber" : 109,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 109,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 131,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "LocalDate.parse(date, formatter)",
                    "lineNumber" : 131,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 131,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 133,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  },
                  {
                    "sample" : "System.out.println(finDate.atTime(hour1, minute1))",
                    "lineNumber" : 133,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  }
                ]
              },
              {
                "pathId" : "21011-66795-66798-21010-21069-21084-21079",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 107,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "            scene.setFill(null);\n            stage.initStyle(StageStyle.TRANSPARENT);\n            stage.show();\n        }    \n        \n        if (info.getText().equals(\"1\")) /* <=== */ \n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText());\n        "
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 111,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  },
                  {
                    "sample" : "println(info.getText())",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.HealthData.MedicalCertificates",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "22288-22286-22290-22294-22298-22302-22306-22310-22336-22405-22430-22429-22428-22490-22494-22493-22523-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-22519-22518-22538-22540",
                "path" : [
                  {
                    "sample" : "\"BloodGroupingRh\"",
                    "lineNumber" : 371,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\n\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\"); /* <=== */ \n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 371,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\n\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\"); /* <=== */ \n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 372,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\");  /* <=== */ \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 373,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\"); /* <=== */ \n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 374,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\"); /* <=== */ \n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 375,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\"); /* <=== */ \n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";\n            "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 376,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\"); /* <=== */ \n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";\n            \n            String prefx = testID.substring(0,2);"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 377,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");         /* <=== */ \n                    \n            String tableName = \"\";\n            \n            String prefx = testID.substring(0,2);\n            boolean flg = false;"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 387,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            boolean flg = false;\n            \n            switch(prefx)        \n            {\n                case \"lv\":\n                    tableName = tables.get(prefx); /* <=== */ \n                    flg = true;\n                    break;\n                case \"bg\":\n                    tableName = tables.get(prefx);\n                    flg = true;"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 414,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,4);\n                switch(prefx)        \n                {\n                    case \"scpt\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                }    \n                    \n            }    "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 427,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tables.get(prefx)",
                    "lineNumber" : 427,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tableName",
                    "lineNumber" : 427,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tableName",
                    "lineNumber" : 449,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tableId.put(\"SeriumCreatinePhosphokinase\",\"tst_SCP_id\");\n            tableId.put(\"SeriumCreatinePhosphokinaseTotal\",\"tst_SCPT_id\");\n            tableId.put(\"UrineFullReport\",\"tst_ur_id\");\n            tableId.put(\"completeBloodCount\",\"tst_CBC_id\");\n\n            String testIdCol = tableId.get(tableName); /* <=== */ \n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" +\n                            \"FROM \"+tableName+\" \" +"
                  },
                  {
                    "sample" : "\"SELECT * \" + \"FROM \" + tableName + \" \" + \"WHERE \" + testIdCol + \" = '\" + testID + \"';\"",
                    "lineNumber" : 453,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            String testIdCol = tableId.get(tableName);\n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" + /* <=== */ \n                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 453,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            String testIdCol = tableId.get(tableName);\n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" + /* <=== */ \n                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 459,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql)",
                    "lineNumber" : 459,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 459,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 464,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                    data = super.dbOperator.customSelection(sql);\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta); /* <=== */ \n            \n            System.out.println(data);\n            final Example example = new Example(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 466,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);\n            \n            System.out.println(data); /* <=== */ \n            final Example example = new Example(data);\n            return data;\n\t}\n\n    public ArrayList<ArrayList<ArrayList<String>>> getPatientInfo(String searchType, String searchWord)"
                  }
                ]
              },
              {
                "pathId" : "22288-22286-22290-22294-22298-22302-22306-22310-22336-22405-22430-22429-22428-22490-22494-22493-22523-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "\"BloodGroupingRh\"",
                    "lineNumber" : 371,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\n\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\"); /* <=== */ \n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 371,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\n\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\"); /* <=== */ \n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 372,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\");  /* <=== */ \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 373,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\"); /* <=== */ \n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 374,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\"); /* <=== */ \n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 375,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\"); /* <=== */ \n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";\n            "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 376,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\"); /* <=== */ \n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";\n            \n            String prefx = testID.substring(0,2);"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 377,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");         /* <=== */ \n                    \n            String tableName = \"\";\n            \n            String prefx = testID.substring(0,2);\n            boolean flg = false;"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 387,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            boolean flg = false;\n            \n            switch(prefx)        \n            {\n                case \"lv\":\n                    tableName = tables.get(prefx); /* <=== */ \n                    flg = true;\n                    break;\n                case \"bg\":\n                    tableName = tables.get(prefx);\n                    flg = true;"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 414,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,4);\n                switch(prefx)        \n                {\n                    case \"scpt\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                }    \n                    \n            }    "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 427,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tables.get(prefx)",
                    "lineNumber" : 427,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tableName",
                    "lineNumber" : 427,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tableName",
                    "lineNumber" : 449,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tableId.put(\"SeriumCreatinePhosphokinase\",\"tst_SCP_id\");\n            tableId.put(\"SeriumCreatinePhosphokinaseTotal\",\"tst_SCPT_id\");\n            tableId.put(\"UrineFullReport\",\"tst_ur_id\");\n            tableId.put(\"completeBloodCount\",\"tst_CBC_id\");\n\n            String testIdCol = tableId.get(tableName); /* <=== */ \n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" +\n                            \"FROM \"+tableName+\" \" +"
                  },
                  {
                    "sample" : "\"SELECT * \" + \"FROM \" + tableName + \" \" + \"WHERE \" + testIdCol + \" = '\" + testID + \"';\"",
                    "lineNumber" : 453,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            String testIdCol = tableId.get(tableName);\n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" + /* <=== */ \n                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 453,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            String testIdCol = tableId.get(tableName);\n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" + /* <=== */ \n                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 459,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              },
              {
                "pathId" : "32500-32498-32497-32511-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-32507-32506-32516-32520-33143-33142-33249-33263-37751-37924-37923-37922-37921-37934-38123-38141-38140-38139-38144-38171-38190-38208-38125-38122-38127",
                "path" : [
                  {
                    "sample" : "\"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"",
                    "lineNumber" : 832,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\"; /* <=== */ \n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "\"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\" + id + \"'\"",
                    "lineNumber" : 832,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\"; /* <=== */ \n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 832,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\"; /* <=== */ \n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 836,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";\n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql1)",
                    "lineNumber" : 836,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";\n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 836,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";\n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 827,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        //System.out.println(data);\n        return data;\n    }\n\n    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id) /* <=== */ \n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";"
                  },
                  {
                    "sample" : "lab.getBloodGroupingRh(reportID)",
                    "lineNumber" : 173,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                data = lab.getLipidTestReport(reportID);\n                type = \"li\";\n                \n            } else if ( reportID.substring(0,2).equals(\"bg\") ) {\n            \n                data = lab.getBloodGroupingRh(reportID); /* <=== */ \n                type = \"bg\";\n                \n            } else if ( reportID.substring(0,3).equals(\"cbc\") ) {\n            \n                data = lab.getCompleteBloodCount(reportID);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 173,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                data = lab.getLipidTestReport(reportID);\n                type = \"li\";\n                \n            } else if ( reportID.substring(0,2).equals(\"bg\") ) {\n            \n                data = lab.getBloodGroupingRh(reportID); /* <=== */ \n                type = \"bg\";\n                \n            } else if ( reportID.substring(0,3).equals(\"cbc\") ) {\n            \n                data = lab.getCompleteBloodCount(reportID);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 203,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                data = lab.getSeriumCreatinePhosphokinase(reportID);\n                type = \"scp\";\n                \n            }     \n            \n            if (data.size() > 1){ /* <=== */ \n                LabReportPreviewController preview = new LabReportPreviewController(lab);\n                preview.setData(data,type);\n\n                Stage stage = new Stage();\n                Scene scene = new Scene(preview);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 205,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                \n            }     \n            \n            if (data.size() > 1){\n                LabReportPreviewController preview = new LabReportPreviewController(lab);\n                preview.setData(data,type); /* <=== */ \n\n                Stage stage = new Stage();\n                Scene scene = new Scene(preview);\n                stage.setScene(scene);\n"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 43,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "    }\n    \n    \n    @FXML TableView report;\n    \n    public void setData(ArrayList<ArrayList<String>> data, String type) /* <=== */ \n    {\n        System.out.println(data);\n        ObservableList<LabReport> data2 = FXCollections.observableArrayList();\n        \n        String[] urArray = {"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 119,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "            case \"scp\":\n                tmpArray = scpArray;\n                break;    \n        }    \n        \n        int size = data.get(0).size(); /* <=== */ \n        \n        String tmp = data.get(1).get(size-2);\n        \n        System.out.println(tmp);\n        "
                  },
                  {
                    "sample" : "data.get(0)",
                    "lineNumber" : 119,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "            case \"scp\":\n                tmpArray = scpArray;\n                break;    \n        }    \n        \n        int size = data.get(0).size(); /* <=== */ \n        \n        String tmp = data.get(1).get(size-2);\n        \n        System.out.println(tmp);\n        "
                  },
                  {
                    "sample" : "data.get(0).size()",
                    "lineNumber" : 119,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "            case \"scp\":\n                tmpArray = scpArray;\n                break;    \n        }    \n        \n        int size = data.get(0).size(); /* <=== */ \n        \n        String tmp = data.get(1).get(size-2);\n        \n        System.out.println(tmp);\n        "
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 119,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "            case \"scp\":\n                tmpArray = scpArray;\n                break;    \n        }    \n        \n        int size = data.get(0).size(); /* <=== */ \n        \n        String tmp = data.get(1).get(size-2);\n        \n        System.out.println(tmp);\n        "
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 121,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "                break;    \n        }    \n        \n        int size = data.get(0).size();\n        \n        String tmp = data.get(1).get(size-2); /* <=== */ \n        \n        System.out.println(tmp);\n        \n        ArrayList<ArrayList<String>> data4 = lab.getPatientInfo(tmp);\n        "
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 157,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "        data2.add(new LabReport(\"\", \"\"));\n        \n        \n        System.out.println(data);\n        \n        for(int i = 1; i < size; i++) /* <=== */ \n        {\n            System.out.println(i);\n            if ( ( i != 1 ) && ( i != size-2 ) && ( i != size-1 ) )\n            {    \n                data2.add(new LabReport(tmpArray[i]+\" (g/dL)\", data.get(1).get(i)));"
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 160,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "        System.out.println(data);\n        \n        for(int i = 1; i < size; i++)\n        {\n            System.out.println(i);\n            if ( ( i != 1 ) && ( i != size-2 ) && ( i != size-1 ) ) /* <=== */ \n            {    \n                data2.add(new LabReport(tmpArray[i]+\" (g/dL)\", data.get(1).get(i)));\n            }    \n            else if ( i == size-2 )\n            {"
                  },
                  {
                    "sample" : "size - 2",
                    "lineNumber" : 160,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "        System.out.println(data);\n        \n        for(int i = 1; i < size; i++)\n        {\n            System.out.println(i);\n            if ( ( i != 1 ) && ( i != size-2 ) && ( i != size-1 ) ) /* <=== */ \n            {    \n                data2.add(new LabReport(tmpArray[i]+\" (g/dL)\", data.get(1).get(i)));\n            }    \n            else if ( i == size-2 )\n            {"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 160,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "        System.out.println(data);\n        \n        for(int i = 1; i < size; i++)\n        {\n            System.out.println(i);\n            if ( ( i != 1 ) && ( i != size-2 ) && ( i != size-1 ) ) /* <=== */ \n            {    \n                data2.add(new LabReport(tmpArray[i]+\" (g/dL)\", data.get(1).get(i)));\n            }    \n            else if ( i == size-2 )\n            {"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 160,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "        System.out.println(data);\n        \n        for(int i = 1; i < size; i++)\n        {\n            System.out.println(i);\n            if ( ( i != 1 ) && ( i != size-2 ) && ( i != size-1 ) ) /* <=== */ \n            {    \n                data2.add(new LabReport(tmpArray[i]+\" (g/dL)\", data.get(1).get(i)));\n            }    \n            else if ( i == size-2 )\n            {"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 164,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "            System.out.println(i);\n            if ( ( i != 1 ) && ( i != size-2 ) && ( i != size-1 ) )\n            {    \n                data2.add(new LabReport(tmpArray[i]+\" (g/dL)\", data.get(1).get(i)));\n            }    \n            else if ( i == size-2 ) /* <=== */ \n            {\n                data2.add(new LabReport(\"\", \"\"));\n            }    \n            else if ( i == size-1 )\n            {"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 168,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "            }    \n            else if ( i == size-2 )\n            {\n                data2.add(new LabReport(\"\", \"\"));\n            }    \n            else if ( i == size-1 ) /* <=== */ \n            {\n                data2.add(new LabReport(\"Date\", data.get(1).get(i)));\n            }    \n            \n        }"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 170,
                    "columnNumber" : 65,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "            {\n                data2.add(new LabReport(\"\", \"\"));\n            }    \n            else if ( i == size-1 )\n            {\n                data2.add(new LabReport(\"Date\", data.get(1).get(i))); /* <=== */ \n            }    \n            \n        }\n        report.setItems(data2);\n        //System.out.println(data);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 157,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "        data2.add(new LabReport(\"\", \"\"));\n        \n        \n        System.out.println(data);\n        \n        for(int i = 1; i < size; i++) /* <=== */ \n        {\n            System.out.println(i);\n            if ( ( i != 1 ) && ( i != size-2 ) && ( i != size-1 ) )\n            {    \n                data2.add(new LabReport(tmpArray[i]+\" (g/dL)\", data.get(1).get(i)));"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 157,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "        data2.add(new LabReport(\"\", \"\"));\n        \n        \n        System.out.println(data);\n        \n        for(int i = 1; i < size; i++) /* <=== */ \n        {\n            System.out.println(i);\n            if ( ( i != 1 ) && ( i != size-2 ) && ( i != size-1 ) )\n            {    \n                data2.add(new LabReport(tmpArray[i]+\" (g/dL)\", data.get(1).get(i)));"
                  },
                  {
                    "sample" : "System.out.println(i)",
                    "lineNumber" : 159,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "        \n        System.out.println(data);\n        \n        for(int i = 1; i < size; i++)\n        {\n            System.out.println(i); /* <=== */ \n            if ( ( i != 1 ) && ( i != size-2 ) && ( i != size-1 ) )\n            {    \n                data2.add(new LabReport(tmpArray[i]+\" (g/dL)\", data.get(1).get(i)));\n            }    \n            else if ( i == size-2 )"
                  }
                ]
              },
              {
                "pathId" : "22288-22286-22290-22294-22298-22302-22306-22310-22336-22405-22430-22429-22428-22490-22494-22493-22523-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-22519-22518-22538-22551-29526-29542-29539-29536-29535-29552-29551-29550-29549-29548-29547-29546-29545-29570-29565",
                "path" : [
                  {
                    "sample" : "\"BloodGroupingRh\"",
                    "lineNumber" : 371,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\n\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\"); /* <=== */ \n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 371,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\n\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\"); /* <=== */ \n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 372,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\");  /* <=== */ \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 373,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\"); /* <=== */ \n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 374,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\"); /* <=== */ \n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 375,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\"); /* <=== */ \n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";\n            "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 376,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\"); /* <=== */ \n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";\n            \n            String prefx = testID.substring(0,2);"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 377,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");         /* <=== */ \n                    \n            String tableName = \"\";\n            \n            String prefx = testID.substring(0,2);\n            boolean flg = false;"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 387,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            boolean flg = false;\n            \n            switch(prefx)        \n            {\n                case \"lv\":\n                    tableName = tables.get(prefx); /* <=== */ \n                    flg = true;\n                    break;\n                case \"bg\":\n                    tableName = tables.get(prefx);\n                    flg = true;"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 414,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,4);\n                switch(prefx)        \n                {\n                    case \"scpt\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                }    \n                    \n            }    "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 427,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tables.get(prefx)",
                    "lineNumber" : 427,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tableName",
                    "lineNumber" : 427,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tableName",
                    "lineNumber" : 449,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tableId.put(\"SeriumCreatinePhosphokinase\",\"tst_SCP_id\");\n            tableId.put(\"SeriumCreatinePhosphokinaseTotal\",\"tst_SCPT_id\");\n            tableId.put(\"UrineFullReport\",\"tst_ur_id\");\n            tableId.put(\"completeBloodCount\",\"tst_CBC_id\");\n\n            String testIdCol = tableId.get(tableName); /* <=== */ \n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" +\n                            \"FROM \"+tableName+\" \" +"
                  },
                  {
                    "sample" : "\"SELECT * \" + \"FROM \" + tableName + \" \" + \"WHERE \" + testIdCol + \" = '\" + testID + \"';\"",
                    "lineNumber" : 453,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            String testIdCol = tableId.get(tableName);\n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" + /* <=== */ \n                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 453,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            String testIdCol = tableId.get(tableName);\n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" + /* <=== */ \n                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 459,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql)",
                    "lineNumber" : 459,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 459,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 464,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                    data = super.dbOperator.customSelection(sql);\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta); /* <=== */ \n            \n            System.out.println(data);\n            final Example example = new Example(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 467,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);\n            \n            System.out.println(data);\n            final Example example = new Example(data); /* <=== */ \n            return data;\n\t}\n\n    public ArrayList<ArrayList<ArrayList<String>>> getPatientInfo(String searchType, String searchWord)\n\t{"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 20,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final Long ACCOUNT_ID = 0L;\n  public static final String APP_SECRET = \"[Your app secret]\";\n\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) { /* <=== */ \n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 22,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "Example.context",
                    "lineNumber" : 22,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "Example.ACCOUNT_ID",
                    "lineNumber" : 22,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 22,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "createCampaign()",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setName(\"Java SDK Test Campaign\")",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setSpendCap(10000L)",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setStatus(Campaign.EnumStatus.VALUE_PAUSED)",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "execute()",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "campaign",
                    "lineNumber" : 23,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "campaign",
                    "lineNumber" : 29,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();\n      System.out.println(campaign.fetch()); /* <=== */ \n    } catch (APIException e) {\n      e.printStackTrace();\n    }\n  }\n}"
                  },
                  {
                    "sample" : "println(campaign.fetch())",
                    "lineNumber" : 29,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();\n      System.out.println(campaign.fetch()); /* <=== */ \n    } catch (APIException e) {\n      e.printStackTrace();\n    }\n  }\n}"
                  }
                ]
              },
              {
                "pathId" : "32500-32498-32497-32511-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-32507-32506-32516-32520-33143-33142-33249-33263-37751-37754",
                "path" : [
                  {
                    "sample" : "\"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"",
                    "lineNumber" : 832,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\"; /* <=== */ \n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "\"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\" + id + \"'\"",
                    "lineNumber" : 832,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\"; /* <=== */ \n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 832,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\"; /* <=== */ \n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 836,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";\n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql1)",
                    "lineNumber" : 836,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";\n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 836,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";\n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 827,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        //System.out.println(data);\n        return data;\n    }\n\n    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id) /* <=== */ \n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";"
                  },
                  {
                    "sample" : "lab.getBloodGroupingRh(reportID)",
                    "lineNumber" : 173,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                data = lab.getLipidTestReport(reportID);\n                type = \"li\";\n                \n            } else if ( reportID.substring(0,2).equals(\"bg\") ) {\n            \n                data = lab.getBloodGroupingRh(reportID); /* <=== */ \n                type = \"bg\";\n                \n            } else if ( reportID.substring(0,3).equals(\"cbc\") ) {\n            \n                data = lab.getCompleteBloodCount(reportID);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 173,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                data = lab.getLipidTestReport(reportID);\n                type = \"li\";\n                \n            } else if ( reportID.substring(0,2).equals(\"bg\") ) {\n            \n                data = lab.getBloodGroupingRh(reportID); /* <=== */ \n                type = \"bg\";\n                \n            } else if ( reportID.substring(0,3).equals(\"cbc\") ) {\n            \n                data = lab.getCompleteBloodCount(reportID);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 203,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                data = lab.getSeriumCreatinePhosphokinase(reportID);\n                type = \"scp\";\n                \n            }     \n            \n            if (data.size() > 1){ /* <=== */ \n                LabReportPreviewController preview = new LabReportPreviewController(lab);\n                preview.setData(data,type);\n\n                Stage stage = new Stage();\n                Scene scene = new Scene(preview);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 205,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                \n            }     \n            \n            if (data.size() > 1){\n                LabReportPreviewController preview = new LabReportPreviewController(lab);\n                preview.setData(data,type); /* <=== */ \n\n                Stage stage = new Stage();\n                Scene scene = new Scene(preview);\n                stage.setScene(scene);\n"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 43,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "    }\n    \n    \n    @FXML TableView report;\n    \n    public void setData(ArrayList<ArrayList<String>> data, String type) /* <=== */ \n    {\n        System.out.println(data);\n        ObservableList<LabReport> data2 = FXCollections.observableArrayList();\n        \n        String[] urArray = {"
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 45,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "    \n    @FXML TableView report;\n    \n    public void setData(ArrayList<ArrayList<String>> data, String type)\n    {\n        System.out.println(data); /* <=== */ \n        ObservableList<LabReport> data2 = FXCollections.observableArrayList();\n        \n        String[] urArray = {\n            \"Test ID\",\"prescription_id\",\"Appearance\",\"S.G (Refractometer)\",\n            \"PH\",\"Protein\",\"Glucose\",\"Ketone Bodies\",\"Bilirubin\",\"Urobilirubin\","
                  }
                ]
              },
              {
                "pathId" : "32500-32498-32497-32511-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-32507-32506-32516-32520-33143-33142-33249-33263-37751-37924-37923-37922-37921-37934-37933-37930-37929-37928-37936",
                "path" : [
                  {
                    "sample" : "\"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"",
                    "lineNumber" : 832,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\"; /* <=== */ \n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "\"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\" + id + \"'\"",
                    "lineNumber" : 832,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\"; /* <=== */ \n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 832,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\"; /* <=== */ \n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 836,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";\n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql1)",
                    "lineNumber" : 836,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";\n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 836,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";\n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 827,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        //System.out.println(data);\n        return data;\n    }\n\n    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id) /* <=== */ \n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";"
                  },
                  {
                    "sample" : "lab.getBloodGroupingRh(reportID)",
                    "lineNumber" : 173,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                data = lab.getLipidTestReport(reportID);\n                type = \"li\";\n                \n            } else if ( reportID.substring(0,2).equals(\"bg\") ) {\n            \n                data = lab.getBloodGroupingRh(reportID); /* <=== */ \n                type = \"bg\";\n                \n            } else if ( reportID.substring(0,3).equals(\"cbc\") ) {\n            \n                data = lab.getCompleteBloodCount(reportID);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 173,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                data = lab.getLipidTestReport(reportID);\n                type = \"li\";\n                \n            } else if ( reportID.substring(0,2).equals(\"bg\") ) {\n            \n                data = lab.getBloodGroupingRh(reportID); /* <=== */ \n                type = \"bg\";\n                \n            } else if ( reportID.substring(0,3).equals(\"cbc\") ) {\n            \n                data = lab.getCompleteBloodCount(reportID);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 203,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                data = lab.getSeriumCreatinePhosphokinase(reportID);\n                type = \"scp\";\n                \n            }     \n            \n            if (data.size() > 1){ /* <=== */ \n                LabReportPreviewController preview = new LabReportPreviewController(lab);\n                preview.setData(data,type);\n\n                Stage stage = new Stage();\n                Scene scene = new Scene(preview);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 205,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                \n            }     \n            \n            if (data.size() > 1){\n                LabReportPreviewController preview = new LabReportPreviewController(lab);\n                preview.setData(data,type); /* <=== */ \n\n                Stage stage = new Stage();\n                Scene scene = new Scene(preview);\n                stage.setScene(scene);\n"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 43,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "    }\n    \n    \n    @FXML TableView report;\n    \n    public void setData(ArrayList<ArrayList<String>> data, String type) /* <=== */ \n    {\n        System.out.println(data);\n        ObservableList<LabReport> data2 = FXCollections.observableArrayList();\n        \n        String[] urArray = {"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 119,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "            case \"scp\":\n                tmpArray = scpArray;\n                break;    \n        }    \n        \n        int size = data.get(0).size(); /* <=== */ \n        \n        String tmp = data.get(1).get(size-2);\n        \n        System.out.println(tmp);\n        "
                  },
                  {
                    "sample" : "data.get(0)",
                    "lineNumber" : 119,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "            case \"scp\":\n                tmpArray = scpArray;\n                break;    \n        }    \n        \n        int size = data.get(0).size(); /* <=== */ \n        \n        String tmp = data.get(1).get(size-2);\n        \n        System.out.println(tmp);\n        "
                  },
                  {
                    "sample" : "data.get(0).size()",
                    "lineNumber" : 119,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "            case \"scp\":\n                tmpArray = scpArray;\n                break;    \n        }    \n        \n        int size = data.get(0).size(); /* <=== */ \n        \n        String tmp = data.get(1).get(size-2);\n        \n        System.out.println(tmp);\n        "
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 119,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "            case \"scp\":\n                tmpArray = scpArray;\n                break;    \n        }    \n        \n        int size = data.get(0).size(); /* <=== */ \n        \n        String tmp = data.get(1).get(size-2);\n        \n        System.out.println(tmp);\n        "
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 121,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "                break;    \n        }    \n        \n        int size = data.get(0).size();\n        \n        String tmp = data.get(1).get(size-2); /* <=== */ \n        \n        System.out.println(tmp);\n        \n        ArrayList<ArrayList<String>> data4 = lab.getPatientInfo(tmp);\n        "
                  },
                  {
                    "sample" : "size - 2",
                    "lineNumber" : 121,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "                break;    \n        }    \n        \n        int size = data.get(0).size();\n        \n        String tmp = data.get(1).get(size-2); /* <=== */ \n        \n        System.out.println(tmp);\n        \n        ArrayList<ArrayList<String>> data4 = lab.getPatientInfo(tmp);\n        "
                  },
                  {
                    "sample" : "data.get(1)",
                    "lineNumber" : 121,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "                break;    \n        }    \n        \n        int size = data.get(0).size();\n        \n        String tmp = data.get(1).get(size-2); /* <=== */ \n        \n        System.out.println(tmp);\n        \n        ArrayList<ArrayList<String>> data4 = lab.getPatientInfo(tmp);\n        "
                  },
                  {
                    "sample" : "data.get(1).get(size - 2)",
                    "lineNumber" : 121,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "                break;    \n        }    \n        \n        int size = data.get(0).size();\n        \n        String tmp = data.get(1).get(size-2); /* <=== */ \n        \n        System.out.println(tmp);\n        \n        ArrayList<ArrayList<String>> data4 = lab.getPatientInfo(tmp);\n        "
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 121,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "                break;    \n        }    \n        \n        int size = data.get(0).size();\n        \n        String tmp = data.get(1).get(size-2); /* <=== */ \n        \n        System.out.println(tmp);\n        \n        ArrayList<ArrayList<String>> data4 = lab.getPatientInfo(tmp);\n        "
                  },
                  {
                    "sample" : "System.out.println(tmp)",
                    "lineNumber" : 123,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "        \n        int size = data.get(0).size();\n        \n        String tmp = data.get(1).get(size-2);\n        \n        System.out.println(tmp); /* <=== */ \n        \n        ArrayList<ArrayList<String>> data4 = lab.getPatientInfo(tmp);\n        \n        System.out.println(data4);\n        "
                  }
                ]
              },
              {
                "pathId" : "32500-32498-32497-32511-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-32507-32506-32516-32520-33143-33142-33249-33263-37751-37924-37931-38096-38111",
                "path" : [
                  {
                    "sample" : "\"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"",
                    "lineNumber" : 832,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\"; /* <=== */ \n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "\"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\" + id + \"'\"",
                    "lineNumber" : 832,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\"; /* <=== */ \n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 832,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id)\n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\"; /* <=== */ \n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1);\n"
                  },
                  {
                    "sample" : "sql1",
                    "lineNumber" : 836,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";\n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql1)",
                    "lineNumber" : 836,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";\n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 836,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";\n        \n        try{                                                                                    \n\n                data = super.dbOperator.customSelection(sql1); /* <=== */ \n\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n        //System.out.println(data);\n        return data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 827,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistant.java",
                    "excerpt" : "\n        //System.out.println(data);\n        return data;\n    }\n\n    public ArrayList<ArrayList<String>> getBloodGroupingRh(String id) /* <=== */ \n    {\n        String sql1;\n        ArrayList<ArrayList<String>> data = null;\n\n        sql1 = \"SELECT * FROM  BloodGroupingRh WHERE tst_bloodG_id = '\"+id+\"'\";"
                  },
                  {
                    "sample" : "lab.getBloodGroupingRh(reportID)",
                    "lineNumber" : 173,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                data = lab.getLipidTestReport(reportID);\n                type = \"li\";\n                \n            } else if ( reportID.substring(0,2).equals(\"bg\") ) {\n            \n                data = lab.getBloodGroupingRh(reportID); /* <=== */ \n                type = \"bg\";\n                \n            } else if ( reportID.substring(0,3).equals(\"cbc\") ) {\n            \n                data = lab.getCompleteBloodCount(reportID);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 173,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                data = lab.getLipidTestReport(reportID);\n                type = \"li\";\n                \n            } else if ( reportID.substring(0,2).equals(\"bg\") ) {\n            \n                data = lab.getBloodGroupingRh(reportID); /* <=== */ \n                type = \"bg\";\n                \n            } else if ( reportID.substring(0,3).equals(\"cbc\") ) {\n            \n                data = lab.getCompleteBloodCount(reportID);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 203,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                data = lab.getSeriumCreatinePhosphokinase(reportID);\n                type = \"scp\";\n                \n            }     \n            \n            if (data.size() > 1){ /* <=== */ \n                LabReportPreviewController preview = new LabReportPreviewController(lab);\n                preview.setData(data,type);\n\n                Stage stage = new Stage();\n                Scene scene = new Scene(preview);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 205,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabAssistantController.java",
                    "excerpt" : "                \n            }     \n            \n            if (data.size() > 1){\n                LabReportPreviewController preview = new LabReportPreviewController(lab);\n                preview.setData(data,type); /* <=== */ \n\n                Stage stage = new Stage();\n                Scene scene = new Scene(preview);\n                stage.setScene(scene);\n"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 43,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "    }\n    \n    \n    @FXML TableView report;\n    \n    public void setData(ArrayList<ArrayList<String>> data, String type) /* <=== */ \n    {\n        System.out.println(data);\n        ObservableList<LabReport> data2 = FXCollections.observableArrayList();\n        \n        String[] urArray = {"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 119,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "            case \"scp\":\n                tmpArray = scpArray;\n                break;    \n        }    \n        \n        int size = data.get(0).size(); /* <=== */ \n        \n        String tmp = data.get(1).get(size-2);\n        \n        System.out.println(tmp);\n        "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 121,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "                break;    \n        }    \n        \n        int size = data.get(0).size();\n        \n        String tmp = data.get(1).get(size-2); /* <=== */ \n        \n        System.out.println(tmp);\n        \n        ArrayList<ArrayList<String>> data4 = lab.getPatientInfo(tmp);\n        "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 150,
                    "columnNumber" : 46,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "                \n        }catch(Exception e){e.printStackTrace();}\n        \n        data2.add(new LabReport(\"\", \"\"));\n        \n        data2.add(new LabReport(tmpArray[0], data.get(1).get(0))); /* <=== */ \n        \n        data2.add(new LabReport(\"\", \"\"));\n        \n        \n        System.out.println(data);"
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 155,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/LabAssistant/LabReportPreviewController.java",
                    "excerpt" : "        data2.add(new LabReport(tmpArray[0], data.get(1).get(0)));\n        \n        data2.add(new LabReport(\"\", \"\"));\n        \n        \n        System.out.println(data); /* <=== */ \n        \n        for(int i = 1; i < size; i++)\n        {\n            System.out.println(i);\n            if ( ( i != 1 ) && ( i != size-2 ) && ( i != size-1 ) )"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountName",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60291-60294-62430-62429-62530-62529-62528-62527-62534-62539-62538-62559-62558-62556-62573",
                "path" : [
                  {
                    "sample" : "tmpUser",
                    "lineNumber" : 52,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        String user = username.getText();\n        String pass = password.getText();\n       \n        //System.out.println(user +\" \" + pass);\n        \n        User tmpUser = new User(); /* <=== */ \n        \n        \n        try{\n    \n            String userType = tmpUser.checkUser(user, pass);"
                  },
                  {
                    "sample" : "tmpUser",
                    "lineNumber" : 52,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        String user = username.getText();\n        String pass = password.getText();\n       \n        //System.out.println(user +\" \" + pass);\n        \n        User tmpUser = new User(); /* <=== */ \n        \n        \n        try{\n    \n            String userType = tmpUser.checkUser(user, pass);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 40,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "        \n        public String database = \"\";\n        public String dbUsername = \"\";\n        public String dbPassword = \"\";\n        \n        public User() throws IOException /* <=== */ \n\t{\n            InputStream inputStream = null;\n            \n            try {\n                Properties prop = new Properties();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 48,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass()",
                    "lineNumber" : 48,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass().getClassLoader()",
                    "lineNumber" : 48,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass().getClassLoader().getResourceAsStream(propFileName)",
                    "lineNumber" : 48,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 48,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 50,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) { /* <=== */ \n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 51,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) {\n                        prop.load(inputStream); /* <=== */ \n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 51,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) {\n                        prop.load(inputStream); /* <=== */ \n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 57,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\"); /* <=== */ \n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                "
                  },
                  {
                    "sample" : "prop.getProperty(\"user\")",
                    "lineNumber" : 57,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\"); /* <=== */ \n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                "
                  },
                  {
                    "sample" : "this.dbUsername",
                    "lineNumber" : 57,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\"); /* <=== */ \n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                "
                  },
                  {
                    "sample" : "System.out.println(dbUsername + \" \" + dbPassword + \" \" + database)",
                    "lineNumber" : 61,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database); /* <=== */ \n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);\n            } finally {\n                    try{"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "System.out.println(tableData0)",
                    "lineNumber" : 100,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0); /* <=== */ \n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        "
                  }
                ]
              },
              {
                "pathId" : "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 792,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Thursday\");\n        weekDays.put(\"6\",\"Friday\");\n        weekDays.put(\"7\",\"Saturday\");\n        \n        appDatePicker.setValue(null);\n        setDates(); /* <=== */ \n        \n        ArrayList<Integer> day3 = new ArrayList<Integer>();\n        day3.add(1);\n        day3.add(2);\n        day3.add(3);"
                  },
                  {
                    "sample" : "this.consultationAreaCombo",
                    "lineNumber" : 823,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "(String) consultationAreaCombo.getValue()",
                    "lineNumber" : 823,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 823,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 824,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 973,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "\"SELECT \" + \"app_day \" + \"FROM lab_appointment_timetable INNER JOIN lab_test ON \" + \"lab_appointment_timetable.app_test_id = lab_test.test_id \" + \"WHERE lab_test.test_name='\" + testName + \"';\"",
                    "lineNumber" : 976,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 976,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 985,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 985,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 985,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 989,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 990,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 990,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 992,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 992,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 993,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 993,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 995,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 973,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "receptionist.getLabAvailableDays(testName)",
                    "lineNumber" : 824,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 824,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 825,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data); /* <=== */ \n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           \n                String number = Integer.toString(i+1);"
                  }
                ]
              },
              {
                "pathId" : "60279-60278-60277-60302-62828-62853-62850-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-62846-62845-62865-62873-62872-62871-62870-62882-62881-62887-62891-60300-60299-60304",
                "path" : [
                  {
                    "sample" : "this.username",
                    "lineNumber" : 47,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    @FXML\n    private void login() throws IOException\n    {\n        \n        String user = username.getText(); /* <=== */ \n        String pass = password.getText();\n       \n        //System.out.println(user +\" \" + pass);\n        \n        User tmpUser = new User();"
                  },
                  {
                    "sample" : "getText()",
                    "lineNumber" : 47,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    @FXML\n    private void login() throws IOException\n    {\n        \n        String user = username.getText(); /* <=== */ \n        String pass = password.getText();\n       \n        //System.out.println(user +\" \" + pass);\n        \n        User tmpUser = new User();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 47,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    @FXML\n    private void login() throws IOException\n    {\n        \n        String user = username.getText(); /* <=== */ \n        String pass = password.getText();\n       \n        //System.out.println(user +\" \" + pass);\n        \n        User tmpUser = new User();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 57,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        User tmpUser = new User();\n        \n        \n        try{\n    \n            String userType = tmpUser.checkUser(user, pass); /* <=== */ \n            // String userType = \"lab_assistant\";  \n            System.out.println(userType);\n            \n            switch (userType)\n            {"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 127,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                //System.out.println(userType);\n\n            }catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n\t}\n\t\n\tpublic String checkUser(String username, String password) /* <=== */ \n        {\n            DatabaseOperator tmpOperator = new DatabaseOperator();\n            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\"));"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 132,
                    "columnNumber" : 136,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\tpublic String checkUser(String username, String password)\n        {\n            DatabaseOperator tmpOperator = new DatabaseOperator();\n            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\")); /* <=== */ \n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1);\n\n                    if ( userPassword.equals(password) ) access = userType;"
                  },
                  {
                    "sample" : "\"user_name = '\" + username + \"'\"",
                    "lineNumber" : 132,
                    "columnNumber" : 118,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\tpublic String checkUser(String username, String password)\n        {\n            DatabaseOperator tmpOperator = new DatabaseOperator();\n            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\")); /* <=== */ \n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1);\n\n                    if ( userPassword.equals(password) ) access = userType;"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "tmpOperator.showTableData(\"sys_user\", \"password,user_type\", (\"user_name = '\" + username + \"'\"))",
                    "lineNumber" : 132,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\tpublic String checkUser(String username, String password)\n        {\n            DatabaseOperator tmpOperator = new DatabaseOperator();\n            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\")); /* <=== */ \n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1);\n\n                    if ( userPassword.equals(password) ) access = userType;"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 132,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\tpublic String checkUser(String username, String password)\n        {\n            DatabaseOperator tmpOperator = new DatabaseOperator();\n            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\")); /* <=== */ \n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1);\n\n                    if ( userPassword.equals(password) ) access = userType;"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 134,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            DatabaseOperator tmpOperator = new DatabaseOperator();\n            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\"));\n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0); /* <=== */ \n                    String userType = result.get(0).get(1);\n\n                    if ( userPassword.equals(password) ) access = userType;\n\n            }catch(SQLException | ClassNotFoundException e){e.printStackTrace();}"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 135,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\"));\n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1); /* <=== */ \n\n                    if ( userPassword.equals(password) ) access = userType;\n\n            }catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n            return access;        "
                  },
                  {
                    "sample" : "result.get(0)",
                    "lineNumber" : 135,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\"));\n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1); /* <=== */ \n\n                    if ( userPassword.equals(password) ) access = userType;\n\n            }catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n            return access;        "
                  },
                  {
                    "sample" : "result.get(0).get(1)",
                    "lineNumber" : 135,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\"));\n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1); /* <=== */ \n\n                    if ( userPassword.equals(password) ) access = userType;\n\n            }catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n            return access;        "
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 135,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\"));\n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1); /* <=== */ \n\n                    if ( userPassword.equals(password) ) access = userType;\n\n            }catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n            return access;        "
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 137,
                    "columnNumber" : 67,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\"));\n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1);\n\n                    if ( userPassword.equals(password) ) access = userType; /* <=== */ \n\n            }catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n            return access;        \n        }\n"
                  },
                  {
                    "sample" : "access",
                    "lineNumber" : 137,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\"));\n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1);\n\n                    if ( userPassword.equals(password) ) access = userType; /* <=== */ \n\n            }catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n            return access;        \n        }\n"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 127,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                //System.out.println(userType);\n\n            }catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n\t}\n\t\n\tpublic String checkUser(String username, String password) /* <=== */ \n        {\n            DatabaseOperator tmpOperator = new DatabaseOperator();\n            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\"));"
                  },
                  {
                    "sample" : "tmpUser.checkUser(user, pass)",
                    "lineNumber" : 57,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        User tmpUser = new User();\n        \n        \n        try{\n    \n            String userType = tmpUser.checkUser(user, pass); /* <=== */ \n            // String userType = \"lab_assistant\";  \n            System.out.println(userType);\n            \n            switch (userType)\n            {"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 57,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        User tmpUser = new User();\n        \n        \n        try{\n    \n            String userType = tmpUser.checkUser(user, pass); /* <=== */ \n            // String userType = \"lab_assistant\";  \n            System.out.println(userType);\n            \n            switch (userType)\n            {"
                  },
                  {
                    "sample" : "System.out.println(userType)",
                    "lineNumber" : 59,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        \n        try{\n    \n            String userType = tmpUser.checkUser(user, pass);\n            // String userType = \"lab_assistant\";  \n            System.out.println(userType); /* <=== */ \n            \n            switch (userType)\n            {\n                case \"doctor\":\n                    loadDoctor(user);"
                  }
                ]
              },
              {
                "pathId" : "21011-66795-66798-21010-21069-21084-21079",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 107,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "            scene.setFill(null);\n            stage.initStyle(StageStyle.TRANSPARENT);\n            stage.show();\n        }    \n        \n        if (info.getText().equals(\"1\")) /* <=== */ \n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText());\n        "
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 111,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  },
                  {
                    "sample" : "println(info.getText())",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  }
                ]
              },
              {
                "pathId" : "3088-3091-4-3-62436-62435-62680-62679-62678-62677-62684-62689-62688-62709-62715-62721-62720-62718-62784-58914-58943",
                "path" : [
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 30,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n    /**\n     * Constructor of the class\n     * @param username username of the Administrator\n     */\n    Admin(String username)  /* <=== */ \n    {\n        super(username);\n    }\n    \n    /**"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 79,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t\t\tdbOperator.useDatabse(database);\n                        \n\t\t}catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n\t}\n\t\n\tpublic User(String username) /* <=== */ \n\t{\n            InputStream inputStream = null;\n            \n            try {\n                Properties prop = new Properties();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass()",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass().getClassLoader()",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass().getClassLoader().getResourceAsStream(propFileName)",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 87,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 89,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) { /* <=== */ \n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 90,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) {\n                        prop.load(inputStream); /* <=== */ \n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 90,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) {\n                        prop.load(inputStream); /* <=== */ \n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 96,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\"); /* <=== */ \n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                "
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 97,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\"); /* <=== */ \n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 98,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "prop.getProperty(\"database\")",
                    "lineNumber" : 98,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "this.database",
                    "lineNumber" : 98,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\"); /* <=== */ \n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);"
                  },
                  {
                    "sample" : "this.database",
                    "lineNumber" : 115,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            \n            this.dbOperator = new DatabaseOperator();\n            try{\n                dbOperator.connect(dbUsername,dbPassword);\n                dbOperator.useDatabse(database); /* <=== */ \n                this.username = username;\n                ArrayList<ArrayList<String>> result = dbOperator.showTableData(\"sys_user\",\"user_id,user_type\",(\"user_name = '\" + username + \"'\"));\n                this.userID = result.get(0).get(0);\n                this.userType = result.get(0).get(1);\n"
                  },
                  {
                    "sample" : "databaseName",
                    "lineNumber" : 175,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\trs.close();\n        stmt.close();\n        return dbNames;\n\t}\n\t\n\tpublic void useDatabse(String databaseName) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString sql = \"USE \" + databaseName + \";\";\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry"
                  },
                  {
                    "sample" : "System.out.println(\"\\n### Database Changed to \" + databaseName + \"###\\n\")",
                    "lineNumber" : 183,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = null;\n\t\ttry\n\t\t{\n\t\t\trs = stmt.executeQuery(sql);\n\t\t\tSystem.out.println(\"\\n### Database Changed to \" + databaseName+\"###\\n\"); /* <=== */ \n\t\t\tcurrentDatabaseName = databaseName;\n\t\t\trs.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{"
                  }
                ]
              },
              {
                "pathId" : "60279-60278-60277-60302-62828-62853-62850-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-62846-62845-62855",
                "path" : [
                  {
                    "sample" : "this.username",
                    "lineNumber" : 47,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    @FXML\n    private void login() throws IOException\n    {\n        \n        String user = username.getText(); /* <=== */ \n        String pass = password.getText();\n       \n        //System.out.println(user +\" \" + pass);\n        \n        User tmpUser = new User();"
                  },
                  {
                    "sample" : "getText()",
                    "lineNumber" : 47,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    @FXML\n    private void login() throws IOException\n    {\n        \n        String user = username.getText(); /* <=== */ \n        String pass = password.getText();\n       \n        //System.out.println(user +\" \" + pass);\n        \n        User tmpUser = new User();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 47,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    @FXML\n    private void login() throws IOException\n    {\n        \n        String user = username.getText(); /* <=== */ \n        String pass = password.getText();\n       \n        //System.out.println(user +\" \" + pass);\n        \n        User tmpUser = new User();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 57,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        User tmpUser = new User();\n        \n        \n        try{\n    \n            String userType = tmpUser.checkUser(user, pass); /* <=== */ \n            // String userType = \"lab_assistant\";  \n            System.out.println(userType);\n            \n            switch (userType)\n            {"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 127,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                //System.out.println(userType);\n\n            }catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n\t}\n\t\n\tpublic String checkUser(String username, String password) /* <=== */ \n        {\n            DatabaseOperator tmpOperator = new DatabaseOperator();\n            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\"));"
                  },
                  {
                    "sample" : "username",
                    "lineNumber" : 132,
                    "columnNumber" : 136,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\tpublic String checkUser(String username, String password)\n        {\n            DatabaseOperator tmpOperator = new DatabaseOperator();\n            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\")); /* <=== */ \n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1);\n\n                    if ( userPassword.equals(password) ) access = userType;"
                  },
                  {
                    "sample" : "\"user_name = '\" + username + \"'\"",
                    "lineNumber" : 132,
                    "columnNumber" : 118,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\tpublic String checkUser(String username, String password)\n        {\n            DatabaseOperator tmpOperator = new DatabaseOperator();\n            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\")); /* <=== */ \n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1);\n\n                    if ( userPassword.equals(password) ) access = userType;"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "tmpOperator.showTableData(\"sys_user\", \"password,user_type\", (\"user_name = '\" + username + \"'\"))",
                    "lineNumber" : 132,
                    "columnNumber" : 59,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\tpublic String checkUser(String username, String password)\n        {\n            DatabaseOperator tmpOperator = new DatabaseOperator();\n            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\")); /* <=== */ \n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1);\n\n                    if ( userPassword.equals(password) ) access = userType;"
                  },
                  {
                    "sample" : "result",
                    "lineNumber" : 132,
                    "columnNumber" : 50,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\tpublic String checkUser(String username, String password)\n        {\n            DatabaseOperator tmpOperator = new DatabaseOperator();\n            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\")); /* <=== */ \n                    System.out.println(result);    \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1);\n\n                    if ( userPassword.equals(password) ) access = userType;"
                  },
                  {
                    "sample" : "System.out.println(result)",
                    "lineNumber" : 133,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "        {\n            DatabaseOperator tmpOperator = new DatabaseOperator();\n            String access = \"false\";\n            try{\n                    ArrayList<ArrayList<String>> result = tmpOperator.showTableData(\"sys_user\",\"password,user_type\",(\"user_name = '\" + username + \"'\"));\n                    System.out.println(result);     /* <=== */ \n                    String userPassword = result.get(0).get(0);\n                    String userType = result.get(0).get(1);\n\n                    if ( userPassword.equals(password) ) access = userType;\n"
                  }
                ]
              },
              {
                "pathId" : "16931-16934-15617-15616-62436-62435-62680-62679-62678-62677-62684-62689-62688-62709-62708-62706-62723",
                "path" : [
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "$obj1",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 42,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param username\n     */\n\t\n\tpublic Cashier(String username) /* <=== */ \n\t{\n\t\tsuper(username);\t\t\n\t}\n\t\n    /**"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 79,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t\t\tdbOperator.useDatabse(database);\n                        \n\t\t}catch(SQLException | ClassNotFoundException e){e.printStackTrace();}\n\t}\n\t\n\tpublic User(String username) /* <=== */ \n\t{\n            InputStream inputStream = null;\n            \n            try {\n                Properties prop = new Properties();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass()",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass().getClassLoader()",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "this.getClass().getClassLoader().getResourceAsStream(propFileName)",
                    "lineNumber" : 87,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 87,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            \n            try {\n                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName); /* <=== */ \n\n                if (inputStream != null) {\n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 89,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                Properties prop = new Properties();\n                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) { /* <=== */ \n                        prop.load(inputStream);\n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n"
                  },
                  {
                    "sample" : "inputStream",
                    "lineNumber" : 90,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) {\n                        prop.load(inputStream); /* <=== */ \n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 90,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                String propFileName = \"config.properties\";\n\n                inputStream = getClass().getClassLoader().getResourceAsStream(propFileName);\n\n                if (inputStream != null) {\n                        prop.load(inputStream); /* <=== */ \n                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");"
                  },
                  {
                    "sample" : "prop",
                    "lineNumber" : 96,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\"); /* <=== */ \n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                "
                  },
                  {
                    "sample" : "prop.getProperty(\"user\")",
                    "lineNumber" : 96,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\"); /* <=== */ \n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                "
                  },
                  {
                    "sample" : "this.dbUsername",
                    "lineNumber" : 96,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                } else {\n                        throw new FileNotFoundException(\"property file '\" + propFileName + \"' not found in the classpath\");\n                }\n\n                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\"); /* <=== */ \n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database);\n                "
                  },
                  {
                    "sample" : "System.out.println(dbUsername + \" \" + dbPassword + \" \" + database)",
                    "lineNumber" : 100,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "                //String connection = prop.getProperty(\"connection\");\n                this.dbUsername = prop.getProperty(\"user\");\n                this.dbPassword = prop.getProperty(\"password\");\n                this.database = prop.getProperty(\"database\");\n\n                System.out.println(dbUsername+\" \"+dbPassword +\" \"+database); /* <=== */ \n                \n            } catch (Exception e) {\n                    System.out.println(\"Exception: \" + e);\n            } finally {\n                "
                  }
                ]
              },
              {
                "pathId" : "27288-27291-27296-58458-58457-58455-58549-62451-63437-63450-66795-66798-63449-70558-58549-58595-62447-63215-63206-63205-63230-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "user",
                    "lineNumber" : 1139,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    \n    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(doc); /* <=== */ \n        user.load();\n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1139,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    \n    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(doc); /* <=== */ \n        user.load();\n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1140,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(doc);\n        user.load(); /* <=== */ \n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();\n        }"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 90,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "            stage.close();\n        }\n    }\n    \n    \n    public void load() /* <=== */ \n    {\n        fillUser();\n    }\n    \n    "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "    }\n    \n    \n    public void load()\n    {\n        fillUser(); /* <=== */ \n    }\n    \n    \n    \n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 47,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "    \n    @FXML private ImageView profPic;\n    @FXML private Label userN;\n    @FXML private Label userTAndN;\n    \n    public void fillUser() /* <=== */ \n    {\n        HashMap<String,String> log = new HashMap<String,String>();\n        log.clear();\n        log.put(\"doctor\",\"Doctor\");\n        log.put(\"lab_assistant\",\"Lab Assistant\");"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 58,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        log.put(\"cashier\",\"Cashier\");\n        log.put(\"pharmacist\",\"Pharmacist\");\n        log.put(\"receptionist\",\"Receptionist\");\n        log.put(\"admin\",\"Admin\");\n            \n        ArrayList<ArrayList<String>> data = sysUser.getCurrentUserNameAndID(); /* <=== */ \n        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 353,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID() /* <=== */ \n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 358,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "        public ArrayList<ArrayList<String>> getCurrentUserNameAndID()\n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\"; /* <=== */ \n\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 364,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "this.dbOperator",
                    "lineNumber" : 364,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 353,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID() /* <=== */ \n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 58,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        log.put(\"cashier\",\"Cashier\");\n        log.put(\"pharmacist\",\"Pharmacist\");\n        log.put(\"receptionist\",\"Receptionist\");\n        log.put(\"admin\",\"Admin\");\n            \n        ArrayList<ArrayList<String>> data = sysUser.getCurrentUserNameAndID(); /* <=== */ \n        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 64,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{\n            String image = sysUser.getProfilePic(); /* <=== */ \n            img = new Image(getClass().getResource(\"/imgs/profilePics/\"+image).toString(), true);\n        }catch(Exception e){\n            img = new Image(getClass().getResource(\"/imgs/noUser.png\").toString(), true);\n        }\n        profPic.setImage(img);"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 254,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            }catch(ClassNotFoundException | SQLException e){}\t\n            \n            return result;\n\t}\n        \n        public String getProfilePic() /* <=== */ \n\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+\n                            \"profile_pic \"+\n                            \"FROM sys_user \"+"
                  },
                  {
                    "sample" : "this.username",
                    "lineNumber" : 260,
                    "columnNumber" : 60,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+\n                            \"profile_pic \"+\n                            \"FROM sys_user \"+\n                            \"WHERE sys_user.user_name = '\"+this.username+\"';\"; /* <=== */ \n\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n"
                  },
                  {
                    "sample" : "\"SELECT \" + \"profile_pic \" + \"FROM sys_user \" + \"WHERE sys_user.user_name = '\" + this.username + \"';\"",
                    "lineNumber" : 257,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        public String getProfilePic()\n\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"profile_pic \"+\n                            \"FROM sys_user \"+\n                            \"WHERE sys_user.user_name = '\"+this.username+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 257,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        public String getProfilePic()\n\t{\t\n            String image =  \"p2.png\";\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"profile_pic \"+\n                            \"FROM sys_user \"+\n                            \"WHERE sys_user.user_name = '\"+this.username+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 266,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n                    image = data.get(1).get(0);\n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            //System.out.println(data);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              },
              {
                "pathId" : "15779-66795-66798-15778-15931-15939-15930-15929-15947-15946-15959-15958-15968",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 95,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\t/////////////////// Generating the Bill ID //////////////////////////////////////////////////////////////\n\t\t\tString sql2 = \"SELECT bill_id FROM bill WHERE bill_id = (SELECT MAX(bill_id) FROM bill);\";\n\t\t\tString billID = super.dbOperator.customSelection(sql2).get(1).get(0); /* <=== */ \n\n\t\t\tchar[] tmpID = billID.toCharArray();\n\t\t\tint i = 3;\n\t\t\tfor (i = 3; i < billID.length(); i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "super.dbOperator",
                    "lineNumber" : 95,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\t/////////////////// Generating the Bill ID //////////////////////////////////////////////////////////////\n\t\t\tString sql2 = \"SELECT bill_id FROM bill WHERE bill_id = (SELECT MAX(bill_id) FROM bill);\";\n\t\t\tString billID = super.dbOperator.customSelection(sql2).get(1).get(0); /* <=== */ \n\n\t\t\tchar[] tmpID = billID.toCharArray();\n\t\t\tint i = 3;\n\t\t\tfor (i = 3; i < billID.length(); i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 132,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 132,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 132,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);"
                  },
                  {
                    "sample" : "\",'\" + tmpID2 + \"','\" + date + \"'\"",
                    "lineNumber" : 135,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\"; /* <=== */ \n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\";"
                  },
                  {
                    "sample" : "rowData",
                    "lineNumber" : 135,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\"; /* <=== */ \n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\";"
                  },
                  {
                    "sample" : "\"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData + \");\"",
                    "lineNumber" : 140,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\"; /* <=== */ \n                        System.out.println(sql);\n\t\t\t/////////////////////////////// Adding data to database /////////////////////////////////////////////////\n\t\t\tboolean res = super.dbOperator.customInsertion(sql);\n\t\t\tif (res == true ) result = tmpID2;\n\t"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 140,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\"; /* <=== */ \n                        System.out.println(sql);\n\t\t\t/////////////////////////////// Adding data to database /////////////////////////////////////////////////\n\t\t\tboolean res = super.dbOperator.customInsertion(sql);\n\t\t\tif (res == true ) result = tmpID2;\n\t"
                  },
                  {
                    "sample" : "System.out.println(sql)",
                    "lineNumber" : 141,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\";\n                        System.out.println(sql); /* <=== */ \n\t\t\t/////////////////////////////// Adding data to database /////////////////////////////////////////////////\n\t\t\tboolean res = super.dbOperator.customInsertion(sql);\n\t\t\tif (res == true ) result = tmpID2;\n\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "tableData0.size()",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 99,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 106,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 106,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 108,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 139,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 139,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1).split(\" \")",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 108,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp[0]",
                    "lineNumber" : 109,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 109,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 131,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "LocalDate.parse(date, formatter)",
                    "lineNumber" : 131,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 131,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 133,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  },
                  {
                    "sample" : "System.out.println(finDate.atTime(hour1, minute1))",
                    "lineNumber" : 133,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  }
                ]
              },
              {
                "pathId" : "53230-53251-47481-47485-47484-47483-47490-53250-53249-53293-50530-50535-50534-50562-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50558-50557-50571-50570-50569-50579-50578-50589-50588-50587-50586-50585-50595-50599-50598-50594-50600-50604-53289-53288-53298-53297-53296-53311-53310-53321-53320-53322",
                "path" : [
                  {
                    "sample" : "detail",
                    "lineNumber" : 423,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        popOver.show(doctorSummary);\n    } \n    \n    @FXML private void showDays()\n    {\n        DoctorDetail detail = (DoctorDetail)doctorSummary.getSelectionModel().getSelectedItem(); /* <=== */ \n        int index = doctorSummary.getSelectionModel().selectedIndexProperty().get();\n        //System.out.println(bill.getPatientID());\n        \n        String doctorID = detail.getDoctorID();\n        "
                  },
                  {
                    "sample" : "detail",
                    "lineNumber" : 427,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "    {\n        DoctorDetail detail = (DoctorDetail)doctorSummary.getSelectionModel().getSelectedItem();\n        int index = doctorSummary.getSelectionModel().selectedIndexProperty().get();\n        //System.out.println(bill.getPatientID());\n        \n        String doctorID = detail.getDoctorID(); /* <=== */ \n        \n        HashMap<String,String> weekDays = new HashMap<>();\n        weekDays.put(\"1\",\"Monday\");\n        weekDays.put(\"2\",\"Tuesday\");\n        weekDays.put(\"3\",\"Wednesday\");"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 31,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Receptionist/DoctorDetail.java",
                    "excerpt" : "        setArea(area);\n        setAvailability(availability);\n        setDays(days);\n    }\n\n    public String getDoctorID() { /* <=== */ \n        return doctorID.get();\n    }\n \n    public void setDoctorID(String value) {\n        doctorID.set(value);"
                  },
                  {
                    "sample" : "this.doctorID",
                    "lineNumber" : 32,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/DoctorDetail.java",
                    "excerpt" : "        setAvailability(availability);\n        setDays(days);\n    }\n\n    public String getDoctorID() {\n        return doctorID.get(); /* <=== */ \n    }\n \n    public void setDoctorID(String value) {\n        doctorID.set(value);\n    }"
                  },
                  {
                    "sample" : "get()",
                    "lineNumber" : 32,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/DoctorDetail.java",
                    "excerpt" : "        setAvailability(availability);\n        setDays(days);\n    }\n\n    public String getDoctorID() {\n        return doctorID.get(); /* <=== */ \n    }\n \n    public void setDoctorID(String value) {\n        doctorID.set(value);\n    }"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 31,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/DoctorDetail.java",
                    "excerpt" : "        setArea(area);\n        setAvailability(availability);\n        setDays(days);\n    }\n\n    public String getDoctorID() { /* <=== */ \n        return doctorID.get();\n    }\n \n    public void setDoctorID(String value) {\n        doctorID.set(value);"
                  },
                  {
                    "sample" : "detail.getDoctorID()",
                    "lineNumber" : 427,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "    {\n        DoctorDetail detail = (DoctorDetail)doctorSummary.getSelectionModel().getSelectedItem();\n        int index = doctorSummary.getSelectionModel().selectedIndexProperty().get();\n        //System.out.println(bill.getPatientID());\n        \n        String doctorID = detail.getDoctorID(); /* <=== */ \n        \n        HashMap<String,String> weekDays = new HashMap<>();\n        weekDays.put(\"1\",\"Monday\");\n        weekDays.put(\"2\",\"Tuesday\");\n        weekDays.put(\"3\",\"Wednesday\");"
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 427,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "    {\n        DoctorDetail detail = (DoctorDetail)doctorSummary.getSelectionModel().getSelectedItem();\n        int index = doctorSummary.getSelectionModel().selectedIndexProperty().get();\n        //System.out.println(bill.getPatientID());\n        \n        String doctorID = detail.getDoctorID(); /* <=== */ \n        \n        HashMap<String,String> weekDays = new HashMap<>();\n        weekDays.put(\"1\",\"Monday\");\n        weekDays.put(\"2\",\"Tuesday\");\n        weekDays.put(\"3\",\"Wednesday\");"
                  },
                  {
                    "sample" : "doctorID",
                    "lineNumber" : 438,
                    "columnNumber" : 64,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"4\",\"Thursday\");\n        weekDays.put(\"5\",\"Friday\");\n        weekDays.put(\"6\",\"Saturday\");\n        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID); /* <=== */ \n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));"
                  },
                  {
                    "sample" : "registrtionNo",
                    "lineNumber" : 939,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param registrtionNo doctors registration number\n         * @return ArrayList<String> of days that doctor available in the hospital\n         */\n        public ArrayList<String> getAvailableDays(String registrtionNo) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT day FROM doctor_availability \" +\n\t\t\t\t\t\t\"WHERE slmc_reg_no = '\" + registrtionNo + \"'\"+\n\t\t\t\t\t\t\"ORDER BY day ASC;\";"
                  },
                  {
                    "sample" : "\"SELECT day FROM doctor_availability \" + \"WHERE slmc_reg_no = '\" + registrtionNo + \"'\" + \"ORDER BY day ASC;\"",
                    "lineNumber" : 942,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return ArrayList<String> of days that doctor available in the hospital\n         */\n        public ArrayList<String> getAvailableDays(String registrtionNo)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT day FROM doctor_availability \" + /* <=== */ \n\t\t\t\t\t\t\"WHERE slmc_reg_no = '\" + registrtionNo + \"'\"+\n\t\t\t\t\t\t\"ORDER BY day ASC;\";\n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 942,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return ArrayList<String> of days that doctor available in the hospital\n         */\n        public ArrayList<String> getAvailableDays(String registrtionNo)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT day FROM doctor_availability \" + /* <=== */ \n\t\t\t\t\t\t\"WHERE slmc_reg_no = '\" + registrtionNo + \"'\"+\n\t\t\t\t\t\t\"ORDER BY day ASC;\";\n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 950,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 950,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 950,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\t\t\n\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 954,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 954,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 954,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 955,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 955,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n\t\t\t\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 957,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 957,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 957,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 957,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 957,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 958,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 960,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 960,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 958,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 939,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param registrtionNo doctors registration number\n         * @return ArrayList<String> of days that doctor available in the hospital\n         */\n        public ArrayList<String> getAvailableDays(String registrtionNo) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT day FROM doctor_availability \" +\n\t\t\t\t\t\t\"WHERE slmc_reg_no = '\" + registrtionNo + \"'\"+\n\t\t\t\t\t\t\"ORDER BY day ASC;\";"
                  },
                  {
                    "sample" : "receptionist.getAvailableDays(doctorID)",
                    "lineNumber" : 438,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"4\",\"Thursday\");\n        weekDays.put(\"5\",\"Friday\");\n        weekDays.put(\"6\",\"Saturday\");\n        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID); /* <=== */ \n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 438,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"4\",\"Thursday\");\n        weekDays.put(\"5\",\"Friday\");\n        weekDays.put(\"6\",\"Saturday\");\n        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID); /* <=== */ \n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 439,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Friday\");\n        weekDays.put(\"6\",\"Saturday\");\n        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size(); /* <=== */ \n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));\n        }    "
                  },
                  {
                    "sample" : "data.size()",
                    "lineNumber" : 439,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Friday\");\n        weekDays.put(\"6\",\"Saturday\");\n        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size(); /* <=== */ \n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));\n        }    "
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 439,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Friday\");\n        weekDays.put(\"6\",\"Saturday\");\n        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size(); /* <=== */ \n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));\n        }    "
                  },
                  {
                    "sample" : "size",
                    "lineNumber" : 441,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++) /* <=== */ \n        {           \n            items.add(weekDays.get(data.get(i)));\n        }    \n        \n        System.out.println(data);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 441,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"7\",\"Sunday\");\n        \n        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++) /* <=== */ \n        {           \n            items.add(weekDays.get(data.get(i)));\n        }    \n        \n        System.out.println(data);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 443,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i))); /* <=== */ \n        }    \n        \n        System.out.println(data);\n        showPopup(items);\n        /*"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 443,
                    "columnNumber" : 36,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        ArrayList<String> data = receptionist.getAvailableDays(doctorID);\n        int size = data.size();\n        ObservableList<String> items = FXCollections.observableArrayList();\n        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i))); /* <=== */ \n        }    \n        \n        System.out.println(data);\n        showPopup(items);\n        /*"
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 446,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        for(int i = 0; i < size; i++)\n        {           \n            items.add(weekDays.get(data.get(i)));\n        }    \n        \n        System.out.println(data); /* <=== */ \n        showPopup(items);\n        /*\n            Popover2Controller popup = new Popover2Controller();\n            popup.fillDaysList(items);\n            "
                  }
                ]
              },
              {
                "pathId" : "56322-56325-56330-58458-58457-58455-58549-62451-63437-63428-63427-63452-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-63448-63447-63457",
                "path" : [
                  {
                    "sample" : "user",
                    "lineNumber" : 1369,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "    \n    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(receptionist); /* <=== */ \n        user.load();\n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1369,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "    \n    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(receptionist); /* <=== */ \n        user.load();\n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();"
                  },
                  {
                    "sample" : "user",
                    "lineNumber" : 1370,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "    @FXML private Button showUserButton;\n    \n    @FXML private void showUser()\n    {\n        CurrentUserSummaryController user = new CurrentUserSummaryController(receptionist);\n        user.load(); /* <=== */ \n        \n        if (popOver == null) \n        {\n            popOver = new PopOver();\n        }"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 90,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "            stage.close();\n        }\n    }\n    \n    \n    public void load() /* <=== */ \n    {\n        fillUser();\n    }\n    \n    "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "    }\n    \n    \n    public void load()\n    {\n        fillUser(); /* <=== */ \n    }\n    \n    \n    \n}"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 47,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "    \n    @FXML private ImageView profPic;\n    @FXML private Label userN;\n    @FXML private Label userTAndN;\n    \n    public void fillUser() /* <=== */ \n    {\n        HashMap<String,String> log = new HashMap<String,String>();\n        log.clear();\n        log.put(\"doctor\",\"Doctor\");\n        log.put(\"lab_assistant\",\"Lab Assistant\");"
                  },
                  {
                    "sample" : "this.sysUser",
                    "lineNumber" : 58,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/CurrentUserSummaryController.java",
                    "excerpt" : "        log.put(\"cashier\",\"Cashier\");\n        log.put(\"pharmacist\",\"Pharmacist\");\n        log.put(\"receptionist\",\"Receptionist\");\n        log.put(\"admin\",\"Admin\");\n            \n        ArrayList<ArrayList<String>> data = sysUser.getCurrentUserNameAndID(); /* <=== */ \n        \n        userN.setText(data.get(1).get(0)+\" \"+data.get(1).get(1));\n        userTAndN.setText(log.get(data.get(1).get(2)) +\" : \"+data.get(1).get(3));\n        Image img;\n        try{"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 353,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\t}\n        \n        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID() /* <=== */ \n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 358,
                    "columnNumber" : 58,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "        public ArrayList<ArrayList<String>> getCurrentUserNameAndID()\n\t{\t\n            String sql =    \"SELECT \"+\n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\"; /* <=== */ \n\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n"
                  },
                  {
                    "sample" : "\"SELECT \" + \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \" + \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \" + \"WHERE sys_user.user_id = '\" + this.userID + \"';\"",
                    "lineNumber" : 355,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID()\n\t{\t\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 355,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "        \n        \n        \n        public ArrayList<ArrayList<String>> getCurrentUserNameAndID()\n\t{\t\n            String sql =    \"SELECT \"+ /* <=== */ \n                            \"person.first_name, person.last_name, sys_user.user_type,sys_user.user_id \"+\n                            \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n                            \"WHERE sys_user.user_id = '\"+this.userID+\"';\";\n\n            ArrayList<ArrayList<String>> data = null;"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 364,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "dbOperator.customSelection(sql)",
                    "lineNumber" : 364,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 364,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "\n            ArrayList<ArrayList<String>> data = null;\n\n            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql); /* <=== */ \n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 367,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/User.java",
                    "excerpt" : "            try{\t\t\t\n\n                    data = dbOperator.customSelection(sql);\n\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\n            System.out.println(data); /* <=== */ \n            return data;\n\t}\n        \n        public boolean setMessageRead(String msgID)\n        {"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.ContactData.Address",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "System.out.println(tableData0)",
                    "lineNumber" : 100,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0); /* <=== */ \n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        "
                  }
                ]
              },
              {
                "pathId" : "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 208,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username); /* <=== */ \n        \n        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 210,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadAdmin(String username)\n    {\n        Stage stage = new Stage();\n        AdminController admin = new AdminController(username);\n        \n        admin.loadProfileData();  /* <=== */ \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\");"
                  },
                  {
                    "sample" : "admin",
                    "lineNumber" : 215,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "        admin.loadProfileData(); \n        \n        //admin.loadTheme();\n        //admin.filldatabaseStorageChart();\n        //admin.fillLineChart();\n        admin.filldatabaseStorageChart(\"u\"); /* <=== */ \n        admin.addFocusListener();\n        admin.loadDatabaseInfo();\n        admin.fillAccountCounts();\n        admin.setPaceholders();\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 114,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "     */\n    \n    @FXML private Label pieChartType;\n    HashMap<String,String> userLog;\n    \n    @FXML /* <=== */ \n    public void filldatabaseStorageChart(String a) \n    {\n        \n        ObservableList<PieChart.Data> pieChartData = FXCollections.observableArrayList();\n        pieChartData.clear();"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 124,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        pieChartData.clear();\n        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear(); /* <=== */ \n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 125,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        \n        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\"); /* <=== */ \n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 126,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "        if (a.equals(\"u\")) {\n            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\"); /* <=== */ \n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            "
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 127,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\"); /* <=== */ \n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 128,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog = new HashMap<String,String>();\n            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\"); /* <=== */ \n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 129,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.clear();\n            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\"); /* <=== */ \n            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 130,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"doctor\",\"Doctor\");\n            userLog.put(\"lab_assistant\",\"Lab Assistant\");\n            userLog.put(\"cashier\",\"Cashier\");\n            userLog.put(\"pharmacist\",\"Pharmacist\");\n            userLog.put(\"receptionist\",\"Receptionist\");\n            userLog.put(\"admin\",\"Admin\"); /* <=== */ \n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);"
                  },
                  {
                    "sample" : "this.userLog",
                    "lineNumber" : 136,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 136,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]);\n                String user = userLog.get(userTypes[i]); /* <=== */ \n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->\n                    data1.nameProperty().bind("
                  },
                  {
                    "sample" : "userTypes[i]",
                    "lineNumber" : 135,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Admin/AdminController.java",
                    "excerpt" : "            userLog.put(\"admin\",\"Admin\");\n            \n            String userTypes[] = {\"doctor\",\"lab_assistant\",\"cashier\",\"pharmacist\",\"receptionist\",\"admin\"};\n            for(int i = 0; i < 6; i++)\n            {\n                String count = admin.getSysUserCount(userTypes[i]); /* <=== */ \n                String user = userLog.get(userTypes[i]);\n                pieChartData.add(new PieChart.Data(user, Integer.parseInt(count)));\n            }    \n            \n            pieChartData.forEach(data1 ->"
                  },
                  {
                    "sample" : "userType",
                    "lineNumber" : 440,
                    "columnNumber" : 35,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "\n            //System.out.println(data);\n            return data;\n    }\n    \n    public String getSysUserCount(String userType) /* <=== */ \n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t"
                  },
                  {
                    "sample" : "\"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"",
                    "lineNumber" : 444,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "    \n    public String getSysUserCount(String userType)\n    {\n        String result = \"\";\n        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\"; /* <=== */ \n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql);\n                result = data.get(1).get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 448,
                    "columnNumber" : 57,
                    "fileName" : "/app/code/src/main/java/Admin/Admin.java",
                    "excerpt" : "        \n        String sql =    \"SELECT COUNT(' amount ') AS count FROM sys_user WHERE user_type='\" + userType + \"';\";\n\t\t\n        ArrayList<ArrayList<String>> data = null;\n        try{\n                data = super.dbOperator.customSelection(sql); /* <=== */ \n                result = data.get(1).get(0);\n        }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\t\t\t\t\n\t\n        return result;\n    } "
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              },
              {
                "pathId" : "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 792,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "        weekDays.put(\"5\",\"Thursday\");\n        weekDays.put(\"6\",\"Friday\");\n        weekDays.put(\"7\",\"Saturday\");\n        \n        appDatePicker.setValue(null);\n        setDates(); /* <=== */ \n        \n        ArrayList<Integer> day3 = new ArrayList<Integer>();\n        day3.add(1);\n        day3.add(2);\n        day3.add(3);"
                  },
                  {
                    "sample" : "this.consultationAreaCombo",
                    "lineNumber" : 823,
                    "columnNumber" : 39,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "(String) consultationAreaCombo.getValue()",
                    "lineNumber" : 823,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 823,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            }    \n            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue(); /* <=== */ \n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)"
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 824,
                    "columnNumber" : 71,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "testName",
                    "lineNumber" : 973,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "\"SELECT \" + \"app_day \" + \"FROM lab_appointment_timetable INNER JOIN lab_test ON \" + \"lab_appointment_timetable.app_test_id = lab_test.test_id \" + \"WHERE lab_test.test_name='\" + testName + \"';\"",
                    "lineNumber" : 976,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 976,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName)\n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+ /* <=== */ \n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+\n                                \"lab_appointment_timetable.app_test_id = lab_test.test_id \"+\n                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t"
                  },
                  {
                    "sample" : "sql2",
                    "lineNumber" : 985,
                    "columnNumber" : 45,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql2)",
                    "lineNumber" : 985,
                    "columnNumber" : 12,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 985,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "                                \"WHERE lab_test.test_name='\"+ testName +\"';\";    \n\t\t\t\t\n\t\tArrayList<ArrayList<String>> data2 = null;\n\t\tArrayList<String> data = new ArrayList<String>();\t\t\n\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2); /* <=== */ \n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "data2.size()",
                    "lineNumber" : 989,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 989,
                    "columnNumber" : 7,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\ttry{\t\n\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size(); /* <=== */ \n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{"
                  },
                  {
                    "sample" : "size2",
                    "lineNumber" : 990,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 990,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\tdata2 = super.dbOperator.customSelection(sql2);\n                        \t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++) /* <=== */ \n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);"
                  },
                  {
                    "sample" : "j",
                    "lineNumber" : 992,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "data2.get(j).get(0)",
                    "lineNumber" : 992,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 992,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0); /* <=== */ \n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 993,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 993,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\t\n\t\tint size2 = data2.size();\n\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp)) /* <=== */ \n\t\t\t{\n\t\t\t\tdata.add(tmp);\n\t\t\t}\n\t\t\t\n\t\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 995,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "\t\tfor(int j = 1; j < size2; j++)\n\t\t{\n\t\t\tString tmp = data2.get(j).get(0);\n\t\t\tif (!data.contains(tmp))\n\t\t\t{\n\t\t\t\tdata.add(tmp); /* <=== */ \n\t\t\t}\n\t\t\t\n\t\t}\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 973,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Receptionist/Receptionist.java",
                    "excerpt" : "        /**\n         * \n         * @param testName\n         * @return available days\n         */\n        public ArrayList<String> getLabAvailableDays(String testName) /* <=== */ \n\t{\t\n\t\t\n\t\tString sql2 = \t\"SELECT \"+\n                                \"app_day \"+\n                                \"FROM lab_appointment_timetable INNER JOIN lab_test ON \"+"
                  },
                  {
                    "sample" : "receptionist.getLabAvailableDays(testName)",
                    "lineNumber" : 824,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 824,
                    "columnNumber" : 31,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            //System.out.println(days);\n            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName); /* <=== */ \n            System.out.println(data);\n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           "
                  },
                  {
                    "sample" : "System.out.println(data)",
                    "lineNumber" : 825,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Receptionist/ReceptionistController.java",
                    "excerpt" : "            \n        } else {\n            \n            String testName = (String)consultationAreaCombo.getValue();\n            ArrayList<String> data = receptionist.getLabAvailableDays(testName);\n            System.out.println(data); /* <=== */ \n            int size = data.size();\n            days = \"\";\n            for(int i = 0; i < 7; i++)\n            {           \n                String number = Integer.toString(i+1);"
                  }
                ]
              },
              {
                "pathId" : "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
                "path" : [
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 108,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    \n    \n    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username); /* <=== */ \n        \n        doctor.fillAreaChart();\n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 110,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadDoctor(String username)\n    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart(); /* <=== */ \n        doctor.setAppointments();\n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();"
                  },
                  {
                    "sample" : "doctor",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    {\n        Stage stage = new Stage();\n        DoctorController doctor = new DoctorController(username);\n        \n        doctor.fillAreaChart();\n        doctor.setAppointments(); /* <=== */ \n        doctor.loadProfileData(); \n        doctor.MakeAvailabilityTable();\n        doctor.loadDrugList();\n        doctor.loadTestList();\n        doctor.setPaceholders();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 92,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    private Agenda appointmentTable;\n    \n    /**\n     *\n     */\n    @FXML /* <=== */ \n    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        "
                  },
                  {
                    "sample" : "this.doc",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 296,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"",
                    "lineNumber" : 302,
                    "columnNumber" : 74,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "rowsAttributes",
                    "lineNumber" : 467,
                    "columnNumber" : 89,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "\"SELECT \" + columNames + \" FROM \" + tableName + \" WHERE \" + rowsAttributes + \";\"",
                    "lineNumber" : 472,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 472,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException\n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\"; /* <=== */ \n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 474,
                    "columnNumber" : 47,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 474,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 474,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 475,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 475,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";\n                //System.out.println(sql);\n\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\n\t\t//System.out.println(\"\\n\\nRetreiving records from the table...\\n\");\n\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 483,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\n\t\tArrayList<ArrayList<String>> table = new ArrayList<ArrayList<String>>();\n\t\t\n\t\t\n\t\tString fieldValue;\n\t\twhile(rs.next()) /* <=== */ \n\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "rs.getString(splitedColumns[i])",
                    "lineNumber" : 489,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 489,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t{\t\n\t\t\tArrayList<String> row = new ArrayList<String>();\n\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]); /* <=== */ \n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 491,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 491,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t//Retrieve by column name\n\t\t\tfor (int i = 0; i < length; i++)\n\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue); /* <=== */ \n\t\t\t}\n\t\t\ttable.add(row);\n\t\t\t//System.out.println();\n\t\t}\n        rs.close();"
                  },
                  {
                    "sample" : "row",
                    "lineNumber" : 493,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "table",
                    "lineNumber" : 493,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\tfieldValue  = rs.getString(splitedColumns[i]);\n\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\trow.add(fieldValue);\n\t\t\t}\n\t\t\ttable.add(row); /* <=== */ \n\t\t\t//System.out.println();\n\t\t}\n        rs.close();\n        stmt.close();\n        return table;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 467,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n\t\t\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> showTableData(String tableName, String columNames, String rowsAttributes) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tString[] splitedColumns = columNames.split(\",\");\n\t\tint length = splitedColumns.length;\n\t\t\n\t\tString sql = \"SELECT \"+ columNames +\" FROM \"+ tableName + \" WHERE \" + rowsAttributes + \";\";"
                  },
                  {
                    "sample" : "super.dbOperator.showTableData(\"appointment\", \"patient_id,date\", \"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\")",
                    "lineNumber" : 302,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 302,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.showTableData(\"appointment\",\"patient_id,date\",\"slmc_reg_no = '\" + slmcRegNo + \"' AND cancelled = false\"); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 308,
                    "columnNumber" : 3,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into ArrayList /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tString[] columnArray = {\"patient\",\"date\"};\n\t\tdata.add(0, new ArrayList<String>(Arrays.asList(columnArray))); /* <=== */ \n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t//System.out.println(data);\n\t\treturn data;"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 296,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\tpublic ArrayList<ArrayList<String>> getAppointments() /* <=== */ \n\t{\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "doc.getAppointments()",
                    "lineNumber" : 98,
                    "columnNumber" : 51,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 98,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    public void setAppointments()\n    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments(); /* <=== */ \n        int noOfApp = (tableData0.size());\n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        "
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "tableData0.size()",
                    "lineNumber" : 99,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 99,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "    {\n        \n        appointmentTable.setDisable(false);\n        \n        ArrayList<ArrayList<String>> tableData0 = doc.getAppointments();\n        int noOfApp = (tableData0.size()); /* <=== */ \n        System.out.println(tableData0);\n        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();"
                  },
                  {
                    "sample" : "noOfApp",
                    "lineNumber" : 106,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 106,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        //System.out.println(noOfApp);\n        //System.out.println(tableData0);\n        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++) /* <=== */ \n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            "
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 108,
                    "columnNumber" : 43,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "i",
                    "lineNumber" : 139,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 139,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))\n                .withDescription(tableData0.get(i).get(0)) /* <=== */ \n                .withAppointmentGroup(new Agenda.AppointmentGroupImpl().withStyleClass(\"group1\"))    \n            );\n        }\n        \n        appointmentTable.appointments().addAll(Appointments);"
                  },
                  {
                    "sample" : "tableData0",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1)",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tableData0.get(i).get(1).split(\" \")",
                    "lineNumber" : 108,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp",
                    "lineNumber" : 108,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        \n        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \"); /* <=== */ \n            String date = tmp[0];\n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);"
                  },
                  {
                    "sample" : "tmp[0]",
                    "lineNumber" : 109,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 109,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "        final List<Agenda.AppointmentImplLocal> Appointments = FXCollections.observableArrayList();\n        \n        for (int i = 1; i < noOfApp; i++)\n        {\n            String[] tmp = tableData0.get(i).get(1).split(\" \");\n            String date = tmp[0]; /* <=== */ \n            String time = tmp[1].substring(0,5);\n            \n            int hour1 = Integer.parseInt(time.split(\":\")[0]);\n            int minute1 = Integer.parseInt(time.split(\":\")[1]);\n            int hour = hour1;"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 131,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "LocalDate.parse(date, formatter)",
                    "lineNumber" : 131,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 131,
                    "columnNumber" : 23,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "                \n            }\n            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter); /* <=== */ \n            \n            System.out.println(finDate.atTime(hour1, minute1));\n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()"
                  },
                  {
                    "sample" : "finDate",
                    "lineNumber" : 133,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  },
                  {
                    "sample" : "System.out.println(finDate.atTime(hour1, minute1))",
                    "lineNumber" : 133,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/DoctorController.java",
                    "excerpt" : "            \n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate finDate = LocalDate.parse(date, formatter);\n            \n            System.out.println(finDate.atTime(hour1, minute1)); /* <=== */ \n            \n            Appointments.add(\n                new Agenda.AppointmentImplLocal()\n                .withStartLocalDateTime(finDate.atTime(hour1, minute1))\n                .withEndLocalDateTime(finDate.atTime(hour, minute))"
                  }
                ]
              },
              {
                "pathId" : "21011-66795-66798-21010-21069-21084-21079",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 107,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "            scene.setFill(null);\n            stage.initStyle(StageStyle.TRANSPARENT);\n            stage.show();\n        }    \n        \n        if (info.getText().equals(\"1\")) /* <=== */ \n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText());\n        "
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 111,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  },
                  {
                    "sample" : "println(info.getText())",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.FinancialData.PaymentMode",
        "sinks" : [
          {
            "sinkType" : "leakages",
            "id" : "Leakages.Log.Console",
            "name" : "Log Console",
            "category" : "",
            "domains" : [
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "60642-60645-60648-19257-19263-15672-15692-15683-15682-15712-59884-59899-59895-59894-59904-59905-60004",
                "path" : [
                  {
                    "sample" : "cashier",
                    "lineNumber" : 183,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadCashier(String username)\n    {\n        Stage stage = new Stage();\n        CashierController cashier = new CashierController(username); /* <=== */ \n        \n        cashier.loadProfileData(); \n        cashier.makeHistoryTable();\n        cashier.fillLineChart();\n        cashier.setPaceholders();"
                  },
                  {
                    "sample" : "cashier",
                    "lineNumber" : 183,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    }\n    \n    public void loadCashier(String username)\n    {\n        Stage stage = new Stage();\n        CashierController cashier = new CashierController(username); /* <=== */ \n        \n        cashier.loadProfileData(); \n        cashier.makeHistoryTable();\n        cashier.fillLineChart();\n        cashier.setPaceholders();"
                  },
                  {
                    "sample" : "cashier",
                    "lineNumber" : 185,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/LoginController.java",
                    "excerpt" : "    public void loadCashier(String username)\n    {\n        Stage stage = new Stage();\n        CashierController cashier = new CashierController(username);\n        \n        cashier.loadProfileData();  /* <=== */ \n        cashier.makeHistoryTable();\n        cashier.fillLineChart();\n        cashier.setPaceholders();\n        cashier.loadNameList();\n        cashier.addFocusListener();"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 776,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "    @FXML\n    private TextField cashierNewPassword;\n    @FXML\n    private TextField cashierConfirmPassword;\n            \n    @FXML /* <=== */ \n    public void loadProfileData() \n    {\n\n        HashMap<String,String> cashierPersonalInfo =  cashier.getProfileInfo();\n\t\t"
                  },
                  {
                    "sample" : "this.cashier",
                    "lineNumber" : 780,
                    "columnNumber" : 55,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "            \n    @FXML\n    public void loadProfileData() \n    {\n\n        HashMap<String,String> cashierPersonalInfo =  cashier.getProfileInfo(); /* <=== */ \n\t\t\n        cashierName.setText(cashierPersonalInfo.get(\"first_name\") + \" \" + cashierPersonalInfo.get(\"last_name\"));\n        cashierNIC.setText(cashierPersonalInfo.get(\"nic\"));\n        cashierNationality.setText(cashierPersonalInfo.get(\"nationality\"));\n        cashierReligion.setText(cashierPersonalInfo.get(\"religion\"));"
                  },
                  {
                    "sample" : "this",
                    "lineNumber" : 51,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\n    /**\n     *\n     * @return\n     */\n    public HashMap<String,String> getProfileInfo() /* <=== */ \n\t{\n\n\t\tHashMap<String,String> infoHash = new HashMap<String,String>();\t\n\t\t\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////"
                  },
                  {
                    "sample" : "this.userID",
                    "lineNumber" : 59,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\tHashMap<String,String> infoHash = new HashMap<String,String>();\t\n\t\t\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\tString sql = \"SELECT person.*,sys_user.* \"+\n\t\t\t\t\t\t\"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n\t\t\t\t\t\t\"WHERE (sys_user.user_id = '\"+userID+\"' AND person.user_id = '\"+userID+\"');\"; /* <=== */ \n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.customSelection(sql);\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}"
                  },
                  {
                    "sample" : "\"SELECT person.*,sys_user.* \" + \"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \" + \"WHERE (sys_user.user_id = '\" + userID + \"' AND person.user_id = '\" + userID + \"');\"",
                    "lineNumber" : 57,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t{\n\n\t\tHashMap<String,String> infoHash = new HashMap<String,String>();\t\n\t\t\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\tString sql = \"SELECT person.*,sys_user.* \"+ /* <=== */ \n\t\t\t\t\t\t\"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n\t\t\t\t\t\t\"WHERE (sys_user.user_id = '\"+userID+\"' AND person.user_id = '\"+userID+\"');\";\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 57,
                    "columnNumber" : 10,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t{\n\n\t\tHashMap<String,String> infoHash = new HashMap<String,String>();\t\n\t\t\n\t\t//////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\tString sql = \"SELECT person.*,sys_user.* \"+ /* <=== */ \n\t\t\t\t\t\t\"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n\t\t\t\t\t\t\"WHERE (sys_user.user_id = '\"+userID+\"' AND person.user_id = '\"+userID+\"');\";\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 63,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\t\t\t\"FROM person INNER JOIN sys_user ON person.user_id = sys_user.user_id \"+\n\t\t\t\t\t\t\"WHERE (sys_user.user_id = '\"+userID+\"' AND person.user_id = '\"+userID+\"');\";\n\t\t\n\t\tArrayList<ArrayList<String>> data = null;\n\t\ttry{\n\t\t\tdata = super.dbOperator.customSelection(sql); /* <=== */ \n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\t\t\n\t\t///////////// Putting data into hashmap /////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\tArrayList<String> columns = data.get(0);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 507,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "System.out.println(\"\\n\\nError: \" + sql)",
                    "lineNumber" : 550,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t        rs.close();\n\t        stmt.close();\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tSystem.out.println(\"\\n\\nError: \"+sql); /* <=== */ \n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn main;\n\t}\n\t"
                  }
                ]
              },
              {
                "pathId" : "18218-18215-18214-18224-18223-18272-15760-15857-15856-15855-15879-15878-15897-15914-15931-15939-15930-15929-15947-15946-15959-15958-15968",
                "path" : [
                  {
                    "sample" : "this.paymentMethod",
                    "lineNumber" : 444,
                    "columnNumber" : 34,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        String hosFee = hospitalFee.getText();\n        String tot = patientTotal.getText();\n        String vatVal = vat.getText();\n        String doctorID = docID.getText();\n        \n        String paymeth = (String)paymentMethod.getValue(); /* <=== */ \n        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \"\n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        "
                  },
                  {
                    "sample" : "(String) paymentMethod.getValue()",
                    "lineNumber" : 444,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        String hosFee = hospitalFee.getText();\n        String tot = patientTotal.getText();\n        String vatVal = vat.getText();\n        String doctorID = docID.getText();\n        \n        String paymeth = (String)paymentMethod.getValue(); /* <=== */ \n        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \"\n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        "
                  },
                  {
                    "sample" : "paymeth",
                    "lineNumber" : 444,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        String hosFee = hospitalFee.getText();\n        String tot = patientTotal.getText();\n        String vatVal = vat.getText();\n        String doctorID = docID.getText();\n        \n        String paymeth = (String)paymentMethod.getValue(); /* <=== */ \n        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \"\n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        "
                  },
                  {
                    "sample" : "\"payment_method \" + paymeth + \",consultant_id \" + doctorID + \",patient_id \" + searchID + \",doctor_fee \" + doctorFee + \",hospital_fee \" + hosFee + \",pharmacy_fee \" + pharFee + \",\" + \"laboratory_fee \" + labFee + \",appointment_fee \" + appFee + \",vat \" + vatVal + \",total \" + tot",
                    "lineNumber" : 446,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        String vatVal = vat.getText();\n        String doctorID = docID.getText();\n        \n        String paymeth = (String)paymentMethod.getValue();\n        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \" /* <=== */ \n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        \n        String billID = cashier.bill(billInfo);\n"
                  },
                  {
                    "sample" : "billInfo",
                    "lineNumber" : 446,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        String vatVal = vat.getText();\n        String doctorID = docID.getText();\n        \n        String paymeth = (String)paymentMethod.getValue();\n        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \" /* <=== */ \n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        \n        String billID = cashier.bill(billInfo);\n"
                  },
                  {
                    "sample" : "billInfo",
                    "lineNumber" : 450,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
                    "excerpt" : "        \n        String billInfo = \"payment_method \"+paymeth+\",consultant_id \"+doctorID+\",patient_id \"\n                        + searchID+\",doctor_fee \"+doctorFee+\",hospital_fee \"+hosFee+\",pharmacy_fee \"+pharFee+\",\"\n                        + \"laboratory_fee \"+labFee+\",appointment_fee \"+appFee+\",vat \"+vatVal+\",total \"+tot;\n        \n        String billID = cashier.bill(billInfo); /* <=== */ \n\n        boolean result = cashier.removeFromTempBill(searchID);\n        \n    \n        String name = patientName.getText();"
                  },
                  {
                    "sample" : "billInfo",
                    "lineNumber" : 86,
                    "columnNumber" : 24,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "    /**\n     *\n     * @param billInfo\n     * @return\n     */\n    public String bill(String billInfo) /* <=== */ \n\t{\n\t\t\n\t\tString result = \"0\";\n\t\n\t\ttry{\t\t\t"
                  },
                  {
                    "sample" : "billInfo",
                    "lineNumber" : 116,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\n\t\t\t//////////////////////////////// SQL for adding the row ////////////////////////////////////////////////\n\t\t\tString columnNames = \"\";\n\t\t\tString rowData = \"\";\n\t\t\t\n\t\t\tString[] field = billInfo.split(\",\"); /* <=== */ \n\t\t\t\n\t\t\tint index = 0;\n\t\t\tfor (String val : field)\n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }"
                  },
                  {
                    "sample" : "billInfo.split(\",\")",
                    "lineNumber" : 116,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\n\t\t\t//////////////////////////////// SQL for adding the row ////////////////////////////////////////////////\n\t\t\tString columnNames = \"\";\n\t\t\tString rowData = \"\";\n\t\t\t\n\t\t\tString[] field = billInfo.split(\",\"); /* <=== */ \n\t\t\t\n\t\t\tint index = 0;\n\t\t\tfor (String val : field)\n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }"
                  },
                  {
                    "sample" : "field",
                    "lineNumber" : 116,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\n\t\t\t//////////////////////////////// SQL for adding the row ////////////////////////////////////////////////\n\t\t\tString columnNames = \"\";\n\t\t\tString rowData = \"\";\n\t\t\t\n\t\t\tString[] field = billInfo.split(\",\"); /* <=== */ \n\t\t\t\n\t\t\tint index = 0;\n\t\t\tfor (String val : field)\n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }"
                  },
                  {
                    "sample" : "val",
                    "lineNumber" : 119,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\tString rowData = \"\";\n\t\t\t\n\t\t\tString[] field = billInfo.split(\",\");\n\t\t\t\n\t\t\tint index = 0;\n\t\t\tfor (String val : field) /* <=== */ \n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }\n\t\t\t\t\n\t\t\t\t//// Order of column feilds in the input string!!! ////\n\t\t\t\tcolumnNames += val.split(\" \")[0];"
                  },
                  {
                    "sample" : "val",
                    "lineNumber" : 124,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\tfor (String val : field)\n\t\t\t{\n\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }\n\t\t\t\t\n\t\t\t\t//// Order of column feilds in the input string!!! ////\n\t\t\t\tcolumnNames += val.split(\" \")[0]; /* <=== */ \n\t\t\t\tif (index < 3) {rowData = rowData + \"'\";}\n\t\t\t\trowData += val.split(\" \")[1];\n\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;"
                  },
                  {
                    "sample" : "val",
                    "lineNumber" : 126,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index > 0){ columnNames += \",\" ; rowData += \",\"; }\n\t\t\t\t\n\t\t\t\t//// Order of column feilds in the input string!!! ////\n\t\t\t\tcolumnNames += val.split(\" \")[0];\n\t\t\t\tif (index < 3) {rowData = rowData + \"'\";}\n\t\t\t\trowData += val.split(\" \")[1]; /* <=== */ \n\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "Calendar.getInstance().getTime()",
                    "lineNumber" : 132,
                    "columnNumber" : 69,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);"
                  },
                  {
                    "sample" : "new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime())",
                    "lineNumber" : 132,
                    "columnNumber" : 18,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);"
                  },
                  {
                    "sample" : "date",
                    "lineNumber" : 132,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t\tif (index < 3) {rowData += \"'\";}\n\t\t\t\t\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime()); /* <=== */ \n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);"
                  },
                  {
                    "sample" : "\",'\" + tmpID2 + \"','\" + date + \"'\"",
                    "lineNumber" : 135,
                    "columnNumber" : 15,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\"; /* <=== */ \n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\";"
                  },
                  {
                    "sample" : "rowData",
                    "lineNumber" : 135,
                    "columnNumber" : 4,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\t}\n\t\t\t\n\t\t\tString date = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(Calendar.getInstance().getTime());\n\t\t\t\n\t\t\tcolumnNames += \",bill_id,bill_date\";\n\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\"; /* <=== */ \n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\";"
                  },
                  {
                    "sample" : "\"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData + \");\"",
                    "lineNumber" : 140,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\"; /* <=== */ \n                        System.out.println(sql);\n\t\t\t/////////////////////////////// Adding data to database /////////////////////////////////////////////////\n\t\t\tboolean res = super.dbOperator.customInsertion(sql);\n\t\t\tif (res == true ) result = tmpID2;\n\t"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 140,
                    "columnNumber" : 11,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\t\t\trowData += \",'\" + tmpID2 + \"','\" + date +\"'\";\n\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\"; /* <=== */ \n                        System.out.println(sql);\n\t\t\t/////////////////////////////// Adding data to database /////////////////////////////////////////////////\n\t\t\tboolean res = super.dbOperator.customInsertion(sql);\n\t\t\tif (res == true ) result = tmpID2;\n\t"
                  },
                  {
                    "sample" : "System.out.println(sql)",
                    "lineNumber" : 141,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Cashier/Cashier.java",
                    "excerpt" : "\n\t\t\t//System.out.println(columnNames);\n\t\t\t//System.out.println(rowData);\n\t\t\t\n\t\t\tString sql = \"INSERT INTO bill (\" + columnNames + \") VALUES (\" + rowData +\");\";\n                        System.out.println(sql); /* <=== */ \n\t\t\t/////////////////////////////// Adding data to database /////////////////////////////////////////////////\n\t\t\tboolean res = super.dbOperator.customInsertion(sql);\n\t\t\tif (res == true ) result = tmpID2;\n\t\n\t\t}catch(ClassNotFoundException | SQLException e){e.printStackTrace();}"
                  }
                ]
              },
              {
                "pathId" : "21011-66795-66798-21010-21069-21084-21079",
                "path" : [
                  {
                    "sample" : "this",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 88,
                    "columnNumber" : 63,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        if (column == 5)\n        {\n            info.setText(\"refund \" + refund.getPatientID());\n            \n            Stage stage = new Stage();\n            PopupAskController popup = new PopupAskController(info,cashier,this); /* <=== */ \n            popup.message(\"  Make the Refund?\");    \n\n            Scene scene = new Scene(popup);\n            stage.setScene( scene );\n"
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 107,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "            scene.setFill(null);\n            stage.initStyle(StageStyle.TRANSPARENT);\n            stage.show();\n        }    \n        \n        if (info.getText().equals(\"1\")) /* <=== */ \n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText());\n        "
                  },
                  {
                    "sample" : "this.info",
                    "lineNumber" : 111,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  },
                  {
                    "sample" : "println(info.getText())",
                    "lineNumber" : 111,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/Cashier/RefundController.java",
                    "excerpt" : "        \n        if (info.getText().equals(\"1\"))\n        {\n            System.out.println(\"Yes!\");\n        }   \n        System.out.println(info.getText()); /* <=== */ \n        \n    }        \n    \n    @FXML\n    public Label closeRefund;"
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "third_parties" : [
      {
        "sourceId" : "Data.Sensitive.HealthData.MedicalCertificates",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Facebook",
            "name" : "Facebook",
            "category" : "",
            "domains" : [
              "facebook.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "22288-22286-22290-22294-22298-22302-22306-22310-22336-22405-22430-22429-22428-22490-22494-22493-22523-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-22519-22518-22538-22551-29526-29542-29539-29536-29535-29552-29551-29550-29549-29548-29547-29546-29545-29570-29569",
                "path" : [
                  {
                    "sample" : "\"BloodGroupingRh\"",
                    "lineNumber" : 371,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\n\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\"); /* <=== */ \n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 371,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\n\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\"); /* <=== */ \n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 372,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\");  /* <=== */ \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 373,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\"); /* <=== */ \n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 374,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\"); /* <=== */ \n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 375,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\"); /* <=== */ \n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";\n            "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 376,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\"); /* <=== */ \n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";\n            \n            String prefx = testID.substring(0,2);"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 377,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");         /* <=== */ \n                    \n            String tableName = \"\";\n            \n            String prefx = testID.substring(0,2);\n            boolean flg = false;"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 387,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            boolean flg = false;\n            \n            switch(prefx)        \n            {\n                case \"lv\":\n                    tableName = tables.get(prefx); /* <=== */ \n                    flg = true;\n                    break;\n                case \"bg\":\n                    tableName = tables.get(prefx);\n                    flg = true;"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 414,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,4);\n                switch(prefx)        \n                {\n                    case \"scpt\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                }    \n                    \n            }    "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 427,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tables.get(prefx)",
                    "lineNumber" : 427,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tableName",
                    "lineNumber" : 427,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tableName",
                    "lineNumber" : 449,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tableId.put(\"SeriumCreatinePhosphokinase\",\"tst_SCP_id\");\n            tableId.put(\"SeriumCreatinePhosphokinaseTotal\",\"tst_SCPT_id\");\n            tableId.put(\"UrineFullReport\",\"tst_ur_id\");\n            tableId.put(\"completeBloodCount\",\"tst_CBC_id\");\n\n            String testIdCol = tableId.get(tableName); /* <=== */ \n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" +\n                            \"FROM \"+tableName+\" \" +"
                  },
                  {
                    "sample" : "\"SELECT * \" + \"FROM \" + tableName + \" \" + \"WHERE \" + testIdCol + \" = '\" + testID + \"';\"",
                    "lineNumber" : 453,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            String testIdCol = tableId.get(tableName);\n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" + /* <=== */ \n                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 453,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            String testIdCol = tableId.get(tableName);\n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" + /* <=== */ \n                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 459,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql)",
                    "lineNumber" : 459,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 459,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 464,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                    data = super.dbOperator.customSelection(sql);\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta); /* <=== */ \n            \n            System.out.println(data);\n            final Example example = new Example(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 467,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);\n            \n            System.out.println(data);\n            final Example example = new Example(data); /* <=== */ \n            return data;\n\t}\n\n    public ArrayList<ArrayList<ArrayList<String>>> getPatientInfo(String searchType, String searchWord)\n\t{"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 20,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final Long ACCOUNT_ID = 0L;\n  public static final String APP_SECRET = \"[Your app secret]\";\n\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) { /* <=== */ \n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 22,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "Example.context",
                    "lineNumber" : 22,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "Example.ACCOUNT_ID",
                    "lineNumber" : 22,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 22,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "createCampaign()",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setName(\"Java SDK Test Campaign\")",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setSpendCap(10000L)",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setStatus(Campaign.EnumStatus.VALUE_PAUSED)",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "execute()",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "campaign",
                    "lineNumber" : 23,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "campaign",
                    "lineNumber" : 29,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();\n      System.out.println(campaign.fetch()); /* <=== */ \n    } catch (APIException e) {\n      e.printStackTrace();\n    }\n  }\n}"
                  },
                  {
                    "sample" : "fetch()",
                    "lineNumber" : 29,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();\n      System.out.println(campaign.fetch()); /* <=== */ \n    } catch (APIException e) {\n      e.printStackTrace();\n    }\n  }\n}"
                  }
                ]
              },
              {
                "pathId" : "22288-22286-22290-22294-22298-22302-22306-22310-22336-22405-22430-22429-22428-22490-22494-22493-22523-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-22519-22518-22538-22551-29526-29542-29539-29536-29535-29552-29551",
                "path" : [
                  {
                    "sample" : "\"BloodGroupingRh\"",
                    "lineNumber" : 371,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\n\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\"); /* <=== */ \n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 371,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t\n\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\"); /* <=== */ \n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 372,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> getTestResults(String testID)\n\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\");  /* <=== */ \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 373,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\t{\n            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\"); /* <=== */ \n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 374,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            HashMap<String,String> tables = new HashMap<String,String>();\n            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\"); /* <=== */ \n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 375,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"lv\",\"LiverFunctionTest\");\n            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\"); /* <=== */ \n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";\n            "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 376,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"bg\",\"BloodGroupingRh\");\n            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\"); /* <=== */ \n            tables.put(\"cbc\",\"completeBloodCount\");        \n                    \n            String tableName = \"\";\n            \n            String prefx = testID.substring(0,2);"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 377,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tables.put(\"li\",\"LipidTest\"); \n            tables.put(\"re\",\"RenalFunctionTest\");\n            tables.put(\"scp\",\"SeriumCreatinePhosphokinase\");\n            tables.put(\"scpt\",\"SeriumCreatinePhosphokinaseTotal\");\n            tables.put(\"ur\",\"UrineFullReport\");\n            tables.put(\"cbc\",\"completeBloodCount\");         /* <=== */ \n                    \n            String tableName = \"\";\n            \n            String prefx = testID.substring(0,2);\n            boolean flg = false;"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 387,
                    "columnNumber" : 33,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            boolean flg = false;\n            \n            switch(prefx)        \n            {\n                case \"lv\":\n                    tableName = tables.get(prefx); /* <=== */ \n                    flg = true;\n                    break;\n                case \"bg\":\n                    tableName = tables.get(prefx);\n                    flg = true;"
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 414,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,4);\n                switch(prefx)        \n                {\n                    case \"scpt\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                }    \n                    \n            }    "
                  },
                  {
                    "sample" : "tables",
                    "lineNumber" : 427,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tables.get(prefx)",
                    "lineNumber" : 427,
                    "columnNumber" : 37,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tableName",
                    "lineNumber" : 427,
                    "columnNumber" : 25,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            {\n                prefx = testID.substring(0,3);\n                switch(prefx)        \n                {\n                    case \"scp\":\n                        tableName = tables.get(prefx); /* <=== */ \n                        flg = true;\n                        break;\n                    case \"cbc\":\n                        tableName = tables.get(prefx);\n                        flg = true;"
                  },
                  {
                    "sample" : "tableName",
                    "lineNumber" : 449,
                    "columnNumber" : 44,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            tableId.put(\"SeriumCreatinePhosphokinase\",\"tst_SCP_id\");\n            tableId.put(\"SeriumCreatinePhosphokinaseTotal\",\"tst_SCPT_id\");\n            tableId.put(\"UrineFullReport\",\"tst_ur_id\");\n            tableId.put(\"completeBloodCount\",\"tst_CBC_id\");\n\n            String testIdCol = tableId.get(tableName); /* <=== */ \n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" +\n                            \"FROM \"+tableName+\" \" +"
                  },
                  {
                    "sample" : "\"SELECT * \" + \"FROM \" + tableName + \" \" + \"WHERE \" + testIdCol + \" = '\" + testID + \"';\"",
                    "lineNumber" : 453,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            String testIdCol = tableId.get(tableName);\n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" + /* <=== */ \n                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 453,
                    "columnNumber" : 20,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "\n            String testIdCol = tableId.get(tableName);\n                    \n            //////////////////////////////////// Getting data from database //////////////////////////////////////////////////////////////\n\t\t\n            String sql =    \"SELECT * \" + /* <=== */ \n                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 459,
                    "columnNumber" : 61,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 501,
                    "columnNumber" : 54,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "sql",
                    "lineNumber" : 506,
                    "columnNumber" : 48,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "DatabaseOperator.c",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "c.prepareStatement(sql)",
                    "lineNumber" : 506,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 506,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException\n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql); /* <=== */ \n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t"
                  },
                  {
                    "sample" : "stmt",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "stmt.executeQuery(sql)",
                    "lineNumber" : 507,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 507,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql); /* <=== */ \n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rs.getMetaData()",
                    "lineNumber" : 508,
                    "columnNumber" : 29,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 508,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData(); /* <=== */ \n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)"
                  },
                  {
                    "sample" : "rsmd",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "rsmd.getColumnCount()",
                    "lineNumber" : 509,
                    "columnNumber" : 22,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 509,
                    "columnNumber" : 8,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount(); /* <=== */ \n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns];\n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{"
                  },
                  {
                    "sample" : "noOfColumns",
                    "lineNumber" : 512,
                    "columnNumber" : 38,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "new String[noOfColumns]",
                    "lineNumber" : -1,
                    "columnNumber" : -1,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : ""
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 512,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\tResultSetMetaData rsmd = rs.getMetaData();\n\t\t\tint noOfColumns = rsmd.getColumnCount();\n\t\t\t\n\t\t\t\n\t\t\tString[] columnNames = new String[noOfColumns]; /* <=== */ \n\t\t\tfor (int i = 0; i < noOfColumns; i++)\n\t\t\t{\n\t\t\t\tcolumnNames[i] = rsmd.getColumnName(i+1);\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "columnNames",
                    "lineNumber" : 529,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t}\n\t\t\tSystem.out.print(\"\\n\\n\");\n\t\t\t*/\n\t\t\t\n\t\t\tmain = new ArrayList<ArrayList<String>>();\n\t\t\tmain.add(new ArrayList<String>(Arrays.asList(columnNames))); /* <=== */ \n\t\t\tString fieldValue;\n\t\t\twhile(rs.next())\n\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); "
                  },
                  {
                    "sample" : "columnNames[i]",
                    "lineNumber" : 537,
                    "columnNumber" : 32,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "rs.getString(columnNames[i])",
                    "lineNumber" : 537,
                    "columnNumber" : 19,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 537,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t{\n\t\t\t\t//Retrieve by column name\n\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]); /* <=== */ \n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();"
                  },
                  {
                    "sample" : "fieldValue",
                    "lineNumber" : 539,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 539,
                    "columnNumber" : 6,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\tArrayList<String> tmpRow = new ArrayList<String>(); \n\t\t\t\tfor (int i = 0; i < noOfColumns; i++ )\n\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue); /* <=== */ \n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t"
                  },
                  {
                    "sample" : "tmpRow",
                    "lineNumber" : 541,
                    "columnNumber" : 14,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "main",
                    "lineNumber" : 541,
                    "columnNumber" : 5,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "\t\t\t\t{\n\t\t\t\t\tfieldValue = rs.getString(columnNames[i]);\n\t\t\t\t\t//System.out.print(fieldValue + \"\\t\");\n\t\t\t\t\ttmpRow.add(fieldValue);\n\t\t\t\t}\n\t\t\t\tmain.add(tmpRow); /* <=== */ \n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\t\n\t        rs.close();\n\t        stmt.close();"
                  },
                  {
                    "sample" : "$ret",
                    "lineNumber" : 501,
                    "columnNumber" : 9,
                    "fileName" : "/app/code/src/main/java/com/hms/hms_test_2/DatabaseOperator.java",
                    "excerpt" : "        rs.close();\n        stmt.close();\n        return table;\n\t}\n\t\n\tpublic ArrayList<ArrayList<String>> customSelection(String sql) throws ClassNotFoundException,SQLException /* <=== */ \n\t{\n\t\tArrayList<ArrayList<String>> main = null;\n\t\ttry\n\t\t{\n\t\t\tPreparedStatement stmt = c.prepareStatement(sql);"
                  },
                  {
                    "sample" : "super.dbOperator.customSelection(sql)",
                    "lineNumber" : 459,
                    "columnNumber" : 28,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 459,
                    "columnNumber" : 21,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                            \"FROM \"+tableName+\" \" +\n                            \"WHERE \"+testIdCol+\" = '\" + testID + \"';\";\n\n            ArrayList<ArrayList<String>> data = null;\n            try{\n                    data = super.dbOperator.customSelection(sql); /* <=== */ \n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 464,
                    "columnNumber" : 13,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "                    data = super.dbOperator.customSelection(sql);\n            }catch(ClassNotFoundException | SQLException e){e.printStackTrace();}\n\n            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta); /* <=== */ \n            \n            System.out.println(data);\n            final Example example = new Example(data);\n            return data;\n\t}"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 467,
                    "columnNumber" : 49,
                    "fileName" : "/app/code/src/main/java/Doctor/Doctor.java",
                    "excerpt" : "            ArrayList<String> meta = new ArrayList<String>();\n            meta.add(prefx);\n            data.add(meta);\n            \n            System.out.println(data);\n            final Example example = new Example(data); /* <=== */ \n            return data;\n\t}\n\n    public ArrayList<ArrayList<ArrayList<String>>> getPatientInfo(String searchType, String searchWord)\n\t{"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 20,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final Long ACCOUNT_ID = 0L;\n  public static final String APP_SECRET = \"[Your app secret]\";\n\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) { /* <=== */ \n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)"
                  },
                  {
                    "sample" : "data",
                    "lineNumber" : 22,
                    "columnNumber" : 62,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "Example.context",
                    "lineNumber" : 22,
                    "columnNumber" : 53,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "Example.ACCOUNT_ID",
                    "lineNumber" : 22,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 22,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "createCampaign()",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "sourceId" : "Data.Sensitive.AccountData.AccountID",
        "sinks" : [
          {
            "sinkType" : "third_parties",
            "id" : "ThirdParties.SDK.Facebook",
            "name" : "Facebook",
            "category" : "",
            "domains" : [
              "facebook.com"
            ],
            "sensitivity" : "",
            "isSensitive" : false,
            "tags" : {
              
            },
            "apiUrl" : [
            ],
            "paths" : [
              {
                "pathId" : "29536-29535-29552-29551-29550-29549-29548-29547-29546-29545-29570-29569",
                "path" : [
                  {
                    "sample" : "Example.ACCOUNT_ID",
                    "lineNumber" : 22,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 22,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "createCampaign()",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setName(\"Java SDK Test Campaign\")",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setSpendCap(10000L)",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "setStatus(Campaign.EnumStatus.VALUE_PAUSED)",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "execute()",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "campaign",
                    "lineNumber" : 23,
                    "columnNumber" : 16,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "campaign",
                    "lineNumber" : 29,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();\n      System.out.println(campaign.fetch()); /* <=== */ \n    } catch (APIException e) {\n      e.printStackTrace();\n    }\n  }\n}"
                  },
                  {
                    "sample" : "fetch()",
                    "lineNumber" : 29,
                    "columnNumber" : 26,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();\n      System.out.println(campaign.fetch()); /* <=== */ \n    } catch (APIException e) {\n      e.printStackTrace();\n    }\n  }\n}"
                  }
                ]
              },
              {
                "pathId" : "29536-29535-29552-29551",
                "path" : [
                  {
                    "sample" : "Example.ACCOUNT_ID",
                    "lineNumber" : 22,
                    "columnNumber" : 41,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 22,
                    "columnNumber" : 17,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "\n  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data); /* <=== */ \n      Campaign campaign = account.createCampaign()\n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)"
                  },
                  {
                    "sample" : "account",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  },
                  {
                    "sample" : "createCampaign()",
                    "lineNumber" : 23,
                    "columnNumber" : 27,
                    "fileName" : "/app/code/src/main/java/Doctor/Example.java",
                    "excerpt" : "  public static final APIContext context = new APIContext(ACCESS_TOKEN, APP_SECRET);\n\npublic Example (ArrayList<ArrayList<String>> data) {\n    try {\n      AdAccount account = new AdAccount(ACCOUNT_ID, context, data);\n      Campaign campaign = account.createCampaign() /* <=== */ \n        .setName(\"Java SDK Test Campaign\")\n        .setObjective(Campaign.EnumObjective.VALUE_LINK_CLICKS)\n        .setSpendCap(10000L)\n        .setStatus(Campaign.EnumStatus.VALUE_PAUSED)\n        .execute();"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "collections" : [
  ],
  "violations" : [
    {
      "policyId" : "Policy.Allow.Processing.FinancialData",
      "policyDetails" : {
        "name" : "Example: Don't use financial data outside of payments services",
        "policyType" : "compliance",
        "description" : "Policy to allow processing Financial Information only in payments services",
        "fix" : "Talk to the Data Protection team: dataprotection@org.com",
        "action" : "allow",
        "tags" : {
          "policyPurpose" : "Security Audit"
        }
      },
      "dataFlow" : null,
      "processing" : [
        {
          "sourceId" : "Data.Sensitive.FinancialData.PaymentMode",
          "occurrence" : {
            "sample" : "this.paymentMethod",
            "lineNumber" : 427,
            "columnNumber" : 9,
            "fileName" : "/app/code/src/main/java/Cashier/CashierController.java",
            "excerpt" : "        serviceFees.setText(\"\");\n        vat.setText(\"\");\n        docName.setText(\"\");\n        docID.setText(\"\");\n        \n        paymentMethod.setValue(\"\"); /* <=== */ \n    \n    }\n    \n    public void issueBill()\n    {"
          }
        }
      ]
    },
    {
      "policyId" : "Threats.Leakage.isDataLeakingToLog",
      "policyDetails" : {
        "name" : "PII data is written to the log files",
        "policyType" : "threat",
        "description" : "Sensitive Data written to log files or file system may lead to unauthorized access or exposure to potential attack.",
        "fix" : "It is not recommended to log Sensitive Data to log files or the file system. The data must be encrypted if it is absolutely necessary to log it.",
        "action" : "",
        "tags" : {
          "CWE-359" : "https://cwe.mitre.org/data/definitions/359.html",
          "CWE-532" : "https://cwe.mitre.org/data/definitions/532.html",
          "MSTG-STORAGE-3" : "https://github.com/OWASP/owasp-mstg/blob/master/Document/0x05d-Testing-Data-Storage.md#Testing-Logs-for-Sensitive-Data-MSTG-STORAGE-3",
          "MITRE" : "Sharing.Exposure"
        }
      },
      "dataFlow" : [
        {
          "sourceId" : "Data.Sensitive.FinancialData.PaymentMode",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "60642-60645-60648-19257-19263-15672-15692-15683-15682-15712-59884-59899-59895-59894-59904-59905-60004",
            "18218-18215-18214-18224-18223-18272-15760-15857-15856-15855-15879-15878-15897-15914-15931-15939-15930-15929-15947-15946-15959-15958-15968",
            "21011-66795-66798-21010-21069-21084-21079"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.ContactData.Address",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
            "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
            "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
            "21011-66795-66798-21010-21069-21084-21079"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalCharacteristics.Religion/ReligiousBeliefs",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
            "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
            "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
            "21011-66795-66798-21010-21069-21084-21079"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.Gender",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
            "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
            "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
            "21011-66795-66798-21010-21069-21084-21079"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.ContactData.PhoneNumber",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "5420-5423-5426-12905-12904-13000-13011-2662-2685-2676-2675-2695-59884-59899-59895-59894-59904-59905-60004"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.HealthData.MedicalCertificates",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "22288-22286-22290-22294-22298-22302-22306-22310-22336-22405-22430-22429-22428-22490-22494-22493-22523-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-22519-22518-22538-22540",
            "22288-22286-22290-22294-22298-22302-22306-22310-22336-22405-22430-22429-22428-22490-22494-22493-22523-59884-59899-59895-59894-59904-59905-60004",
            "32500-32498-32497-32511-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-32507-32506-32516-32520-33143-33142-33249-33263-37751-37924-37923-37922-37921-37934-38123-38141-38140-38139-38144-38171-38190-38208-38125-38122-38127",
            "22288-22286-22290-22294-22298-22302-22306-22310-22336-22405-22430-22429-22428-22490-22494-22493-22523-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-22519-22518-22538-22551-29526-29542-29539-29536-29535-29552-29551-29550-29549-29548-29547-29546-29545-29570-29565",
            "32500-32498-32497-32511-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-32507-32506-32516-32520-33143-33142-33249-33263-37751-37754",
            "32500-32498-32497-32511-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-32507-32506-32516-32520-33143-33142-33249-33263-37751-37924-37923-37922-37921-37934-37933-37930-37929-37928-37936",
            "32500-32498-32497-32511-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-32507-32506-32516-32520-33143-33142-33249-33263-37751-37924-37931-38096-38111"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.DateofBirth",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "5420-5423-5426-12905-12904-13000-13011-2662-2685-2676-2675-2695-59884-59899-59895-59894-59904-59905-60004"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.AccountData.AccountPassword",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "62566-62565-62564-62562-62573",
            "62716-62715-62714-62712-62723",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
            "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
            "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
            "21011-66795-66798-21010-21069-21084-21079",
            "62566-62565-62571-62570-62568-62634-58914-58943"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.AccountData.AccountName",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "60291-60294-62430-62429-62530-62529-62528-62527-62534-62539-62538-62559-62558-62556-62573",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
            "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
            "60279-60278-60277-60302-62828-62853-62850-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-62846-62845-62865-62873-62872-62871-62870-62882-62881-62887-62891-60300-60299-60304",
            "21011-66795-66798-21010-21069-21084-21079",
            "3088-3091-4-3-62436-62435-62680-62679-62678-62677-62684-62689-62688-62709-62715-62721-62720-62718-62784-58914-58943",
            "60279-60278-60277-60302-62828-62853-62850-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-62846-62845-62855",
            "16931-16934-15617-15616-62436-62435-62680-62679-62678-62677-62684-62689-62688-62709-62708-62706-62723",
            "27288-27291-27296-58458-58457-58455-58549-62451-63437-63450-66795-66798-63449-70558-58549-58595-62447-63215-63206-63205-63230-59884-59899-59895-59894-59904-59905-60004",
            "15779-66795-66798-15778-15931-15939-15930-15929-15947-15946-15959-15958-15968",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
            "53230-53251-47481-47485-47484-47483-47490-53250-53249-53293-50530-50535-50534-50562-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50558-50557-50571-50570-50569-50579-50578-50589-50588-50587-50586-50585-50595-50599-50598-50594-50600-50604-53289-53288-53298-53297-53296-53311-53310-53321-53320-53322",
            "56322-56325-56330-58458-58457-58455-58549-62451-63437-63428-63427-63452-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-63448-63447-63457"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.ContactData.EmailAddress",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
            "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
            "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
            "21011-66795-66798-21010-21069-21084-21079"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.FirstName",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
            "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
            "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.AccountData.AccountID",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "17692-17691-17690-17768-17765-17764-17763-17775-16675-16687-16686-16706-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-16702-16701-16711",
            "39997-39993-39992-40012-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-40008-40007-40017-40021-43165-43164-43179",
            "20964-20997-20644-20648-20647-20646-20653-20996-20994-20991-21010-61782-61802-70531-21010-21069-21084-21079",
            "63356-63347-63346-63370-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-63366-63365-63375",
            "3088-3091-4-3-62436-62435-62680-62679-62678-62677-62684-62689-62688-62709-62715-62721-62720-62718-62784-58914-58943",
            "23674-23690-23684-23683-23705-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-23701-23700-23710-23714-24317-24316-24346-24345-24344-24354-24353-24363-24362-24361-24360-24359-24376-24374-24373-24389-24388-24387-24386-24390",
            "54526-54546-50530-50535-50534-50562-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50558-50557-50571-50570-50569-50579-50578-50589-50588-50587-50586-50585-50595-50599-50598-50594-50600-50604-54542-54541-54547",
            "52914-52925-52943-48210-48226-48215-48214-48240-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-48236-48235-48245-48249-52939-52938-52955-52964-52972-52999-53008-53017-53026-53064-53063-53062-53061-53067",
            "63740-63746-63754-70586-52703-52721-48210-48226-48215-48214-48240-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-48236-48235-48245-48249-52717-52716-52733-52742-52750-52777-52786-52795-52804-52842-52841-52840-52839-52845",
            "17692-17691-17690-17757-16675-16696-69596-17757-18027-16723-16732-16731-16749-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-16745-16744-16754",
            "56322-56325-56330-58458-58457-58455-58549-62451-63437-63428-63427-63452-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-63448-63447-63457",
            "17692-17691-17690-17768-17765-17764-17763-17775-16675-16687-16686-16706-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-16702-16701-16716-16720-17771-17770-17792",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
            "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
            "27139-27155-27188-27196-27254-27267-27273-27269",
            "27288-27291-27296-58458-58457-58455-58549-62451-63437-63450-66795-66798-63449-70558-58549-58595-62447-63215-63206-63205-63230-59884-59899-59895-59894-59904-59905-60004",
            "18153-18152-18151-18224-18223-18272-15760-15857-15856-15855-15879-15878-15897-15914-15931-15939-15930-15929-15947-15946-15959-15958-15968",
            "17692-17691-17690-17757-16675-16696-69596-17757-18027-16723-16732-16731-16749-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-16745-16744-16759-16763-18023-18022-18028",
            "52914-52925-52943-48210-48226-48215-48214-48240-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-48236-48235-48245-48249-52939-52938-52944",
            "29536-29535-29552-29551-29550-29549-29548-29547-29546-29545-29570-29565",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
            "1351-1344-1343-1366-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-1362-1361-1371-1375-5017-5016-5021",
            "63740-63746-63754-70586-52703-52721-48210-48226-48215-48214-48240-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-48236-48235-48245-48249-52717-52716-52722",
            "1657-1673-1667-1666-1688-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-1684-1683-1693-1697-8547-8546-8568-8567-8566-8576-8575-8585-8584-8583-8582-8581-8598-8596-8595-8611-8610-8609-8608-8612",
            "53230-53251-47481-47485-47484-47483-47490-53250-53249-53293-50530-50535-50534-50562-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50558-50557-50571-50570-50569-50579-50578-50589-50588-50587-50586-50585-50595-50599-50598-50594-50600-50604-53289-53288-53298-53297-53296-53311-53310-53321-53320-53322"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.Photograph",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
            "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
            "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
            "21011-66795-66798-21010-21069-21084-21079"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.OnlineIdentifiers.IPAddress",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "5143-5197-1378-1447-1437-1436-1472-1471-1470-1469-1483-1501-1500-1499-1507-1506-1505-1511",
            "12450-12504-1378-1447-1437-1436-1472-1471-1470-1469-1483-1482-1481-1490-1489-1488-1494"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalIdentification.LastName",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
            "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
            "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252"
          ]
        },
        {
          "sourceId" : "Data.Sensitive.PersonalCharacteristics.Nationality",
          "sinkId" : "Leakages.Log.Console",
          "pathIds" : [
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24142",
            "60715-60718-60721-60723-3127-3152-3156-3162-3168-3174-3180-3186-3224-3227-3217-1176-1185-1184-1202-59884-59899-59895-59894-59904-59905-60004",
            "51805-54601-54598-54597-54611-50607-50612-50611-50643-59884-59899-59896-59895-59894-59904-59903-59902-59910-59909-59908-59915-59914-59913-59920-59919-59918-59957-59985-59984-59983-59982-59990-59989-59993-59992-60013-60017-50639-50638-50652-50651-50650-50660-50659-50670-50669-50668-50667-50666-50676-50675-50679-50681-50685-54607-54606-54612",
            "60423-60426-60429-60431-24123-24134-22109-22125-59788-59805-59804-59825-59822-59821-59820-59830-59829-59828-59841-59863-59862-59861-59869-59868-59872-59871-59877-59881-22119-22118-22145-22143-22156-22160-24133-24132-24141-24140-24139-24159-24158-24170-24284-24283-24169-24168-24167-24166-24165-24176-24175-24250-24248-24247-24257-24252",
            "21011-66795-66798-21010-21069-21084-21079"
          ]
        }
      ],
      "processing" : null
    }
  ]
}